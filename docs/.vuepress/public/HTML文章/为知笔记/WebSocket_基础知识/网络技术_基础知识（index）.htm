<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<title>网络技术_基础知识（index）</title>
    
<style id="wiz_code_style">.wiz-editor-body .wiz-code-container{position: relative; padding:8px 0; margin: 5px 0;text-indent:0; text-align:left;}.CodeMirror {font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; color: black; font-size: 10.5pt; font-size: 0.875rem}.wiz-editor-body .wiz-code-container .CodeMirror div {margin-top: 0; margin-bottom: 0;}.CodeMirror-lines {padding: 4px 0;}.CodeMirror pre.CodeMirror-line,.CodeMirror pre.CodeMirror-line-like {padding: 0 4px;}.CodeMirror pre.CodeMirror-line {min-height: 24px;}.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {background-color: white;}.CodeMirror-gutters {border-right: 1px solid #ddd; background-color: #f7f7f7; white-space: nowrap;}.CodeMirror-linenumbers {}.CodeMirror-linenumber {padding: 0 3px 0 5px; min-width: 20px; text-align: right; color: #999; white-space: nowrap;}.CodeMirror-guttermarker {color: black;}.CodeMirror-guttermarker-subtle {color: #999;}.CodeMirror-cursor {border-left: 1px solid black; border-right: none; width: 0;}.CodeMirror div.CodeMirror-secondarycursor {border-left: 1px solid silver;}.cm-fat-cursor .CodeMirror-cursor {width: auto; border: 0 !important; background: #7e7;}.cm-fat-cursor div.CodeMirror-cursors {z-index: 1;}.cm-fat-cursor-mark {background-color: rgba(20, 255, 20, 0.5);-webkit-animation: blink 1.06s steps(1) infinite;-moz-animation: blink 1.06s steps(1) infinite;animation: blink 1.06s steps(1) infinite;}.cm-animate-fat-cursor {width: auto; border: 0; -webkit-animation: blink 1.06s steps(1) infinite; -moz-animation: blink 1.06s steps(1) infinite; animation: blink 1.06s steps(1) infinite; background-color: #7e7;}@-moz-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@-webkit-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}.CodeMirror-overwrite .CodeMirror-cursor {}.cm-tab { display: inline-block; text-decoration: inherit; }.CodeMirror-rulers {position: absolute; left: 0; right: 0; top: -50px; bottom: -20px; overflow: hidden;}.CodeMirror-ruler {border-left: 1px solid #ccc; top: 0; bottom: 0; position: absolute;}.cm-s-default .cm-header {color: blue;}.cm-s-default .cm-quote {color: #090;}.cm-negative {color: #d44;}.cm-positive {color: #292;}.cm-header, .cm-strong {font-weight: bold;}.cm-em {font-style: italic;}.cm-link {text-decoration: underline;}.cm-strikethrough {text-decoration: line-through;}.cm-s-default .cm-keyword {color: #708;}.cm-s-default .cm-atom {color: #219;}.cm-s-default .cm-number {color: #164;}.cm-s-default .cm-def {color: #00f;}.cm-s-default .cm-variable,.cm-s-default .cm-punctuation,.cm-s-default .cm-property,.cm-s-default .cm-operator {}.cm-s-default .cm-variable-2 {color: #05a;}.cm-s-default .cm-variable-3 {color: #085;}.cm-s-default .cm-comment {color: #a50;}.cm-s-default .cm-string {color: #a11;}.cm-s-default .cm-string-2 {color: #f50;}.cm-s-default .cm-meta {color: #555;}.cm-s-default .cm-qualifier {color: #555;}.cm-s-default .cm-builtin {color: #30a;}.cm-s-default .cm-bracket {color: #997;}.cm-s-default .cm-tag {color: #170;}.cm-s-default .cm-attribute {color: #00c;}.cm-s-default .cm-hr {color: #999;}.cm-s-default .cm-link {color: #00c;}.cm-s-default .cm-error {color: #f00;}.cm-invalidchar {color: #f00;}.CodeMirror-composing { border-bottom: 2px solid; }div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }.CodeMirror-activeline-background {background: #e8f2ff;}.CodeMirror {position: relative; background: #f5f5f5;}.CodeMirror-scroll {overflow: hidden !important; margin-bottom: 0; margin-right: -30px; padding: 16px 30px 16px 0; outline: none; position: relative;}.CodeMirror-sizer {position: relative; border-right: 30px solid transparent;}.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {position: absolute; z-index: 6; display: none;}.CodeMirror-vscrollbar {right: 0; top: 0; overflow-x: hidden; overflow-y: scroll;}.CodeMirror-hscrollbar {bottom: 0; left: 0 !important; overflow-y: hidden; overflow-x: scroll;pointer-events: auto !important;outline: none;}.CodeMirror-scrollbar-filler {right: 0; bottom: 0;}.CodeMirror-gutter-filler {left: 0; bottom: 0;}.CodeMirror-gutters {position: absolute; left: 0; top: 0; min-height: 100%; z-index: 3;}.CodeMirror-gutter {white-space: normal; height: 100%; display: inline-block; vertical-align: top; margin-bottom: -30px;}.CodeMirror-gutter-wrapper {position: absolute; z-index: 4; background: none !important; border: none !important;}.CodeMirror-gutter-background {position: absolute; top: 0; bottom: 0; z-index: 4;}.CodeMirror-gutter-elt {position: absolute; cursor: default; z-index: 4;}.CodeMirror-gutter-wrapper ::selection { background-color: transparent }.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }.CodeMirror-lines {cursor: text; min-height: 1px;}.CodeMirror pre.CodeMirror-line,.CodeMirror pre.CodeMirror-line-like {-moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0; border-width: 0; background: transparent; font-family: inherit; font-size: inherit; margin: 0; white-space: pre; word-wrap: normal; line-height: inherit; color: inherit; z-index: 2; position: relative; overflow: visible; -webkit-tap-highlight-color: transparent; -webkit-font-variant-ligatures: contextual; font-variant-ligatures: contextual;}.CodeMirror-wrap pre.CodeMirror-line,.CodeMirror-wrap pre.CodeMirror-line-like {word-wrap: break-word; white-space: pre-wrap; word-break: normal;}.CodeMirror-linebackground {position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 0;}.CodeMirror-linewidget {position: relative; z-index: 2; padding: 0.1px;}.CodeMirror-widget {}.CodeMirror-rtl pre { direction: rtl; }.CodeMirror-code {outline: none;}.CodeMirror-scroll,.CodeMirror-sizer,.CodeMirror-gutter,.CodeMirror-gutters,.CodeMirror-linenumber {-moz-box-sizing: content-box; box-sizing: content-box;}.CodeMirror-measure {position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;}.CodeMirror-cursor {position: absolute; pointer-events: none;}.CodeMirror-measure pre { position: static; }div.CodeMirror-cursors {visibility: hidden; position: relative; z-index: 3;}div.CodeMirror-dragcursors {visibility: visible;}.CodeMirror-focused div.CodeMirror-cursors {visibility: visible;}.CodeMirror-selected { background: #d9d9d9; }.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }.CodeMirror-crosshair { cursor: crosshair; }.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }.cm-searching {background: #ffa; background: rgba(255, 255, 0, .4);}.cm-force-border { padding-right: .1px; }@media print {  .CodeMirror div.CodeMirror-cursors {visibility: hidden;}}.cm-tab-wrap-hack:after { content: ""; }span.CodeMirror-selectedtext { background: none; }.CodeMirror-activeline-background, .CodeMirror-selected {transition: visibility 0ms 100ms;}.CodeMirror-blur .CodeMirror-activeline-background, .CodeMirror-blur .CodeMirror-selected {visibility:hidden;}.CodeMirror-blur .CodeMirror-matchingbracket {color:inherit !important;outline:none !important;text-decoration:none !important;}.CodeMirror-sizer {min-height:auto !important;}</style><style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;position:relative;padding: 20px 16px;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body a {word-wrap: break-word;text-decoration-skip-ink: none;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body li.wiz-list-align-style {list-style-position: inside; margin-left: -1em;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;padding: 2px;vertical-align:bottom;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #a7afbc;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #a7afbc;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-editor-body td > div:first-child {margin-top:0;}.wiz-editor-body td > div:last-child {margin-bottom:0;}.wiz-editor-body img.wiz-svg-image {box-shadow:1px 1px 4px #E8E8E8;}.wiz-editor-body .wiz-image-container {margin:0;max-width: 100%;display: inline-flex;flex-direction: column;}.wiz-editor-body .wiz-image-container .wiz-image-title {display:inline-block;text-align: center;color: #a7afbc;line-height: 18px;font-size: 12px;min-height: 18px;width: 100%;white-space: normal;}.wiz-hide {display:none !important;}.wiz-editor-body.wiz-editor-outline {padding-right:0; padding-left:0;}.wiz-editor-body.wiz-editor-outline .outline-container {margin:0; padding:0; line-height:1.5;}.wiz-editor-body.wiz-editor-outline .outline-container div {margin:0;}.wiz-editor-body.wiz-editor-outline .node {margin:0; padding: 0;}.wiz-editor-body.wiz-editor-outline .outline-container > .node {margin-right:24px; margin-left:30px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .children {display:none;}.wiz-editor-body.wiz-editor-outline .node .row {position:relative; padding-left:26px;}.wiz-editor-body.wiz-editor-outline .node .operator-container {width:36px;position:absolute; top:4px; left:-18px;}.wiz-editor-body.wiz-editor-outline .node .operator-bar {position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center;}.wiz-editor-body.wiz-editor-outline .node .switch {width:18px; height:18px;display:flex;flex-direction: column;align-items: center;overflow: hidden;}.wiz-editor-body.wiz-editor-outline .node .switch i {font-size:20px;position:relative;left:-1px;top:-1px;}.wiz-editor-body.wiz-editor-outline .node .switch.active {cursor:pointer;color:transparent; transition:transform 200ms ease 0s;}.wiz-editor-body.wiz-editor-outline .node.collapsed .switch.active {transform:rotateZ(-90deg);}.wiz-editor-body.wiz-editor-outline .node .row:hover .switch.active {color:#505F79}.wiz-editor-body.wiz-editor-outline .node .dot {display:flex; align-items:center; justify-content:center; border-radius:100%; width:18px; height:18px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .dot {background-color:rgba(80, 95, 121, .15);}.wiz-editor-body.wiz-editor-outline .node .dot-icon {background-color:#505F79; border-radius:100%; width:6px; height:6px;}.wiz-editor-body.wiz-editor-outline .node .child {margin-left:8px; border-left:1px solid #E6E9ED; padding-left:17px;}.wiz-editor-body.wiz-editor-outline .node .content {flex:1;outline:none; padding:4px 0;}.wiz-editor-body.wiz-editor-outline .node div.content {font-size:1rem;}.wiz-editor-body.wiz-editor-outline .node.complete > .row .content {text-decoration:line-through;color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .notes {outline:none; font-size:.8rem; color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .image {outline:none; padding-top:4px; padding-bottom:4px;}.wiz-editor-body.wiz-editor-outline .outline-container h1,.wiz-editor-body.wiz-editor-outline .outline-container h2,.wiz-editor-body.wiz-editor-outline .outline-container h3,.wiz-editor-body.wiz-editor-outline .outline-container h4,.wiz-editor-body.wiz-editor-outline .outline-container h5,.wiz-editor-body.wiz-editor-outline .outline-container h6 {margin:0;}body, .wiz-editor-body {  padding-left: 48px;  padding-right: 48px;}</style></head>

<body onload="parent.window.document.all.dd.height=document.body.scrollHeight" class="wiz-editor-body " data-wiz-document-type="common" spellcheck="false" style="opacity: 1;" ><div><div style="text-align: center;"><br></div><div><span data-wiz-span="data-wiz-span"><br></span></div><h1><span data-wiz-span="data-wiz-span">数据包：</span></h1><hr><br><h2 style="font-size:1.5rem;"><span data-wiz-span="data-wiz-span">一个数据包的整个传输过程：</span></h2><blockquote><div>数据包的传输过程如下图所示，交换机、路由器他们只负责按照 MAC、IP 地址转发数据包，并没有端口的概念，<span>IP 地址、MAC 地址在路由表中对上了就转了，不会管你的目的主机有没有端口收或愿不愿意收，数据收不收那是主机的事情。</span></div><div><span>如果主机收数据，那用什么来收呢？</span></div><div><span>用主机操作系统上的端口。所以需要有人守在端口（监听端口）收数据，否则端口即使开放也收取不了数据。</span></div></blockquote><blockquote><div><blockquote></blockquote></div></blockquote></div><blockquote style="text-align: center;"><blockquote><div><img src="网络技术_基础知识（index）_files/0.6002303434427871.png" width="716" height="263"></div></blockquote></blockquote><blockquote style="text-align: center;"><blockquote><img src="网络技术_基础知识（index）_files/0.910169445865038.png" width="832" height="133"></blockquote></blockquote><div><br></div><div><div><span><b>Ref：</b></span></div><div>&nbsp; &nbsp;<span>&nbsp;</span><a href="https://blog.csdn.net/u011563903/article/details/90116368" style="text-decoration-skip-ink:none;">《csdn - 详解一次完整的数据包传输过程 -- 层层递进》</a></div><div>&nbsp; &nbsp;&nbsp;<a href="https://www.cnblogs.com/kribee/p/14985130.html" style="text-decoration-skip-ink:none;">《cnblogs - 详解一次完整的数据包传输过程》</a></div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1>路由</h1><hr><br><div><h2><span data-wiz-span="data-wiz-span">路由表解读：</span></h2><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b>网关 4 个 0 表示什么？</span></div><div><b style="font-size:1.5rem"><span data-wiz-span="data-wiz-span">A：</span></b><span data-wiz-span="data-wiz-span">4 个 0 表示缺省值，如果网关为 4 个 0 则表示该目的 IP 没有网关，该目的 IP 的数据包直接从网卡接口发出去给交换机。目的 IP 的网关会为 4 个 0 是因为本机和目的主机处在同一局域网（网段），二者是直连的。</span></div><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/e1eb9d06-5c61-46f0-8971-70a8240033b2.png"></div></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1 style="font-size:1.67rem;"><br>协议</h1><hr><br><br><h2 style="font-size:1.5rem;">协议的概念：</h2><div>协议协议，我们经常在说协议，但协议是做什么的协议？是用来通信的，我们说的协议，无论是 ISO 模型哪一层的，都是通信协议。</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><h2><a name="ICMP" style="text-decoration-skip-ink:none;"><b>ICMP</b></a>：</h2><div>Internet Control Message Protocol，3 层网络层的协议，TCP/IP 协议簇的一部分。字面上看，它是从 IP 的中间插入 “CM——Control Message” ，它的性质也正是如此，它虽然和 IP 同属 3 层，但它的位置要高于 IP，因为 ICMP 不可以独立于 IP 存在，它需要封装在 IP 数据报里进行传输。</div><div style="text-align: center;"><div><img src="网络技术_基础知识（index）_files/2b844b7c-d8e4-4f88-b9aa-fb2b6d0cf607.jpg"></div></div><div style="text-align: center;"><div>图 - ICMP 在 ISO 模型中的层级</div></div><div><div><br></div></div></div><div><div><br></div></div><div><b>Ref：</b><span>&nbsp; &nbsp;&nbsp;</span></div><blockquote><a href="https://www.xiebruce.top/1718.html">《个人博客 - macOS使用了代理也无法ping通google的原因及其解决办法》</a></blockquote><blockquote><br></blockquote><div><blockquote><blockquote><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><div><br><br></div></div></blockquote></blockquote><div><h2><a name="SOCKS5">SOCKS5：</a></h2><div>Protocol for sessions traversal across firewall securely，防火墙安全会话转换协议，<span>5 层会话层的协议</span>。SOCKS5 是一个代理协议，它在使用 TCP/IP 协议簇通讯的前端机器和服务器机器之间扮演一个中介（代理）角色，使得内网中的前端机器可以直接通过它访问 Internet 网中的服务器，这不仅可以使通讯更加安全，而能实现科学上网（这个只要是代理就能做到）。</div><div><span>SOCKS5 服务器通过将前端发来的请求转发给真正的目标服务器， 模拟了一个前端的行为。在这里，前端和 SOCKS5 服务器之间也是通过 TCP/IP 协议簇进行通讯，前端将原本要发送给真正服务器的请求以<span>&nbsp;</span></span><span>SOCKS5&nbsp;协议</span><span>发送给 SOCKS5 服务器，然后 SOCKS5 服务器将请求转发给真正的服务器。</span></div><div>SOCKS5 代理与<span>&nbsp;</span><span>HTTP 代理</span>不同，<span>HTTP<span>&nbsp;是一个 7 层应用层的协议，</span></span>HTTP 的代理是通过 HTTP 协议进行的，HTTP 代理服务器要了解通讯包的内部结构，还要在转发过程中对数据包进行某种程度的修改和转换，才能实现代理；<span>SOCKS 是 5 层会话层的协议，位于 6 层表示层 与 4 层传输层之间，它可以为 7 层的任何协议做代理，而不用为要代理的每个协议设计专门的代理程序，因此它的出现缓解了代理中各种具体协议（如 HTTP）需要专门设计对应的代理程序的困难局面。另外，</span><span>SOCKS5&nbsp;</span><span>代理不仅需要服务器支持，还需要前端软件自身也</span><span>支持，即具有 SOCKS5 的接口，而&nbsp; HTTP 代理则只需服务器提供支持。<br></span></div></div></div><blockquote><blockquote><div><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/909544a8-376c-4b95-8bb3-25918f261182.png"></div><div style="text-align: center;">图 - SOCKS5请求格式（以字节为单位）</div><div style="text-align: center;"><br></div><div style="text-align: center;"><div><img src="网络技术_基础知识（index）_files/610eb3a7-a77b-440b-a4c8-7f1ef3a0e4e4.png"></div></div><div style="text-align: center;"><div>图 - 服务器按以下格式回应客户端的请求（以字节为单位）</div></div><div style="text-align: center;"><div><br></div></div></div></div></blockquote></blockquote><div><div><div><div><b>Ref：</b></div></div><blockquote><div><a href="https://baike.baidu.com/item/socks5/8915011?fr=aladdin" style="text-decoration-skip-ink:none;">《百度 - socks5》</a></div><div><a href="https://zh.wikipedia.org/wiki/SOCKS" style="text-decoration-skip-ink:none;">《wikipedia - SOCKS》</a></div><div><a href="https://zhuanlan.zhihu.com/p/393634304" style="text-decoration-skip-ink:none;">《知乎 - 如何正确理解socks5代理》</a></div></blockquote><div><br></div></div><div><br></div><div><br></div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><h2 style="font-size: 1.5rem;"><span data-wiz-span="data-wiz-span">HTTP：</span></h2><div>《<a href="/views/技术总结/前端技术/为知笔记/文件传输_基础知识（index）.html">文件传输_基础知识（index）</a>》之<a href="/views/技术总结/前端技术/为知笔记/网络技术_基础知识（index）.html">《Http》</a></div><div><br></div><div><br></div><div><br></div><div><br></div><div><blockquote><blockquote><div><br><br></div><div><br></div><div><br></div><div><br></div><div><br></div></blockquote></blockquote><h1 style="font-size:1.67rem;">代理</h1><hr><div>代理就是中介，就是中间商。</div><div><br></div><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/63eb0d8c-d96d-4c7d-a794-65b33caacf18.png"></div><div style="text-align: center;">图 - 代理翻墙的原理</div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><h2 style="font-size: 1.5rem;"><b>不同方式代理的概念和区别：</b></h2><div><br></div><div><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;"><b>1. 不同方式代理的概念：</b></span></div><blockquote><div>代理就是流量转发，<span>代理服务器就是流量转发的服务器。</span></div><div><span>本地代理中的路由转发就是利用操作系统的路由表来把流量转发给本地代理软件，这个过程与端口无关，与网卡、路由表有关。</span></div><div><span>本地</span><span>代理中的端口转发就是利用操作系统的端口把流量转发给代理软件，这个过程与端口密切相关，与</span><span>网卡、</span><span>路由表无关。</span></div><div><span>本地代理中的</span>路由转发才是真正的<b>全局代理</b>，类似 VPN，但不等于 VPN，因为 VPN 可以直接转发 Ping 包，而路由代理转发 Ping 包需要代理服务器提供 ICMP 代理的支持。</div></blockquote><div><span><br></span></div><div><span><br></span></div><div><span><br></span></div><div><span><br></span></div><div style="text-align: left;"><b style="font-size:1.333rem">2. 不同方式代理的</b><b></b><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">区别：</span></b></div><blockquote><div><span>本地代理中的路由转发凭借路由表，与端口无关；</span><span>本地代理中的</span><span>端口转发凭借端口，与路由表无关。</span></div></blockquote><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><span><br></span></div><div><span><br></span></div><div><span><br></span></div><div><span><br></span></div><h2 style="font-size:1.5rem;"><span><b>实现代理上网的常用工具：</b></span></h2><div><b><br></b></div><div><b style="font-size: 1.333rem;">1. SSR / V2Ray、SocksCap、SSTap&nbsp;的作用：</b><b><br></b></div><div><b>SSR / V2Ray</b>：提供代理服务，为自身能指定代理的应用程序而生，通过转发特定端口的数据到远程代理服务器，实现应用流量走代理。</div><div><b>SocksCap</b>：为自身不能指定代理的应用程序而生，通过为目标应用建立通向本地代理服务器的隧道，实现应用流量走代理。</div><div><b>SSTap</b>：为自身不能指定代理，又难以或者反对让外部诸如 SocksCap 的程序锁定目标建立隧道的应用而生，通过修改路由表引流到虚拟网卡，再把虚拟网</div><blockquote><blockquote><blockquote><blockquote><blockquote><div><span>卡转发到本地代理服务器，实现</span><span>应用流量走代理。</span></div><div><span>SSTap 全称 SocksTap, 是一款利用虚拟网卡技术在网络层实现的代理工具。</span></div><div><span>SSTap 能在网络层拦截所有连接并转发给 HTTP、SOCKS4/5、Shadowsocks、ShadowsocksR 代理，而无需对被代理的应用程序做任何修改或设置。</span></div><div><span>SSTap 能同时转发TCP、UDP数据包。它非常适合于游戏玩家使用。</span></div></blockquote></blockquote></blockquote></blockquote></blockquote><div><br></div><div><br></div><div><br></div><div style="text-align: left;"><b style="font-size: 1.333rem;">2. SSR / V2Ray、</b><b></b><b style="font-size: 1.333rem;">SocksCap、</b><b style="font-size: 1.333rem;">SSTap</b><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">&nbsp;之间的关系：</span></b></div><div><b>SSR / V2Ray</b> 负责代理，<b>SocksCap </b>负责建立连接&nbsp;<b>SSR / V2Ray</b> 的通信隧道，<b>SSTap&nbsp;</b>负责建立连接&nbsp;<b>SSR / V2Ray</b><b>&nbsp;</b>的路由。</div><div><b>SSR / V2Ray</b> 是代理基础，<b>SocksCap&nbsp;</b>和&nbsp;<b>SSTap&nbsp; </b>是代理问题的解决方案，<b>SSR / V2Ray</b> 必选，<b>SocksCap</b><b>&nbsp;</b>和&nbsp;<b>SSTap&nbsp;</b>二选一即可。<br></div><div><span><b>SocksCap</b><span>&nbsp;是端口转发，原理是钩子。</span></span><span><br></span></div><div><span><b>SSTap</b></span><span>&nbsp;是路由转发，原理是路由表。</span></div><div><b>SSTap</b>&nbsp;其实并不需要配合<span>&nbsp;</span><b>SSR / V2Ray</b><span>&nbsp;&nbsp;</span>使用，因为<span>&nbsp;</span><b><span>SSTap</span><span>&nbsp;</span></b>已经自带了 <b>SS / SSR</b> 的功能。</div><div><br></div><div><br></div><div><div><div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.167rem;">Ref：</span></b></div></div></div><blockquote><div><div><div><a href="https://www.bbaaz.com/thread-35-1-1.html" style="text-decoration-skip-ink:none;">《bbaaz - 全局代理神器 SSTAP (软件/游戏走代理)》</a></div></div></div><div><div><div><a href="https://www.tang-seo.com/2684.html" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">tang-seo - V2RayN+SSTap共享代理实现switch科学上网图文使用教程</span>》</a></div></div></div><div><a href="https://doubibackup.com/apf3f05x.html" style="text-decoration-skip-ink:none;">《doubibackup - ShadowsocksR 转为类VPN的真 · 全局代理神器 (软件/游戏走代理) — SSTAP》</a></div></blockquote></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h2 style="font-size: 1.5rem;"><b>本地代理中的路由转发和端口转发：</b></h2><div><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;"><b><br></b></span></div><div><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;"><b>1. 本地代理中的路由转发：</b></span></div><div>类似 VPN，所有流量通过虚拟网卡转发</div><div><b><br></b></div><div><b>实现这一功能所需的成员：</b></div><blockquote><div><span>本地代理服务器 SSR/V2Ray、路由转发工具&nbsp;</span>SSTap</div><div><br></div></blockquote><div><b>转发逻辑图：</b></div><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/0758b9e5-872a-42aa-bd53-22353657eb5b.png"></div><div style="text-align: center;"><span>图 - 转发逻辑图</span></div><div style="text-align: center;"><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">2. 本地代理中的端口转发：</span></b></span></div><div><span><b><br></b></span></div><div><span><b>实现这一功能所需的成员</b></span></div><blockquote><div><span>SSR/V2Ray、</span><span>SocksCap</span></div></blockquote><div><br></div><div><span><b>转发逻辑图：</b></span></div><blockquote><div><span>使用 SocksCap 建立转发隧道：</span></div></blockquote><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/5d18b355-047a-4b27-ade7-c6cba0073bf3.png"></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 - 转发逻辑图</span></div><div><br></div></div><blockquote><div><span>不使用&nbsp;</span><span>SocksCap 建立转发隧道（Client 自己指定代理）：</span></div></blockquote><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/9f2abf5c-4c3e-44b7-bdd3-ed48d4c60988.png"></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 - 转发逻辑图</span></div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h2>SSTap 、SocksCap 建立代理路由<span>（真全局）</span>或代理隧道：</h2><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;"><br></span></b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">1. SSTap 建立代理路由（真全局）：</span></b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">SSTap<span>&nbsp;只能通过 IP + Port 添加代理服务器。<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">SSTap</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">&nbsp;绑定了一个虚拟网卡，当添加完代理服务器后，会修改路由表引流到虚拟网卡，SSTap 收到虚拟网卡的流量后转发给本地代理服务器，本地代理服务器会通过路由表再发给虚拟网卡，<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">SSTap 通过虚拟网卡收到来自本地代理服务器的流量后直接转发给真实网卡，让真实网卡送到外面去。</span></span></span></span><br></span></div><div><div style="text-align: center;"><b><img src="网络技术_基础知识（index）_files/b6b46721-ca89-4ec3-864f-69e6daffcfdb.jpg"></b></div><div><div><br></div><div><br></div><div><br></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.167rem;">代理模式：</span></b></div></div></div><blockquote></blockquote><div><ul><li><b>全局</b>：顾名思义，整个电脑网络所有流量全部都走代理，在不清楚如何选择的时候，选这个就行。</li><li><b>仅网页浏览器（全局）</b>：仅仅让浏览器走代理，不过浏览器访问的所有网页都会走代理。</li><li><b>仅网页浏览器（跳过中国站点）</b>：仅仅让浏览器走代理，但是浏览器访问海外的网页才会走代理，也就是国内网站直连。</li><li><b>仅代理中国IP</b>：在全局的基础上，仅代理中国IP，也就是只有访问国内IP的网络流量才会走代理，一般都是海外用户想要返回国内用的（如玩国服游戏）。</li><li><b>不代理中国IP</b>：与上面相反，这个是在全局的基础上，代理所有访问海外IP的网络流量，而国内IP的都直连，如果你是专玩外服游戏，那么选这个就行。</li></ul></div><div><div><div><br></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.167rem;">Ref：</span></b></div></div></div><blockquote><div><div><div><a href="https://www.bbaaz.com/thread-35-1-1.html" style="text-decoration-skip-ink:none;">《bbaaz - 全局代理神器 SSTAP (软件/游戏走代理)》</a></div></div></div><div><div><div><a href="https://www.tang-seo.com/2684.html" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">tang-seo - V2RayN+SSTap共享代理实现switch科学上网图文使用教程</span>》</a></div></div></div><div><a href="https://doubibackup.com/apf3f05x.html" style="text-decoration-skip-ink:none;">《doubibackup - ShadowsocksR 转为类VPN的真 · 全局代理神器 (软件/游戏走代理) — SSTAP》</a><br></div></blockquote><div><div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem; font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(51, 51, 51);">2. SocksCap 建立代理隧道：</span></b></div><div><div>在 SocksCap 上添加一个文件或进程，再点击“运行”，即可为一个应用程序建立代理隧道。</div><div>在代理配置中设置代理隧道通往的目的地——代理服务器，这里也只能通过 IP + Port 指定代理服务器。</div><div style="text-align: center;"><b><img src="网络技术_基础知识（index）_files/9f0dea16-ed5c-4c06-bf79-78df4b233db2.png"></b></div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h2 style="font-size:1.5rem;">疑问：</h2><div><br></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：为什么路由转发不会陷入死循环？</b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>因为最后一次代理服务器（1080端口）发过来的数据，SSTap 不会按照路由表转发，而是按照内部逻辑转发给实际网卡，让实际网卡转发出去。</span></div><div><br></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">ping（ICMP）</span>能不能走代理？</b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>这要看代理服务器是否提供了 ICMP 的代理，一般代理服务器只提供了 TCP 或 UDP 的代理，例如 HTTP。</span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">为什么能代理 TCP，却不能代理 ICMP？不能让 TCP 帮忙代理一下 ICMP 吗？或者 Socks5<a href="#SOCKS5" style="text-decoration-skip-ink:none;"><sup>概念</sup></a>？</span></b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>无论是 TCP 还是 Socks5 还是 HTTP，都不行。因为 ICMP 是 TCP 下层协议，而不是 TCP 的</span><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">上层协议，下层协议<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">是无法被上层协议代理的。这是</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">因为</span></span></div></div></div><blockquote><div><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">数据的传输是把上层协议是作为下层协议的数据来传输的，如下图，4 层的 TCP 和 UDP 是作为 3 层的&nbsp; IP 的数据部分来传输的，IP 数据段本身是不知道上层的数据是什么的。</span>因此要代理 ICMP，要么让代理服务器提供 ICMP 的专属代理支持，要么就让服务器提供 VPN 服务器，把本地主机和服务器连接到同一局域网，享用服务器的网络。</span></div></div></div><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">即使使用 SOCKS5 代理，也只能代理 TCP、UDP 及以上层级的协议，而 ping 使用的是下层的 ICMP 协议，自然是无法走代理了。至于 ping 包最终何去何从并不重要，重要的是它上不了代理这条船。</span></div></div></blockquote><div><div><div style="text-align: center;"><img src="网络技术_基础知识（index）_files/0.4135346560680617.png" width="699" height="130"></div><div style="text-align: center;">图 - IP 数据段</div><div><b>Ref：</b></div></div><blockquote><div><div><a href="https://www.xiebruce.top/1718.html" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">个人博客 - macOS使用了代理也无法ping通google的原因及其解决办法</span>》</a></div></div></blockquote><div><div><br></div></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：ping（ICMP）、TCP 、IP 和端口的关系？</b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">ping（ICMP）不用端口，IP 也不用端口，它们都是 3 层网络层的，但 TCP 必须用端口，因为它是 4 层传输层的，端口也是 4 层传输层才开始有的概</span></span></div></div><blockquote><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif">念。</span></div></div></blockquote><div><div><br></div><div><br></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：HTTP、Socks5 代理服务器是否会或能转发&nbsp;<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">ping（ICMP）包</span>？</b></span></div><div><font color="#333333" face="Open Sans, Clear Sans, Helvetica Neue, Helvetica, Arial, sans-serif"><b>A：</b>不会，即使它们愿意也做不到。</font></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q： CMD 走代理的原理、方法和问题？</b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>CMD 自身是不需要设置代理的，<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">CMD<span>&nbsp;</span></span>内置的命令似乎都没有联网的，而且所有<span>&nbsp;</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">CMD<span>&nbsp;</span></span>类型的工具（如 GitBash、Cmder、PowerShell）都不支持从自</span></div></div><blockquote><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">身设置代理。</span></div></div><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">至于&nbsp;</span><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">ping、nslookup、curl 之类的命令，它们本质都是 exe 文件，</span><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">而这些 exe 走不走代理由它自己决定，与 CMD 无瓜。</span></div></div><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">CMD 只是为应用程序或批处理文件提供一个</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">使用环境，并不能控制应用程序的流量出口，</span>CMD&nbsp;<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">只能为执行的程序提供一个走代理的选择，</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">程序选不选完全取决于它自己，一般 CMD 提供代理选择的方式是给<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">程序指定的代理变量设置代理服务器地址。如果程序不是使用代理变量（自有变量或环境变量，例如<span>&nbsp;</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">Git 的 http.proxy，环境变量 HTTP_PROXY</span>），那就是使用的系统代理（IE 代理）</span>。如果程序</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">完全就没有代理这个设计那就只能直连了</span>。</span></div></div><div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">如果要整个 cmd 环境走代理（例如 ping），用 OpenVPN、SSTa</span><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">p 之类的全局转发工具（<span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">SSTap&nbsp;</span><span style="font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">利用的是 OpenVPN 提供的虚拟网络适配器）</span>，把代理做成</span><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">虚拟网卡级别的全局代理，即</span><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">用虚拟网卡转发所有流量实现真正全局代理。</span></div></div></blockquote><div><div><br></div></div><blockquote><div><div><b>Ref：</b></div></div><div><blockquote><div><a href="https://github.com/shadowsocks/shadowsocks-windows/issues/1489" style="text-decoration-skip-ink:none;">《github - shadowsocks-windows - windows终端命令行下如何使用代理？ #1489》</a></div></blockquote></div><div><blockquote><div><a href="https://gist.github.com/dreamlu/cf7cbc0b8329ac145fa44342d6a1c01d" style="text-decoration-skip-ink:none;">《github - windows终端翻墙，简易方式》</a></div></blockquote></div></blockquote><div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：TCP、ping（ICMP） 与代理：</b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>代理服务器一般做的是 HTTP 或 Socks5 的代理，这些都比 ICMP 层级高，无法为低于自己层级的协议做代理。</span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：Telnet 能被 HTTP、Socks5 代理吗？</b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>可以，Telnet 与 HTTP 同一层级，并且高于 Socks5 的层级，是可以被代理的。</span></div><div><div style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><div><br></div><div><br></div><div><br></div></div><div style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>Q：为什么代理服务器不支持代理ping（ICMP），但是VPN 却可以？</b></div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><b>A：</b>因为 VPN 转发流量时无关协议，它负责的是网卡级别（网络层）的流量转发。</span></div><div><br></div><div><br></div><div><br></div><div><b>Q：为什么使用 SSR / V2Ray 后，浏览器可以访问 Google，但无法 ping 通 Google，哪怕是设置<span>路由进行全局代理？</span></b></div><div><b>A：</b>这是因为 ping 走的是 ICMP 协议，没有哪个代理软件会去支持 ICMP 的代理，因为 ICMP 的代理并没有任何实际意义。并且 Socks5、HTTP 代理是无</div></div><blockquote><div><div>法代理 ICMP 的。既然设置的是 HTTP代理，那么是走 TCP 的，我 ping 都不走 TCP，还会走你的 HTTP 代理吗？再说了，我 ping 就算被虚拟网卡转发给你的代理服务器，它难道还能把 ICMP 强塞进 TCP 里去转发吗？</div></div><div><div><span>换个角度考虑，为什么我们要用代理服务器上网？那是因为如果不用代理服务器，我们访问的 website 被 blocked，最简单的方式就是在一个大型防火墙上执行： deny website IP。而使用代理服务器，无非是用代理服务器的 IP 作为目的 IP（把用户的HTTP、HTTPS封装在TCP上），这样途径防火墙时，由于目的 IP 不在 blocked IP 之列，所以被放行，这样我们就可以浏览一些被 blocked 的网页。但是一般情况下，代理服务器并不为 UDP/ICMP 服务，而只为TCP 服务，所以你 ping website 时，代理服务器要么没有介入，要么无法介入（Socks5、HTTP 代理不了&nbsp;</span><span>ICMP 报文</span><span>），这就意味着你的 ping 包要么走直连路线，要么无法处理而被丢弃（这一点可以在路由代理时 ping 国内的 IP 验证）。如果是前者，那么目的 IP 就是被 blocked IP 地址，很显然无法正常通过，全被丢了。如果是后者，那么在去代理服务器的路上就挂了。</span></div></div><div><div><span>所以说 ping（ICMP）上不了代理这条船。</span></div></div><div><div><span>要解决这个问题，我们需要的是 vpn，将所有的流量通过虚拟网卡转发给 vpn 服务器，vpn 服务器再转发给被 blocked 的目的主机 。因为在 vpn 这个局域网里，目的主机不是 blocked 的。实现 vpn 的工具有&nbsp;</span><span>openvpn，它支持任何协议数据的转发。</span></div></div></blockquote><div><div style="text-align: center;"><span><img src="网络技术_基础知识（index）_files/0.5266895641502248.png" alt="preview"><br></span></div><div style="text-align: center;"><span>图 - OSI 网络模型中的 TCP/IP 协议簇</span></div><div style="text-align: center;"><span><br></span></div></div><blockquote><div><div><b>Ref：</b></div></div></blockquote><blockquote><blockquote><div><div><a href="https://github.com/zfl9/ss-tproxy" style="text-decoration-skip-ink:none;">《Github - ss-tproxy - Linux 透明代理》</a></div></div></blockquote><blockquote><div><div><a href="https://www.zhihu.com/question/20053991" style="text-decoration-skip-ink:none;">《在内网通过代理服务器上网，但是在Terminal ping不通。请问为什么？》</a></div></div></blockquote><blockquote><div><div><br></div></div></blockquote></blockquote><div><div><br></div><div><br></div><div><br></div><div><br></div><blockquote><div><br><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div></blockquote></div><div><br></div><div><br></div><div><br></div><div><br></div><div><h1>调试</h1><hr><br><br><h2>测试网络连通性</h2><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:1.5rem" data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;"><br></span></b></span></div><div><span style="color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:1.5rem" data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">tcping 与 ping</span></b></span></div><div><br></div><div><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">作用：</span></b></div><blockquote><div><b>tcping：</b><span>测试与目的主机之间的端口的网络连通性。</span></div><div><b>ping：</b>测试与目的主机之间的网络连通性。</div><div><br></div></blockquote><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">区别：</span></b></div><blockquote><div>tcping 用的协议是 4 层传输层的 TCP，ping 用的协议是 3 层网络层的 ICMP<sup><a href="#ICMP">概念</a></sup>。</div><div><span>tcping<span>&nbsp;用 TCP 数据包检测连通性，必须用端口，并且端口必须有人在监听；</span></span>ping 使用 ICMP <span>数据包检测连通性，与端口八杆子打不着</span>。</div><div><span>tcping 是第三方工具，</span><span>ping 是系统自带的工具。</span></div><div><span>即使服务器禁止 ping 也只是禁止了 ICMP 协议，而 TCP 协议是永远不会禁的，</span><span>否则服务器就“闭关锁国”了。因此任何情况下都可以用&nbsp;</span><span>tcping 检测服务器连通性。</span></div></blockquote><blockquote><div><span><blockquote><div><br></div></blockquote></span></div></blockquote><div><span><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">用法：</span></b></div></span></div></div><div data-mode="Shell" data-theme="default" id="wiz_cm_1638555615635_6224" class="wiz-code-container" ><textarea style="display:none;"># tcping
# 最常用的用法
tcping -t 8.8.8.8 8080
tcping -t www.google.com.hk 8080</textarea><wiz_code_mirror><div class="CodeMirror cm-s-default" data-id="wiz_cm_1638555615635_6224"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 104px; min-width: 253px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment"># tcping</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment"># 最常用的用法</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">tcping <span class="cm-attribute">-t</span> <span class="cm-number">8</span>.8.8.8 <span class="cm-number">8080</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">tcping <span class="cm-attribute">-t</span> www.google.com.hk <span class="cm-number">8080</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 104px;"></div><div class="CodeMirror-gutters" style="height: 134px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><div><span><blockquote><div><span><blockquote></blockquote><br></span></div><div><span><br></span></div></blockquote><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">tcping 是否为测试连通性的上策：</span></b></span></div><blockquote><div><span>在不能 ping 的时候，tcping 测试连通性确实乃上策。为什么这么说呢？因为首先 ping 不用另外安装，可直接使用，它比用 telnet 测试要方便快捷，它能像 ping 一样不断地发送数据包检查连通性，并且可读性</span><span>比 telnet<span>&nbsp;</span></span><span>强很多。</span></div><div><br></div><div><br></div></blockquote><blockquote><div><br></div></blockquote><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">Ref：</span></b></div><blockquote><div>有道笔记<u>《【整理】Linux 知识、问题》</u>之</div></blockquote></span></div></div><blockquote><div><div><span><blockquote><div><u>《Linux 知识（008）：<span>Linux 中临时监听某个端口，测试端口是否被限制访问》</span></u></div></blockquote></span></div></div></blockquote><blockquote><div><span><a href="https://blog.csdn.net/qq_41672638/article/details/116480572" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">csdn -&nbsp;</span>tcping与ping的区别》</a></span></div><blockquote><div><br></div></blockquote></blockquote><div><br></div><div><br></div><div><br></div><blockquote></blockquote><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem; font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(51, 51, 51);">为 tcping 开启（监听）端口</span></b></div><div><span>使用 tcping 这类需要用端口来测试网络连通性需要目的主机端口有人监听，但是当还没有实际的服务在监听的时候，怎么办呢？这时候我们就需要用工具临时监听一下。</span><br></div><div><br></div><div><ul><li><b>使用系统自带工具：</b></li></ul></div><blockquote><blockquote><blockquote><div><b>Windows</b>：</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><div>IIS 服务（反对，太麻烦）</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div>WinRM 服务（反对，太麻烦）</div></blockquote></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div><b>Linux</b>：</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><div><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">nc（推荐，简单）</span>：<span data-wiz-span="data-wiz-span" style="background-color: rgb(127, 127, 127); color: rgb(255, 255, 255);">nc -l 0.0.0.0 &lt;端口号&gt;</span></div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div>tcpdump</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div>httpd（反对，太麻烦）</div></blockquote></blockquote></blockquote><div>&nbsp;</div></blockquote><div><ul><li><b>使用第三方工具：&nbsp;</b>&nbsp;</li></ul></div><blockquote><blockquote><blockquote><div><b>Windows</b>：</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">SocketTool（推荐，简单）<span style="color: rgb(0, 0, 0);">：</span></span><span data-wiz-span="data-wiz-span">图形界面，开箱即用，傻瓜式操作</span></div></blockquote></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div><b>全平台</b>：</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><div>Python（反对，太麻烦）</div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div>Node.js（反对，太麻烦）</div></blockquote></blockquote></blockquote></blockquote><div><span><blockquote><div><br></div></blockquote></span></div><div><br></div>

  <script type="text/javascript">
    /**
    * 让 iframe 中的 <a> 打开新页面
    */
    let aDoms = document.getElementsByTagName("a")
    for ( let aDom of aDoms ) {
      let oldHref = aDom.href;
      let newHref = "javascript:window.open('" + oldHref + "')";
      // console.info("aDom", aDom);
      aDom.href = newHref;
    }
  </script>

</body></html>