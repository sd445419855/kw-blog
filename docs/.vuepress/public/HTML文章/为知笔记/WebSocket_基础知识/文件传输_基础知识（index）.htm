<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">




<title>文件传输_基础知识（index）</title>
    
<style id="wiz_code_style">.wiz-editor-body .wiz-code-container{position: relative; padding:8px 0; margin: 5px 0;text-indent:0; text-align:left;}.CodeMirror {font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; color: black; font-size: 10.5pt; font-size: 0.875rem}.wiz-editor-body .wiz-code-container .CodeMirror div {margin-top: 0; margin-bottom: 0;}.CodeMirror-lines {padding: 4px 0;}.CodeMirror pre.CodeMirror-line,.CodeMirror pre.CodeMirror-line-like {padding: 0 4px;}.CodeMirror pre.CodeMirror-line {min-height: 24px;}.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {background-color: white;}.CodeMirror-gutters {border-right: 1px solid #ddd; background-color: #f7f7f7; white-space: nowrap;}.CodeMirror-linenumbers {}.CodeMirror-linenumber {padding: 0 3px 0 5px; min-width: 20px; text-align: right; color: #999; white-space: nowrap;}.CodeMirror-guttermarker {color: black;}.CodeMirror-guttermarker-subtle {color: #999;}.CodeMirror-cursor {border-left: 1px solid black; border-right: none; width: 0;}.CodeMirror div.CodeMirror-secondarycursor {border-left: 1px solid silver;}.cm-fat-cursor .CodeMirror-cursor {width: auto; border: 0 !important; background: #7e7;}.cm-fat-cursor div.CodeMirror-cursors {z-index: 1;}.cm-fat-cursor-mark {background-color: rgba(20, 255, 20, 0.5);-webkit-animation: blink 1.06s steps(1) infinite;-moz-animation: blink 1.06s steps(1) infinite;animation: blink 1.06s steps(1) infinite;}.cm-animate-fat-cursor {width: auto; border: 0; -webkit-animation: blink 1.06s steps(1) infinite; -moz-animation: blink 1.06s steps(1) infinite; animation: blink 1.06s steps(1) infinite; background-color: #7e7;}@-moz-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@-webkit-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}.CodeMirror-overwrite .CodeMirror-cursor {}.cm-tab { display: inline-block; text-decoration: inherit; }.CodeMirror-rulers {position: absolute; left: 0; right: 0; top: -50px; bottom: -20px; overflow: hidden;}.CodeMirror-ruler {border-left: 1px solid #ccc; top: 0; bottom: 0; position: absolute;}.cm-s-default .cm-header {color: blue;}.cm-s-default .cm-quote {color: #090;}.cm-negative {color: #d44;}.cm-positive {color: #292;}.cm-header, .cm-strong {font-weight: bold;}.cm-em {font-style: italic;}.cm-link {text-decoration: underline;}.cm-strikethrough {text-decoration: line-through;}.cm-s-default .cm-keyword {color: #708;}.cm-s-default .cm-atom {color: #219;}.cm-s-default .cm-number {color: #164;}.cm-s-default .cm-def {color: #00f;}.cm-s-default .cm-variable,.cm-s-default .cm-punctuation,.cm-s-default .cm-property,.cm-s-default .cm-operator {}.cm-s-default .cm-variable-2 {color: #05a;}.cm-s-default .cm-variable-3 {color: #085;}.cm-s-default .cm-comment {color: #a50;}.cm-s-default .cm-string {color: #a11;}.cm-s-default .cm-string-2 {color: #f50;}.cm-s-default .cm-meta {color: #555;}.cm-s-default .cm-qualifier {color: #555;}.cm-s-default .cm-builtin {color: #30a;}.cm-s-default .cm-bracket {color: #997;}.cm-s-default .cm-tag {color: #170;}.cm-s-default .cm-attribute {color: #00c;}.cm-s-default .cm-hr {color: #999;}.cm-s-default .cm-link {color: #00c;}.cm-s-default .cm-error {color: #f00;}.cm-invalidchar {color: #f00;}.CodeMirror-composing { border-bottom: 2px solid; }div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }.CodeMirror-activeline-background {background: #e8f2ff;}.CodeMirror {position: relative; background: #f5f5f5;}.CodeMirror-scroll {overflow: hidden !important; margin-bottom: 0; margin-right: -30px; padding: 16px 30px 16px 0; outline: none; position: relative;}.CodeMirror-sizer {position: relative; border-right: 30px solid transparent;}.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {position: absolute; z-index: 6; display: none;}.CodeMirror-vscrollbar {right: 0; top: 0; overflow-x: hidden; overflow-y: scroll;}.CodeMirror-hscrollbar {bottom: 0; left: 0 !important; overflow-y: hidden; overflow-x: scroll;pointer-events: auto !important;outline: none;}.CodeMirror-scrollbar-filler {right: 0; bottom: 0;}.CodeMirror-gutter-filler {left: 0; bottom: 0;}.CodeMirror-gutters {position: absolute; left: 0; top: 0; min-height: 100%; z-index: 3;}.CodeMirror-gutter {white-space: normal; height: 100%; display: inline-block; vertical-align: top; margin-bottom: -30px;}.CodeMirror-gutter-wrapper {position: absolute; z-index: 4; background: none !important; border: none !important;}.CodeMirror-gutter-background {position: absolute; top: 0; bottom: 0; z-index: 4;}.CodeMirror-gutter-elt {position: absolute; cursor: default; z-index: 4;}.CodeMirror-gutter-wrapper ::selection { background-color: transparent }.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }.CodeMirror-lines {cursor: text; min-height: 1px;}.CodeMirror pre.CodeMirror-line,.CodeMirror pre.CodeMirror-line-like {-moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0; border-width: 0; background: transparent; font-family: inherit; font-size: inherit; margin: 0; white-space: pre; word-wrap: normal; line-height: inherit; color: inherit; z-index: 2; position: relative; overflow: visible; -webkit-tap-highlight-color: transparent; -webkit-font-variant-ligatures: contextual; font-variant-ligatures: contextual;}.CodeMirror-wrap pre.CodeMirror-line,.CodeMirror-wrap pre.CodeMirror-line-like {word-wrap: break-word; white-space: pre-wrap; word-break: normal;}.CodeMirror-linebackground {position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 0;}.CodeMirror-linewidget {position: relative; z-index: 2; padding: 0.1px;}.CodeMirror-widget {}.CodeMirror-rtl pre { direction: rtl; }.CodeMirror-code {outline: none;}.CodeMirror-scroll,.CodeMirror-sizer,.CodeMirror-gutter,.CodeMirror-gutters,.CodeMirror-linenumber {-moz-box-sizing: content-box; box-sizing: content-box;}.CodeMirror-measure {position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;}.CodeMirror-cursor {position: absolute; pointer-events: none;}.CodeMirror-measure pre { position: static; }div.CodeMirror-cursors {visibility: hidden; position: relative; z-index: 3;}div.CodeMirror-dragcursors {visibility: visible;}.CodeMirror-focused div.CodeMirror-cursors {visibility: visible;}.CodeMirror-selected { background: #d9d9d9; }.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }.CodeMirror-crosshair { cursor: crosshair; }.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }.cm-searching {background: #ffa; background: rgba(255, 255, 0, .4);}.cm-force-border { padding-right: .1px; }@media print {  .CodeMirror div.CodeMirror-cursors {visibility: hidden;}}.cm-tab-wrap-hack:after { content: ""; }span.CodeMirror-selectedtext { background: none; }.CodeMirror-activeline-background, .CodeMirror-selected {transition: visibility 0ms 100ms;}.CodeMirror-blur .CodeMirror-activeline-background, .CodeMirror-blur .CodeMirror-selected {visibility:hidden;}.CodeMirror-blur .CodeMirror-matchingbracket {color:inherit !important;outline:none !important;text-decoration:none !important;}.CodeMirror-sizer {min-height:auto !important;}</style><style name="wiz_code_style" id="wiz_code_style-eclipse">.cm-s-eclipse span.cm-meta { color: #FF1717; }.cm-s-eclipse span.cm-keyword { line-height: 1em; font-weight: bold; color: #7F0055; }.cm-s-eclipse span.cm-atom { color: #219; }.cm-s-eclipse span.cm-number { color: #164; }.cm-s-eclipse span.cm-def { color: #00f; }.cm-s-eclipse span.cm-variable { color: black; }.cm-s-eclipse span.cm-variable-2 { color: #0000C0; }.cm-s-eclipse span.cm-variable-3 { color: #0000C0; }.cm-s-eclipse span.cm-property { color: black; }.cm-s-eclipse span.cm-operator { color: black; }.cm-s-eclipse span.cm-comment { color: #3F7F5F; }.cm-s-eclipse span.cm-string { color: #2A00FF; }.cm-s-eclipse span.cm-string-2 { color: #f50; }.cm-s-eclipse span.cm-qualifier { color: #555; }.cm-s-eclipse span.cm-builtin { color: #30a; }.cm-s-eclipse span.cm-bracket { color: #cc7; }.cm-s-eclipse span.cm-tag { color: #170; }.cm-s-eclipse span.cm-attribute { color: #00c; }.cm-s-eclipse span.cm-link { color: #219; }.cm-s-eclipse span.cm-error { color: #f00; }.cm-s-eclipse .CodeMirror-activeline-background { background: #e8f2ff; }.cm-s-eclipse .CodeMirror-matchingbracket { outline:1px solid grey; color:black !important; }</style>

<style name="wiz_code_style" id="wiz_code_style-material">.cm-s-material.CodeMirror {background-color: #263238; color: rgba(233, 237, 237, 1);}.cm-s-material .CodeMirror-gutters {background: #263238; color: rgb(83,127,126); border: none;}.cm-s-material .CodeMirror-guttermarker, .cm-s-material .CodeMirror-guttermarker-subtle, .cm-s-material .CodeMirror-linenumber { color: rgb(83,127,126); }.cm-s-material .CodeMirror-cursor { border-left: 1px solid #f8f8f0; }.cm-s-material div.CodeMirror-selected { background: rgba(255, 255, 255, 0.15); }.cm-s-material.CodeMirror-focused div.CodeMirror-selected { background: rgba(255, 255, 255, 0.10); }.cm-s-material .CodeMirror-line::selection, .cm-s-material .CodeMirror-line > span::selection, .cm-s-material .CodeMirror-line > span > span::selection { background: rgba(255, 255, 255, 0.10); }.cm-s-material .CodeMirror-line::-moz-selection, .cm-s-material .CodeMirror-line > span::-moz-selection, .cm-s-material .CodeMirror-line > span > span::-moz-selection { background: rgba(255, 255, 255, 0.10); }.cm-s-material .CodeMirror-activeline-background { background: rgba(0, 0, 0, 0); }.cm-s-material .cm-keyword { color: rgba(199, 146, 234, 1); }.cm-s-material .cm-operator { color: rgba(233, 237, 237, 1); }.cm-s-material .cm-variable-2 { color: #80CBC4; }.cm-s-material .cm-variable-3 { color: #82B1FF; }.cm-s-material .cm-builtin { color: #DECB6B; }.cm-s-material .cm-atom { color: #F77669; }.cm-s-material .cm-number { color: #F77669; }.cm-s-material .cm-def { color: rgba(233, 237, 237, 1); }.cm-s-material .cm-string { color: #C3E88D; }.cm-s-material .cm-string-2 { color: #80CBC4; }.cm-s-material .cm-comment { color: #546E7A; }.cm-s-material .cm-variable { color: #82B1FF; }.cm-s-material .cm-tag { color: #80CBC4; }.cm-s-material .cm-meta { color: #80CBC4; }.cm-s-material .cm-attribute { color: #FFCB6B; }.cm-s-material .cm-property { color: #80CBAE; }.cm-s-material .cm-qualifier { color: #DECB6B; }.cm-s-material .cm-variable-3 { color: #DECB6B; }.cm-s-material .cm-tag { color: rgba(255, 83, 112, 1); }.cm-s-material .cm-error {color: rgba(255, 255, 255, 1.0); background-color: #EC5F67;}.cm-s-material .CodeMirror-matchingbracket {text-decoration: underline; color: white !important;}</style><style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;position:relative;padding: 20px 16px;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body a {word-wrap: break-word;text-decoration-skip-ink: none;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body li.wiz-list-align-style {list-style-position: inside; margin-left: -1em;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;padding: 2px;vertical-align:bottom;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #a7afbc;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #a7afbc;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-editor-body td > div:first-child {margin-top:0;}.wiz-editor-body td > div:last-child {margin-bottom:0;}.wiz-editor-body img.wiz-svg-image {box-shadow:1px 1px 4px #E8E8E8;}.wiz-editor-body .wiz-image-container {margin:0;max-width: 100%;display: inline-flex;flex-direction: column;}.wiz-editor-body .wiz-image-container .wiz-image-title {display:inline-block;text-align: center;color: #a7afbc;line-height: 18px;font-size: 12px;min-height: 18px;width: 100%;white-space: normal;}.wiz-hide {display:none !important;}.wiz-editor-body.wiz-editor-outline {padding-right:0; padding-left:0;}.wiz-editor-body.wiz-editor-outline .outline-container {margin:0; padding:0; line-height:1.5;}.wiz-editor-body.wiz-editor-outline .outline-container div {margin:0;}.wiz-editor-body.wiz-editor-outline .node {margin:0; padding: 0;}.wiz-editor-body.wiz-editor-outline .outline-container > .node {margin-right:24px; margin-left:30px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .children {display:none;}.wiz-editor-body.wiz-editor-outline .node .row {position:relative; padding-left:26px;}.wiz-editor-body.wiz-editor-outline .node .operator-container {width:36px;position:absolute; top:4px; left:-18px;}.wiz-editor-body.wiz-editor-outline .node .operator-bar {position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center;}.wiz-editor-body.wiz-editor-outline .node .switch {width:18px; height:18px;display:flex;flex-direction: column;align-items: center;overflow: hidden;}.wiz-editor-body.wiz-editor-outline .node .switch i {font-size:20px;position:relative;left:-1px;top:-1px;}.wiz-editor-body.wiz-editor-outline .node .switch.active {cursor:pointer;color:transparent; transition:transform 200ms ease 0s;}.wiz-editor-body.wiz-editor-outline .node.collapsed .switch.active {transform:rotateZ(-90deg);}.wiz-editor-body.wiz-editor-outline .node .row:hover .switch.active {color:#505F79}.wiz-editor-body.wiz-editor-outline .node .dot {display:flex; align-items:center; justify-content:center; border-radius:100%; width:18px; height:18px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .dot {background-color:rgba(80, 95, 121, .15);}.wiz-editor-body.wiz-editor-outline .node .dot-icon {background-color:#505F79; border-radius:100%; width:6px; height:6px;}.wiz-editor-body.wiz-editor-outline .node .child {margin-left:8px; border-left:1px solid #E6E9ED; padding-left:17px;}.wiz-editor-body.wiz-editor-outline .node .content {flex:1;outline:none; padding:4px 0;}.wiz-editor-body.wiz-editor-outline .node div.content {font-size:1rem;}.wiz-editor-body.wiz-editor-outline .node.complete > .row .content {text-decoration:line-through;color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .notes {outline:none; font-size:.8rem; color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .image {outline:none; padding-top:4px; padding-bottom:4px;}.wiz-editor-body.wiz-editor-outline .outline-container h1,.wiz-editor-body.wiz-editor-outline .outline-container h2,.wiz-editor-body.wiz-editor-outline .outline-container h3,.wiz-editor-body.wiz-editor-outline .outline-container h4,.wiz-editor-body.wiz-editor-outline .outline-container h5,.wiz-editor-body.wiz-editor-outline .outline-container h6 {margin:0;}body, .wiz-editor-body {  padding-left: 48px;  padding-right: 48px;}</style></head>

<body onload="parent.window.document.all.dd.height=document.body.scrollHeight" class="wiz-editor-body " data-wiz-document-type="common" spellcheck="false" style="opacity: 1;" ><span>&nbsp;</span><div style="text-align: center;"><br></div><div style="text-align: left;"><br></div><h1>概述&nbsp; &nbsp;&nbsp;</h1><div><br></div><div><br></div><div><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;"><b>文件传输过程概述：</b></span></div><div><span>详见当前笔记<u>《<span>XHR 上传文件的方式</span>》</u></span></div><div><div style="text-align: center;"><div><div><img src="文件传输_基础知识（index）_files/0.022151138769969863.png" alt="è¿éåå¾çæè¿°"></div><div><span>图 2&nbsp; -&nbsp;<span>&nbsp;数据上传的页面 Demo</span></span></div></div><div><span><br></span></div><div><img src="文件传输_基础知识（index）_files/c034b53f-0b2d-4d96-bf04-06db9a424e4d.png" width="791" height="323"></div></div><div style="text-align: center;"><span>图 2&nbsp; -&nbsp;<span>&nbsp;</span></span><span>直传</span><span>无编码</span></div></div><div style="text-align: center;"><br></div><div style="text-align: center;"><br></div><div><span><br></span></div><div><span><br></span></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">注意点：&nbsp;</span></b></div><div>jQuery、XHR、Http 的版本是否只直传支持文本而不支持直传二进制，即文件二进制直传兼容性问题。</div><div>FormData、FileReader 兼容性。</div><div><br></div><div><br></div><div style="text-align: left;"><span style="font-size:1.5rem"><b><span data-wiz-span="data-wiz-span">涉及技术：&nbsp;</span></b></span></div><blockquote></blockquote><div><b>● 前端：</b></div><blockquote><div>&lt;form&gt;、&lt;input&gt;</div></blockquote><blockquote><div>FormData、FileReader、File</div></blockquote><blockquote><div>Blob、ArrayBuffer、<span>TypedArray、</span>Uint8Array、<span>DataView、</span>Buffer (Node.js)、</div></blockquote><blockquote><div>XMLHttpRequest、Ajax、Http</div></blockquote><blockquote><div>MIME Type、Http Header Content-Type、xhr.overrideMimeType()、<span>xhr.</span><span>responseType、xhr.response</span></div></blockquote><blockquote><div>位运算把字符（char）还原成二进制（byte）、Base64</div></blockquote><blockquote><div>Http2、WebSocket</div></blockquote><blockquote><div><span>TCP、IP、TCP/IP、端口、包、帧、报文</span></div><div><span>浏览器请求一个 URL 时都做了些什么</span></div></blockquote><blockquote></blockquote><div><br></div><div><b>● 后端：</b></div><blockquote><div>HttpServletRequest、<span>ServletRequest、</span>Servlet(Java)</div></blockquote><blockquote><div><span>Spring API（MultipartHttpServletRequest、</span><span>CommonsMultipartFile</span><span>）、第三方上传插件（Apache common-fileupload）</span></div></blockquote><blockquote><div><span>Javax</span></div></blockquote><blockquote><div><span>MIME Type、Http Header Content-Type、代理服务器</span></div></blockquote><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1><span>前端</span>文件上传与文件下载</h1><h2><span><br></span></h2><h2><span>前端</span>文件上传</h2><div><br></div><h3>1、单文件上传</h3><div><br></div><div><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">方法1</span>：</b>纯 HTML——<span data-wiz-span="data-wiz-span" style="background-color: rgb(102, 102, 102); color: rgb(255, 255, 255);">&lt;form&gt;</span><span data-wiz-span="data-wiz-span">&nbsp;(</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">通用老方法</span><span data-wiz-span="data-wiz-span">)：</span></div><div><span data-wiz-span="data-wiz-span">传输载体：</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">&lt;form&gt;</span><span data-wiz-span="data-wiz-span"><span>&nbsp;</span>+&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XHR（http）<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">1.0</span> / <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">2.0</span></span><br></span></div><div><span data-wiz-span="data-wiz-span" style="background-color: rgb(102, 102, 102); color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">实现概述：</span><br></span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637069855303_1049" class="wiz-code-container"><textarea style="display:none;">// 选择文件
&lt;input type='file'/&gt; 
// 指定提交目的地（接口URL）和数据编码方式。编码方式必须为 multipart/formdata。
&lt;form action="xx.jsp" enctype="multipart/formdata"/&gt;  
// 提交数据，此时开始读取文件为二进制数据，并把数据提交给 jsp 页面或一个接口，jsp 页面或接口那边再去收取。
&lt;input type="submit"/&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637069855303_1049"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 787px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 152px; min-width: 757.375px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>6</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 选择文件</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'file'</span><span class="cm-tag cm-bracket">/&gt;</span> </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 指定提交目的地（接口URL）和数据编码方式。编码方式必须为 multipart/formdata。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">action</span>=<span class="cm-string">"xx.jsp"</span> <span class="cm-attribute">enctype</span>=<span class="cm-string">"multipart/formdata"</span><span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 提交数据，此时开始读取文件为二进制数据，并把数据提交给 jsp 页面或一个接口，jsp 页面或接口那边再去收取。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 152px;"></div><div class="CodeMirror-gutters" style="height: 182px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><br></div><div><br></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;"><b>方法2：</b>Ajax<span style="font-size: 1rem;">——</span></span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">FormData</span><span data-wiz-span="data-wiz-span"> (JS WebAPI，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTML5</span>)</span>：</div><div style="text-align: left;"><span>传输载体：</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">FormData</span><span data-wiz-span="data-wiz-span">&nbsp;</span><span>+&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XHR（http）</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32);background-color:rgb(102, 102, 102)">2.0</span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);"><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">实现概述：</span><br></span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637069989816_4441" class="wiz-code-container"><textarea style="display:none;">// 选择文件。设 input DOM 元素对象为 inputDOM，类型为 [file1, file2, ...]
&lt;input type='file'/&gt; 
// FormData 对象模拟 &lt;form&gt; 元素添加表单数据，此时将文件添加进来
formData.append('file', inputDOM[0]);	// 单文件
formData.append('files', inputDOM);		// 多文件
// ajax 发送 FormData 对象到服务器接口，此时开始读取文件为二进制数据。当然也可以发送给一个 jsp、php 的页面接收，如 xhr.open('post', './saveFiles.php');
xhr.send(formData);</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637069989816_4441"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 1138px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 176px; min-width: 1107.94px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>7</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 选择文件。设 input DOM 元素对象为 inputDOM，类型为 [file1, file2, ...]</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'file'</span><span class="cm-tag cm-bracket">/&gt;</span> </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// FormData 对象模拟 &lt;form&gt; 元素添加表单数据，此时将文件添加进来</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">formData</span>.<span class="cm-property">append</span>(<span class="cm-string">'file'</span>, <span class="cm-variable">inputDOM</span>[<span class="cm-number">0</span>]);<span class="cm-tab" role="presentation" cm-text="	">   </span><span class="cm-comment">// 单文件</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">formData</span>.<span class="cm-property">append</span>(<span class="cm-string">'files'</span>, <span class="cm-variable">inputDOM</span>);<span class="cm-tab" role="presentation" cm-text="	"> </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 多文件</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ajax 发送 FormData 对象到服务器接口，此时开始读取文件为二进制数据。当然也可以发送给一个 jsp、php 的页面接收，如 xhr.open('post', './saveFiles.php');</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">send</span>(<span class="cm-variable">formData</span>);</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 176px;"></div><div class="CodeMirror-gutters" style="height: 206px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><br></div><div><br></div><div style="text-align: left;"><span style="font-size:1.167rem" data-wiz-span="data-wiz-span"><b>方法3：</b>Ajax——</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">FileReader</span><span data-wiz-span="data-wiz-span"><span>&nbsp;</span>(JS WebAPI，<span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32);">HTML5</span>)：</span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">传输载体：</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">FileReader</span><span data-wiz-span="data-wiz-span"><span>&nbsp;</span>+&nbsp;</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">XHR（http）</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32);background-color:rgb(102, 102, 102)">2.0</span><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);"><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">实现概述：</span><br></span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637070026283_8273" class="wiz-code-container"><textarea style="display:none;">// 选择文件。设 input DOM 元素对象为 inputDOM，类型为 [file1, file2, ...]
&lt;input type='file'/&gt; 
// FileReader 读取文件并转码为 base64 编码的字符串数据
fileReader.readAsDataURL(inputDOM[0]);
// ajax 发送 FileReader 对象里转码为 base64 的字符串数据到服务器接口，当然发给 jsp 页面也可以
xhr.send(fileReader.result)</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637070026283_8273"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 711px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 152px; min-width: 681.016px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>6</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 选择文件。设 input DOM 元素对象为 inputDOM，类型为 [file1, file2, ...]</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">'file'</span><span class="cm-tag cm-bracket">/&gt;</span> </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// FileReader 读取文件并转码为 base64 编码的字符串数据</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">fileReader</span>.<span class="cm-property">readAsDataURL</span>(<span class="cm-variable">inputDOM</span>[<span class="cm-number">0</span>]);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ajax 发送 FileReader 对象里转码为 base64 的字符串数据到服务器接口，当然发给 jsp 页面也可以</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">send</span>(<span class="cm-variable">fileReader</span>.<span class="cm-property">result</span>)</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 152px;"></div><div class="CodeMirror-gutters" style="height: 182px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><br></div><div><br></div><div><br></div><div><span data-wiz-span="data-wiz-span" style="background-color: rgb(152, 251, 152);"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">Tips：</span></b></span></div><blockquote><div><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">XHR 1.0</span><span data-wiz-span="data-wiz-span" style="background-color: rgb(152, 251, 152);"> 不支持传输二进制数据，只能通过把二进制 01 转为字符的方式间接上传；</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">XHR 2.0</span><span data-wiz-span="data-wiz-span" style="background-color: rgb(152, 251, 152);"> 就可以直接传二进制数据了。</span></div></div><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Base64</span><span data-wiz-span="data-wiz-span" style="background-color: rgb(152, 251, 152);"> 数据存在形式：以 64 个基本字符转码而来的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">字符串</span>。64 个基本字符 62 个是字母和数字，剩下 2 个字符是符号。</span></div><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">文件上传具体</span><span data-wiz-span="data-wiz-span" style="background-color: rgb(152, 251, 152);">操作见<a href="https://ke.qq.com/webcourse/392617/102981342#taid=10098851092757929&amp;vid=5285890797952544175">《金渡前端课 - 第4节 课前预习-HTML5实例运用二 -&nbsp;</a></span><span style="background-color: rgb(152, 251, 152);"><a href="https://ke.qq.com/webcourse/392617/102981342#taid=10098851092757929&amp;vid=5285890797952544175">文件上传专题一：单文件上传》</a></span></div></blockquote><div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h3>2、多文件上传（后续添加）</h3><div>敬请期待……</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h3>3、大文件上传<span>（后续添加）</span></h3><div><span>敬请期待……</span></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h2>前端文件下载</h2></div><blockquote><div><div>老版的 XMLHttpRequest 对象只能从服务器取回文本数据（否则它的名字就不用XML起首了），新版则可以取回二进制数据。</div></div></blockquote><div><div><br></div></div><div><div><b style="font-size:1.167rem">XHR 1.0 的方法：Ajax （仅支持字符串传输的前提）</b></div></div><blockquote></blockquote><div><div style="text-align: left;"><b><br></b></div><div style="text-align: left;"><b>方法1：修改</b>&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">MIME Type</span><span data-wiz-span="data-wiz-span">（byte 与 char 互转）</span></div></div><blockquote><div style="text-align: left;"><span><b>做法关键：修改</b></span><span>&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">MIME Type</span><span>，将服务器返回的二进制数据伪装成文本数据（ASCII）来接收后再用位运算还原。</span></div></blockquote><blockquote><div style="text-align: left;"><span><b>做法详情：</b></span><span data-wiz-span="data-wiz-span">修改响应数据类型（MIME Type）为普通文本（text/plain），把服务器返回的二进制流数据<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">伪装</span>成文本（字符）数据，并告诉浏览器这是用户自定义的字符集（charset=x-user-defined），让浏览器把服务传输的二进制数据以字符串形式接收，接收方法是用 ajax 对象</span></div></blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span">的属性 responseText 。由于这时浏览器把它当做文本数据，因此还要用位运算（&amp; 0xff）把文本数据中每个字符还原为二进制数据，即 char 转 byte。详见</span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;当前笔记</span><span><u>《Q：XHR 1.0 时代怎么上传、下载文件的？》</u></span></div><div style="text-align: left;">&nbsp; &nbsp; <span style="font-size: 0.938rem;"><a href="https://www.cnblogs.com/xjy20170907/p/12803406.html">《<span style="color: rgb(0, 0, 0);">cnblogs - xhr1.0和xhr2.0的区别</span>》</a></span><span><u><br></u></span></div><div style="text-align: left;"><span><u><br></u></span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote><div style="text-align: left;"><span><br></span></div></blockquote><div><div><div><div style="text-align: left;"><b>方法2：</b><span data-wiz-span="data-wiz-span">使用 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Base64</span><span data-wiz-span="data-wiz-span">&nbsp;等编码方式转码（byte 与 char 互转）</span></div></div><blockquote><div style="text-align: left;"><span><b>做法关键：</b></span><span data-wiz-span="data-wiz-span">使用 Base64 等编码方式把二进制数据转为字符串。</span></div></blockquote><blockquote><div style="text-align: left;"><span><b>做法详情：</b></span><span data-wiz-span="data-wiz-span">让服务器发送&nbsp;Base64 等编码方式编码的字符串，浏览器接收后把字符串解码为二进制数据。</span><span>详见当前笔记</span></div></blockquote></div></div><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><div><div><blockquote><div style="text-align: left;"><span>《</span><span>Q：低版本 (1.4) jQuery 怎么文件下载？</span><span>》</span></div></blockquote></div></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><div><div><br></div><div><br></div><div><br></div><div><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">XHR 2.0 的方法：Ajax<b>（支持二进制传输<b>的前提</b>）</b></span></b></div><div><b><br></b></div><div><b>方法1：</b>Blob 对象：</div></div><blockquote><div><b>做法关键：</b>responseType 属性设为 blob。</div><div><b>做法详情：</b>把 responseType 设为 blob，表示服务器传回的是二进制对象，接收数据的时候，用浏览器自带的Blob对象即可。注意，这时候是读取&nbsp;</div></blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><div>xhr.response，而不是 xhr.responseText 。</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><div><br></div><div><div><b>方法2：</b>ArrayBuffer 对象</div></div><blockquote><div><span><b>做法关键：</b></span><span>responseType&nbsp;</span><span>属性</span><span>设为 arraybuffer。</span></div><div><span><b>做法详情：</b></span><span>用 JS 的 ArrayBuffer 对象直接接收</span><span>服务器返回的</span><span>二进制数据</span><span>。</span></div></blockquote><div><div><br></div></div><div><div><br></div></div><div><b>Ref：</b></div><div>&nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.cnblogs.com/xjy20170907/p/12803406.html" style="text-decoration-skip-ink:none;">《cn<span style="color:rgb(0, 0, 0);">blogs - xhr1.0和xhr2.0的区别</span>》</a><br></div><div>&nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.cnblogs.com/soraly/p/8441589.html" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">cnblogs - 前端上传文件的方法总结</span>》</a><br></div><div>&nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.cnblogs.com/ConfidentLiu/p/12354938.html" style="text-decoration-skip-ink:none;">《cnblogs - 上传文件的几种方式》</a><br></div><div>&nbsp; &nbsp;<span>&nbsp;</span><a href="https://blog.csdn.net/hellow_world_/article/details/78230150" style="text-decoration-skip-ink:none;">《Ajax上传文件(原生JS篇)》</a><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><span style="font-size: 1.5rem; font-weight: bold;">疑问：</span><br></div><div><br></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">FormData</span><span>、</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">FileReader</span><span>是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">ES5</span>&nbsp;</span><span>的还是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">ES6</span> 的？</span></b></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b>FormData、<span data-wiz-span="data-wiz-span">FileReader 不是 JS 引入的，而是&nbsp;H5 引入的。</span></div><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span">有一点要强调，FormData </span>类型是 XMLHttpRequest 2 级定义的， XMLHttpRequest 2 是 HTML5 引入的。所以也可以是 HTML5 引入的。</div><div style="text-align: left;"><span>XMLHttpRequest 1 虽然是个核心的 WebAPI，但是没有 W3C 规范，HTML5 概念形成后，W3C 才开始规范这个 WebAPI，于是便有了&nbsp;</span><span>XMLHttpRequest 2。</span></div></blockquote><div><br></div><div><br></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span>为什么说“<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML5</span><span data-wiz-span="data-wiz-span">&nbsp;</span>中<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">新增</span>了 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">FormData</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">FileReader</span><span data-wiz-span="data-wiz-span">&nbsp;”？为什么是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span><span data-wiz-span="data-wiz-span"> <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">引入</span>了他们？</span></b></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b><span data-wiz-span="data-wiz-span">w3school 中 HTML API 也没有这 2 个对象，为什么要说是 HTML 新</span>增的呢？就连&nbsp;<span>XMLHttpRequest<span>&nbsp;也说是 HTML 的。在调用这些类的对象时，都</span></span></div><blockquote><div style="text-align: left;"><span>不是 document 开头，而是 window 开头，应该是 BOM 的 API 呀，为什么网上这些人非要说是 HTML5 的东西呢？搞不明白。</span></div><div style="text-align: left;">另外还有一个奇怪的地方，在 HTML5 A<span data-wiz-span="data-wiz-span">PI 中有个一地理定位的 </span>API，但是这个 API 却在 window 对象下（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">window.navigator</span>），不在 document 对象下<span>（</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">document.xxx</span><span>）</span>。既然是 HTML 的 API，为什么不在 document 下面呢？令人费解。<img src=""></div><blockquote><blockquote><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0535a686-b768-48c6-962d-b651eeadfecb.png"></div><div style="text-align: center;">图 1 -&nbsp; HTML5 API 中一地理定位的 API —— <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">geolocation</span></div></div></blockquote></blockquote><blockquote><blockquote><div><div><div><br></div></div></div></blockquote></blockquote><blockquote><blockquote><div><div><img src=""></div></div></blockquote></blockquote><blockquote><blockquote><div><div><div><img src=""></div></div></div></blockquote></blockquote><div><div><br></div></div><div><br></div><div>总而言之，管别人怎么规定他们的从属关系，记住一句话“<b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 0, 0);">FormData、FileReader、XMLHttpRequest 2” 他们都是 WebAPI，都是 HTML5 时代新增的产物</span></b>”。</div></blockquote><div><div><br></div></div><blockquote><div><div><b>Ref：</b></div></div><div><div>&nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" style="text-decoration-skip-ink:none;">《阮一峰 - XMLHttpRequest Level 2 使用指南》</a></div></div><div><div>&nbsp; &nbsp; <a href="https://www.cnblogs.com/lhb25/p/html5-formdata-tutorials.html">《Web 前沿——HTML5 Form Data 对象的使用》</a></div></div><div><div>&nbsp; &nbsp; <a href="https://blog.csdn.net/jackfrued/article/details/8967667">《HTML5之FileReader的使用》</a></div></div><div><div>&nbsp; &nbsp; <a href="https://xhr.spec.whatwg.org/">《spec - XMLHttpRequest》</a></div></div><div><div>&nbsp; &nbsp; <a href="https://blog.csdn.net/u014607184/article/details/52372551/">《HTML5 FormData 方法介绍以及实现文件上传》</a></div></div></blockquote><div><div><br></div></div><div><br></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span>为什么说 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XMLHttpRequest</span> 是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span> 的？</b></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>鬼知道，它还是在 windows 对象下面呢。管他呢，也不想知道了，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不重要</span>。<br></div><div><br></div><div><div><span><br><b></b></span><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b></span><b><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Ajax（XHR2.0）</span><span data-wiz-span="data-wiz-span">&nbsp;</span><span>可以<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">脱离 jsp</span> （这</span><span>种后端页面）<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传文件</span>吗？</span></b></div></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>当然可以，可以直接给 RESTful 接口发。像 jsp 这种后端页面其实可以看成是一种接口，文件上传页面的数据凭借 xhr 对象发送到这个后端页面，这</div></div><blockquote><blockquote><div><div>时等于发到后端了，这个后端页面再去 xhr 的 request 里取。中间传输载体还是 xhr（http）。</div></div></blockquote><blockquote><div><div>因此，数据是可以脱离诸如 jsp、php 的后端页面，直接给接口发的。</div></div></blockquote></blockquote><div><div><br></div><div><br></div><div><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>关于上传下载的实现和过程中<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">异常</span>的处理？</b></span><br></div></div><div><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b></span><span>详见</span><a href="https://segmentfault.com/a/1190000004322487">《<span style="color: rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color: rgb(0, 0, 0);">你真的会使用XMLHttpRequest吗？</span>》</a>。</div><div><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1><span>后端文件上传——JSP </span><span>上传</span><span>文件</span></h1><div><span><br></span></div><h2><span>原理：</span></h2><blockquote></blockquote><blockquote><div><b>个人理解：</b></div></blockquote><blockquote><blockquote><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">&lt;form&gt;</span>/<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Ajax</span>&nbsp; &nbsp; &nbsp;+&nbsp; &nbsp; &nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">http</span>&nbsp; &nbsp; &nbsp;+&nbsp; &nbsp; &nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Servlet</span>(Java)</div></blockquote></blockquote><blockquote><blockquote><div><span><br></span></div></blockquote></blockquote><blockquote><div><b>说法一：</b></div><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">浏览器端</span><span data-wiz-span="data-wiz-span">&nbsp;</span>通过 &lt;form&gt; 读取文件为二进制数据流并通过 http 协议发送到服务器端。</div></blockquote><blockquote><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">服务器端</span><span data-wiz-span="data-wiz-span">&nbsp;</span><span>通过 http 协议</span><span>从 request 对象中获取二进制数据流，用输入流接收后用输出流写成文件。</span></div></blockquote></blockquote><blockquote><blockquote><div><br></div></blockquote></blockquote><blockquote><div><span><b>说法二：</b></span></div><blockquote><div style="text-align: left;"><span>原理就是通过 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">&lt;form&gt;</span><span>（ form 标签的属性&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">enctype</span>=<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">multipart/form-data</span> ）<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">告诉</span></span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">浏览器</span><span>，我要发送的这个是文件，你浏览器处理的时候把它<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">转换为二进制</span>。</span></div></blockquote><blockquote><div style="text-align: left;"><span>接着浏览器在</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">请求头</span><span>里附带出文件的各项属性（比如文件名），在</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">请求体</span><span>附带</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">二进制的流数据</span><span>（这个有待验证是否正确），然后发送到目标服务器。</span></div></blockquote><blockquote><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">目标服务器</span><span>接收并处理它（根据请求头的信息获取文件的基本属性（比如文件名）生成文件，再存入数据库或本地磁盘，或者其他处理方式） 。</span></div></blockquote></blockquote><blockquote><blockquote style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/0.14491498147315185.png" alt="è¿éåå¾çæè¿°"></div><div>&nbsp; &nbsp;图1 - 请求头<span><br></span></div></blockquote><blockquote style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/0.530955128396017.png" alt="è¿éåå¾çæè¿°"></div><div><span>&nbsp; &nbsp;图2 - 多部件（Multipart）请求体</span></div><div><span>（详见当前笔记《HTML &lt;form&gt;》）</span></div><div><span><br></span></div></blockquote></blockquote><blockquote><div><span><br></span></div><blockquote><div><br></div><div><br></div></blockquote></blockquote><div><span><br></span></div><h2>技术：</h2><div>&nbsp; &nbsp; form、jsp、servlet 、IO流（核心，如 FileInputStream、FileOutputStream）<br></div><div><br></div><div><br></div><h2><span>前提：</span></h2><blockquote></blockquote><div><b>前端前提：</b></div><div><ul><li>文件流发送口：<span>XHR request</span></li><li>文件流发送器：enctype 为 multipart/form-data&nbsp; 的 &lt;form&gt;</li><li>文件选择器：&lt;input type="file"&gt;</li></ul></div><div><br></div><div><b>后端前提：</b></div><div><ul><li>文件流接收口：XHR request</li><li>文件接收器：<span>Java doPost/doGet、Java.IO、Java 第三方文件上传</span><span>插件（解析 XHR request，获取数据流）</span></li></ul></div><div><br></div><div><div><span><br><b>Ref：</b></span></div></div><div><blockquote><div><a href="https://www.zhihu.com/question/39485936" style="text-decoration-skip-ink:none;">《知乎 - JSP如何实现文件上传，原理是什么？》</a></div><div><a href="https://www.cnblogs.com/aotemanzhifu/p/9192355.html" style="text-decoration-skip-ink:none;">《cnblogs - JavaWeb上传原理和实现》</a></div><div><a href="https://blog.csdn.net/niaonao/article/details/51322336" style="text-decoration-skip-ink:none;">《csdn - 简述文件上传原理之 JSP - Servlet 篇》</a></div><div><br></div><div><br></div></blockquote></div><div><br></div><h2>实现方法：</h2><div><b><br></b></div><div><b><div><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">(1) 前端的方法：</span></div></b><div><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">前端都是一样的—— "<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">multipart</span>/<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">form-data</span>" 的 </span><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">form</span></b><span data-wiz-span="data-wiz-span">。</span></div></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637056991929_8823" class="wiz-code-container"><textarea style="display:none;">// 1、使用 Spring API 采用流的方式上传
&lt;form action="fileupload" method="post" enctype="multipart/form-data" name="form1"&gt;  
    &lt;input type="file" name="file" /&gt;  
    &lt;input type="submit" name="submit" value="上传它！"/&gt;  
&lt;/form&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637056991929_8823"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 691px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 128px; min-width: 661.406px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>5</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 1、使用 Spring API 采用流的方式上传</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">action</span>=<span class="cm-string">"fileupload"</span> <span class="cm-attribute">method</span>=<span class="cm-string">"post"</span> <span class="cm-attribute">enctype</span>=<span class="cm-string">"multipart/form-data"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"form1"</span><span class="cm-tag cm-bracket">&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"file"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"file"</span> <span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"submit"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"上传它！"</span><span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 128px;"></div><div class="CodeMirror-gutters" style="height: 158px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637056991908_8660" class="wiz-code-container"><textarea style="display:none;">// 2、 使用 JSP 的上传插件 jspSmartUpload"
&lt;form action="/jspSmartUpload/upload.jsp" method="post" enctype="multipart/form-data" name="form1"&gt;  
    &lt;input type="file" name="file" /&gt;  
    &lt;input type="submit" name="submit" value="上传它！"/&gt;  
&lt;/form&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637056991908_8660"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 815px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 128px; min-width: 784.563px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>5</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 2、 使用 JSP 的上传插件 jspSmartUpload"</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">action</span>=<span class="cm-string">"/jspSmartUpload/upload.jsp"</span> <span class="cm-attribute">method</span>=<span class="cm-string">"post"</span> <span class="cm-attribute">enctype</span>=<span class="cm-string">"multipart/form-data"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"form1"</span><span class="cm-tag cm-bracket">&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"file"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"file"</span> <span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"submit"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"上传它！"</span><span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 128px;"></div><div class="CodeMirror-gutters" style="height: 158px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637056991870_9985" class="wiz-code-container"><textarea style="display:none;">// 3、 使用 Apache 的上传插件 common-fileupload
&lt;form action="jsp/do_upload.jsp" method="post" enctype="multipart/form-data" name="form1"&gt;  
    &lt;input type="file" name="file" /&gt;  
    &lt;input type="submit" name="submit" value="上传它！"/&gt;  
&lt;/form&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637056991870_9985"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 745px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 128px; min-width: 715.281px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>5</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 3、 使用 Apache 的上传插件 common-fileupload</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">action</span>=<span class="cm-string">"jsp/do_upload.jsp"</span> <span class="cm-attribute">method</span>=<span class="cm-string">"post"</span> <span class="cm-attribute">enctype</span>=<span class="cm-string">"multipart/form-data"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"form1"</span><span class="cm-tag cm-bracket">&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"file"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"file"</span> <span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"submit"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"上传它！"</span><span class="cm-tag cm-bracket">/&gt;</span>  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 128px;"></div><div class="CodeMirror-gutters" style="height: 158px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><b><div><span><br></span></div><div><span>&nbsp;Ref：</span></div></b></div><blockquote><div><b><div><a href="https://www.cnblogs.com/ConfidentLiu/p/12354938.html">《cnblogs - 上传文件的几种方式》</a></div></b></div></blockquote><div><b><div><br></div><div><br></div><div><br></div><br></b></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.333rem">(2) 后端的方法：</span></b></div><div><b><br></b></div><div style="text-align: left;"><b>方法一：后端使用 </b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Spring API<b style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">接收<b style="color: rgb(0, 0, 0);">&nbsp;</b></span><b><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102);">流数据</span></b><span>&nbsp; &nbsp;&nbsp;</span></b></span></b><b>&nbsp;</b></div><blockquote><div><span>使用&nbsp;</span><span>Spring API 接收流数据有&nbsp;</span><span>3 种方法，主要还是用</span><span>对象</span><span> MultipartHttpServletRequest 或 CommonsMultipartFile 借助 request 接收流数据。</span></div><div>详见<a href="https://www.cnblogs.com/yuluoxingkong/p/10676933.html">《cnblogs - java常见3种文件上传速度对比和文件上传方法详细代码》</a>。</div><div><blockquote><div><img src="" width="628" height="386"></div></blockquote></div></blockquote><div><br></div><div style="text-align: left;"><b>方法二：后端使用<b>&nbsp;</b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">第三方 Java 插件<b style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">&nbsp;</b></span></b><span data-wiz-span="data-wiz-span" style="font-weight: bold; color: rgb(255, 104, 32);">接收<b style="color: rgb(0, 0, 0);">&nbsp;</b></span><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">流数据</span></b><span style="font-weight: bold;">&nbsp; &nbsp;&nbsp;</span></div><blockquote><div><div><ul><li>Apache 的 common-fileupload：<span>主要还是用插件提供的 ServletFileUpload 等对象</span><span>借助<span>&nbsp;</span></span><span>request 接收流数据。</span><span>详见</span><span><a href="https://blog.csdn.net/Mr_li13/article/details/49330895" style="text-decoration-skip-ink: none;">《csdn - jsp文件上传原理》</a>。</span></li><li>JspSmart 的 jspSmartUpload：<span>主要还是用插件提供的对象</span><span>借助<span>&nbsp;</span></span><span>request 接收流数据。详情略。</span></li><li><span>Struts 的 FormFile：</span><span>主要还是用插件提供的对象</span><span>借助<span>&nbsp;</span></span><span>request 接收流数据，仅支持 Struts。</span><span>详情略。</span></li></ul></div></div></blockquote><blockquote><div><blockquote><div><img src=""></div></blockquote></div></blockquote><div><br></div><div><div><b>Ref：</b></div></div><blockquote><div><div><a href="https://blog.csdn.net/wangjinyu501/article/details/7750654" style="text-decoration-skip-ink:none;">《csdn - 常用JSP文件上传,下载的一些方法》</a></div></div></blockquote><div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><h2 style="font-size:1.5rem;"><br>疑问：</h2><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>在<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">上传文件</span>时，后端必须通过 </b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">request</span></b><b> 获取</b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">输入流</span></b><b>吗？</b></div><div><span><b style="font-size:1.5rem;">A：</b>如果你使用 http 协议，那就必须在服务端也通过 XHR 的 request 获取输入流。</span></div><div><span><br></span></div><div><span><br></span></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>后端在<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">接收&nbsp;</span></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">二进制流数据<b style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">&nbsp;</b></span></b><b>时，那个操作&nbsp;</b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">out.write()<b style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">&nbsp;</b></span></b><b>是干什么的？在 </b><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);"><b></b></span><span style="color: rgb(255, 255, 255);"><b style="background-color: rgb(102, 102, 102);">JSP</b></span><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);"> 页面<b style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">&nbsp;</b></span></b><b>里执行这个后，发生了什么？</b></div><div><span><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;"><b>A：</b></span>out.write() 不是输入流，而是输出流，用来读出二进制数据流写到一个媒介上，这个媒介不仅限于硬盘（文件），也可以是内存。关于输入输出流，</span></div><blockquote><div><span>请</span><span>好好了解下 Java 的 IO&nbsp;</span><span><a href="https://www.cnblogs.com/alsf/p/6784134.html" style="text-decoration-skip-ink:none;">《cnblogs - JAVA的IO操作：内存操作流》</a></span><span>。</span><span>out.write()</span><span>&nbsp;执行后表示把二进制数据流写到硬盘上，形成一个文件上。JSP 表示的是后端要做什么。</span></div></blockquote><blockquote><blockquote><div><span><img src="" width="605" height="274"></span></div></blockquote></blockquote><div><span><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="font-weight: bold; font-size: 1.5rem;">Q：</span><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">输入流</span></b><b>是浏览器提供的吧？<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">获取输入流</span>的时候就是文件正在<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">上传</span>的时候吧？</b></div><div><span><b style="font-size:1.5rem;">A：</b>输入流是 Java 提供的，至于是处理请求的时候文件开始上传到 request，还是</span><span>获取输入流的时候通过 request 开始上传，还不清楚，暂不深究。</span></div><div><span><br></span></div><div><br></div><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>&lt;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">input</span> type='<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">file</span>'&gt; 是 </b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">html5</span></b><b> 的吗？还是一直都有？</b></div><div><b style="font-size:1.5rem;">A：</b>一直都有，他是文件选择器，不是文件读取器，也不是文件上传器。</div><div><br></div></div><div><br></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">jsp</span></b><b> <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">上传</span>需要客户端安装 </b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);"><b>jre</b></span><b> 吗？</b></div><div><b style="font-size: 1.5rem;">A：</b>不需要，用的 http 协议上传的，是个浏览器都会 http。</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1>相关基础知识：</h1><div><br></div><div><div><br></div><h2 style="font-size:1.5rem;"><b>关于 JSP 的概念：</b></h2><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">JSP</span> 的代码<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">都是在服务器端执行</span>的，执行好了再返回结果给浏览器，浏览器端<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不需要 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">JRE</span>。只要不是要在浏览器<span>端</span>跑 <span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">J<span data-wiz-span="data-wiz-span">a</span>va</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);"> </span>代码，就不需要 <span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">JRE</span><span>，哪怕<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">只用 </span></span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">IE</span><span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);"> </span>都可以</span>。</div><div><br></div><div style="text-align: left;">那什么时候会<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">在浏览器</span><span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">端跑</span> </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Java </span><span>代码？</span></div><div><span>使用 Jasper、Applet 等 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Java 小程序</span>的时候。</span></div><div><span><br></span></div><div style="text-align: left;"><span>因此，在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">JSP</span><span> 里那些 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Java</span><span> 代码，比如<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">操作数据库</span>的 Java 代码，是在服务器端执行并且执行完毕的，否则浏览器端不会有返回结果。如果是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">点个按钮</span>执行一段 JSP（Java） 代码，那<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">也是在服务端执行</span>的。</span></div><div><span><br></span></div><div style="text-align: left;"><span>所以说，那些 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">JSP 上传文件</span><span>的实现方法里，那些 Java 代码都是在服务端执行的。它们没有用 Applet，所以不可能是在本地用 Java 程序上传，在服务端再用</span><span data-wiz-span="data-wiz-span"> Java 程序接收</span><span>，而只能是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">浏览器来负责上传</span>，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">服务器用 Java 程序负责接收</span>。至于<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">通信协议</span>，既然是浏览器，那么只能是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">http</span>。如果是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Java 客户端小程序</span>，那他们想用什么协议都可以，只要能把数据通过网络发送到服务器就行。</span></div><div><span><br></span></div><div><span><br></span></div><div><b style="font-size:1.167rem"><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">关于 JSP 的概念图：</span></b></div><div style="text-align: center;"><br></div><div style="text-align: center;"><br></div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.07950964584961125.png" alt="å¨è¿éæå¥å¾çæè¿°" width="719" height="400"></div><div style="text-align: center;">图 2 - JSP 执行过程</div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.08058157083279674.png" width="532" height="334"></div><div style="text-align: center;"><span>图 3 - JSP 执行过程</span></div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.18229150664772795.png" alt="å¨è¿éæå¥å¾çæè¿°" width="657" height="196"></div><div style="text-align: center;"><span>图 4 - 服务器 JSP 文件存在形式</span></div><div style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/0.8527870746243688.png" alt="å¨è¿éæå¥å¾çæè¿°" width="642" height="263"><img src=""></div><div><span>图 5 - JSP 文件源码</span></div><div><img src="文件传输_基础知识（index）_files/0.3953241384298143.png" width="487" height="414"></div><div><span>图 6 - JSP 文件源码结构说明</span></div></div><div style="text-align: center;"><div><br></div><div><div><img src="文件传输_基础知识（index）_files/6bfe1a0a-61cf-43f0-aaff-99c2dba07680.png"></div><div><span>图 7 - JSP 运行过程说明</span></div><div><span><br></span></div><div><img src="文件传输_基础知识（index）_files/0.6955129106345979.png"></div></div><div><span>图 8 - JSP 生命周期</span></div><div><span><br></span></div><div><br></div></div><div><b>Ref：</b></div></div><blockquote><div><div><a href="https://blog.csdn.net/dzy21/article/details/51860093/" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">csdn -&nbsp;</span>JSP基本概念》</a></div></div><div><div><a href="https://blog.csdn.net/weixin_45720626/article/details/107521096" style="text-decoration-skip-ink: none;"><span style="color: rgb(0, 0, 0);">《</span></a><a href="https://blog.csdn.net/weixin_45720626/article/details/107521096" style="text-decoration-skip-ink: none;">J</a>SP的执行过程（详解）》</div></div><div><a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;dyTabStr=MCw0LDUsMSw2LDMsNyw4LDIsOQ%3D%3D&amp;word=JSP+%E6%A6%82%E5%BF%B5">《<span style="color: rgb(0, 0, 0);">百度图片 - JSP 概念</span>》</a></div></blockquote><div><br></div><div><br></div><h2><span><span>Spring 文件上传 API：</span>MultipartHttpServletRequest：</span></h2><div data-mode="Java" data-theme="eclipse"  id="wiz_cm_1637046628096_2073" class="wiz-code-container"><textarea style="display:none;">public interface MultipartHttpServletRequest extends HttpServletRequest</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637046628096_2073"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 32px; min-width: 553.563px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">public</span> <span class="cm-keyword">interface</span> <span class="cm-def">MultipartHttpServletRequest</span> <span class="cm-keyword">extends</span> <span class="cm-variable">HttpServletRequest</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 32px;"></div><div class="CodeMirror-gutters" style="height: 62px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><span>它是 Spring 提供的</span><span>用来处理文件上传后端部分的工作的接口，继承了 Java 的接口 HttpServletRequest。</span></div><div><span><br></span></div><div><span><b>关于<b>JavaEE API：</b>HttpServletRequest：</b></span><br></div><div data-mode="Java" data-theme="eclipse"  id="wiz_cm_1637047176755_246" class="wiz-code-container"><textarea style="display:none;">public interface HttpServletRequest extends ServletRequest</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637047176755_246"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 32px; min-width: 453.5px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">public</span> <span class="cm-keyword">interface</span> <span class="cm-def">HttpServletRequest</span> <span class="cm-keyword">extends</span> <span class="cm-variable">ServletRequest</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 32px;"></div><div class="CodeMirror-gutters" style="height: 62px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><div>它就是 Servlet 里 doGet/doPost 里接收的那个 request，所属包为 javax.servlet.http 。（javax：java 的扩展包）</div></div><div><br></div><div><br></div><div><br></div><h2><span>Spring <span>文件上传&nbsp;</span>API：</span>CommonsMultipartFile：</h2><div data-mode="Java" data-theme="eclipse"  id="wiz_cm_1637046469018_3156" class="wiz-code-container"><textarea style="display:none;">    // 接口： 
    public interface MultipartFile extends InputStreamSource
    // 类：
    public class CommonsMultipartFile implements MultipartFile, Serializable</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637046469018_3156"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 622px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 104px; min-width: 592.094px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>4</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// 接口： </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">public</span> <span class="cm-keyword">interface</span> <span class="cm-def">MultipartFile</span> <span class="cm-keyword">extends</span> <span class="cm-variable">InputStreamSource</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// 类：</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">CommonsMultipartFile</span> <span class="cm-keyword">implements</span> <span class="cm-variable">MultipartFile</span>, <span class="cm-variable">Serializable</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 104px;"></div><div class="CodeMirror-gutters" style="height: 134px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div>它是 Spring 提供的<span>用来处理文件上传后端部分的工作的接口</span><span><br></span></div><div><span>&nbsp;</span></div><div><span><b>Ref：</b></span><br></div><blockquote><div><a href="https://blog.csdn.net/gao_zhennan/article/details/90313579">《csdn - MultipartFile 和 CommonsMultipartFile的区别》</a></div></blockquote><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h2>XHR——XMLHttpRequest：</h2><div style="text-align: left;"><br></div><h3 style="text-align: left;">XHR 概念：</h3><div style="text-align: left;">它是个 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Web API</span>，由浏览器负责实现，作用是包装一个<span>&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">请求</span><span data-wiz-span="data-wiz-span">&nbsp;，以&nbsp;</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">HTTP</span><span data-wiz-span="data-wiz-span"><span>&nbsp;</span>协议发送</span>到目标<span>&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">服务器（端口上的）接口</span>，与<span>目标</span><span>&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">服务器</span><span data-wiz-span="data-wiz-span">&nbsp;以&nbsp;</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">HTTP</span><span data-wiz-span="data-wiz-span"><span>&nbsp;</span>协议&nbsp;<span>&nbsp;</span></span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">通信</span><span data-wiz-span="data-wiz-span">，以</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">&nbsp;</span><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32);">Ajax</span>（技术方案）方式 </span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">交互</span>。</div><div style="text-align: center;"><div><div><div><img src="文件传输_基础知识（index）_files/0.981557821901431.png"></div><div><span>图 1 - XHR 职能说明</span></div></div><div><span><div><div><img src="文件传输_基础知识（index）_files/b72add06-7e82-4c0c-8b86-4a90bcba4eea.jpg" width="526" height="253"></div></div><div><span>图 2 - XHR 职能说明</span></div><div><span><div><div><img src="文件传输_基础知识（index）_files/0.5192056878468267.png" width="461" height="256"></div><div><span>图 3 - XHR 职能说明</span></div></div><div><div><img src="文件传输_基础知识（index）_files/0.8769592264911605.png" width="676" height="342"></div></div><div><span>图 4 - XHR 属性、方法说明</span></div><div><div><div><img src="文件传输_基础知识（index）_files/24b5de2f-3246-4304-9be0-5c2338a47dbe.jpg" width="682" height="598"></div></div></div><div><span>图 5 - XHR 属性、方法说明</span></div><br></span></div></span></div><div><img src="文件传输_基础知识（index）_files/0.35936386312087043.png" width="511" height="317"></div></div><div><div><span>图 6 - Ajax 工作原理</span></div></div></div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.14748284811735862.png"><img src="" width="469" height="352"></div><div style="text-align: center;"><span>图 7 - Ajax 工作原理</span></div><div style="text-align: center;"><img src="" width="683" height="344"><img src="文件传输_基础知识（index）_files/0.8058787274154435.png" width="657" height="369"></div><div style="text-align: center;"><span>图 8 - 文件下载工作原理</span></div><div style="text-align: center;"><div><img src="" width="657" height="341"></div></div><div style="text-align: center;"><br></div><div style="text-align: center;"><div><div><br></div></div></div><div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b>XMLHttpRequest 对象属性 response<b>Body</b>、response<b>Stream</b> 是传输二进制数据的关键吗？</div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b>不，这 2 个接收响应数据的对象用得少，无关紧要，暂不深究。能不能直接传输二进制跟 XMLHttpRequest 版本、Http 版本有关。</div><div><br></div></div><div><br></div><blockquote><div><div><b>Ref：</b></div></div></blockquote><blockquote><blockquote><div><div><a href="https://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" style="text-decoration-skip-ink:none;">《阮一峰 - XMLHttpRequest Level 2 使用指南》</a></div></div></blockquote><blockquote><div><a href="https://blog.csdn.net/weixin_33885676/article/details/89443719?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">《csdn - 你真的会使用XMLHttpRequest吗？》</a></div></blockquote><blockquote><div><a href="https://segmentfault.com/a/1190000004322487">《<span style="color: rgb(0, 0, 0);">segmentfault - 你真的会使用XMLHttpRequest吗？</span>》</a></div></blockquote><blockquote><div><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">《MDN - WebAPI 接口参考 - 使用 XMLHttpRequest》</a></div><div><span><a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1637379083871_R&amp;pv=&amp;ic=&amp;nc=1&amp;z=&amp;hd=&amp;latest=&amp;copyright=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;dyTabStr=MCwzLDIsNCw2LDEsNSw3LDgsOQ%3D%3D&amp;ie=utf-8&amp;sid=&amp;word=XMLHttpRequest">《百度图片 - XMLHttpRequest》</a></span></div></blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><div><div><br></div></div><div><div><br></div></div><div><br></div><div><br></div><div><br></div><div><br></div><h3><b><span data-wiz-span="data-wiz-span"><span>XHR&nbsp;</span>上传、下载文件的方式</span></b></h3><div>根据版本不同，对二进制的支持也不同，上传的方式也不同，总的来说分两种方式：编码（二进制转字符串）、无编码（直传二进制）。</div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/943eb099-a21e-435f-aeef-85dd69b3a96f.png" width="620" height="255"></div><div style="text-align: center;">图 1 -&nbsp; Base64 编码</div><div style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/36161d84-a8bb-4be4-a403-345a0de1a64a.png" width="621" height="253"></div><div><span>图 2&nbsp; - ASCII 编码</span></div></div><div style="text-align: center;"><div><div><img src="文件传输_基础知识（index）_files/c034b53f-0b2d-4d96-bf04-06db9a424e4d.png" width="618" height="252"></div></div><div><span>图 3&nbsp; -&nbsp; </span><span>直传</span><span>无编码</span></div></div><div><div><div><br></div></div><div><br></div></div><div><br></div><div><br></div></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">X</span></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HR 2.0</span></b><b> <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">支持二进制</span>的流数据，那么 </b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 1.0</span></b><b> 呢？</b></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>XHR 1.0 只能收发本文数据，但这不是 HTTP 的错，HTTP 1.0 是支持的二进制的，HTTP 0.9 才只支持文本。</div><div><br></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 1.0</span></b><b> 时代怎么<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">上传、下载</span>文件的？</b></div><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b></span>修改数据类型（<span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">MIME Type</span><span>）</span></span>为普通文本（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">text/plain</span>），把服务传输的二进制数据以字符串形式接收，然后再用位运算（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">&amp;&nbsp;</span><span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">0xff</span>）把每个字符还原为</span><span>二</span></div><blockquote><div style="text-align: left;"><span>进制数据。详见<a href="https://www.cnblogs.com/xjy20170907/p/12803406.html" style="text-decoration-skip-ink: none;">《cn<span style="color:rgb(0, 0, 0);">blogs - xhr1.0和xhr2.0的区别</span>》</a>&nbsp; &nbsp;。</span><span>或者不用你 XHR 1.0 这个 API，用别人封装的 API（如浏览器插件），使用 http 1.x 直接传输二进制。</span></div></blockquote><blockquote><div><br></div></blockquote><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 2.0 时代</span></b><b>怎么<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">上传</span>、<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">下载</span>文件的？</b></div><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b></span><span>直接传输文件的二进制数据流。</span></div><div><span><br></span></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR </span></b><b>上传、下载文件的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">原理</span>是什么？</b></div><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b><span>XHR 上传、下载的</span></span><span>&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(127, 127, 127)" data-wiz-span="data-wiz-span">本质</span><span data-wiz-span="data-wiz-span">&nbsp;</span><span>是&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(127, 127, 127)" data-wiz-span="data-wiz-span">借助浏览器用 Http 协议传输数据</span><span>。</span></div><blockquote><div><span>XHR</span><span>&nbsp;</span><span>来是一个用 http 协议通信的工具类，是一个 WebAPI，支持它的应用就是浏览器。程序员在程序里操作 XHR 对象，控制客户端（浏览器）以 http 协议发出请求给服务器，</span><span>服务器作出响应，要上传要下载都由客户端发个请求，响应成功后边开始上传或下载。底层做上传下载工作的，是客户端（浏览器）。</span></div></blockquote><blockquote><div><span>XHR在客户端、服务器都有，只是存在形式不是完全一样，客户端叫 XHR，服务端叫 HSR（HttpServletRequest），它们都是 Http 类的子类，一个工作于客户端，一个工作于服务端，它们之间通信所用的协议就是 Http。</span></div></blockquote><div><span><br></span></div><div><div><span><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b>为什么<span data-wiz-span="data-wiz-span">说“使用 Ajax 上传仍是一项<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">实验性</span>的技术”？</span></b></div></span></div></div></div><blockquote></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">这句话出自 </span><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest"><span data-wiz-span="data-wiz-span">《MDN - WebAPI 接口参考 - 使用 XMLHttpRequest》</span></a><span data-wiz-span="data-wiz-span">：</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">注意: 该框架使用 FileReader API 进行文件的上传。这是一个较新的 API 并且还未在 IE9 及以下版本的浏览器中实现。因此，使用 AJAX 上传仍是一项实验性的技术。如果你不需要上传 二进制文件，该框架在大多数浏览器中运行良好。</span></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>知道这句话的背景后就不难知道，它这是针对 FileReader API 来讲的，因为这个 API 低版本浏览器不支持。所以这句话不是总括所有 Ajax 上传的情况，再说</span></div></div><blockquote><div style="text-align: left;"><div><span>了，用 Ajax 上传下载早已成为家常便饭。</span></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b>XHR 1.0 只能收发文本，这<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">锅</span>该 Http 背吗？</b></span></div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>Http 1.0 诞生的时间是 1996 年，XHR 1.0 诞生的时间是 2006 年， <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Http 1.0 比 XHR 早出生 10 年</span>，Http 1.0 支持任意类型，所以 XHR 1.0 只支持文本，显而易见，这是 XHR 1.0 自身设计时搞的问题，这锅 Http 不背。</span></div></div><blockquote><div style="text-align: left;"><div><span>详见当前笔记：</span></div></div><blockquote><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><u>《XHR 与 Http》</u></span></div></div></blockquote></blockquote><blockquote><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><u>《Q：XHR 2.0 支持二进制的流数据，那么 XHR 1.0 呢？》</u></span></div></div></blockquote></blockquote></blockquote><div style="text-align: left;"><div><br></div><div><br></div><div><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b>前后端文件传输二进制是用 Http 协议在传吗？<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">载体</span>是 XHR 吗？</b></span></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>传二进制用的 Http，但 XHR 不是载体，TCP 是输送管道，<span>Http 协议的包装</span>才是载体，Http 协议包装的数据包就是传输的二进制数据。</div></div><blockquote><div style="text-align: left;"><div>详见当前笔记<u>《XHR 与 Http》</u>，<span>一</span>张图告诉你答案。</div></div></blockquote><div style="text-align: left;"><div><br></div><div><br></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b>XHR 1.0 的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">时代</span>，能用 JSP 以二进制数据形式上传文件吗？</b></div><div><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>XHR 1.0<span>&nbsp;的时代，是可以用 Http 1.0 直传二进制数据的，这与 JSP 无关。如果在这个时代你非要直传二进制，那么就不要用浏览器自己实现</span></span></div></div><blockquote><div style="text-align: left;"><div><span>的&nbsp;</span><span>XHR 1.0，得用别人大</span><span>神封装的 XHR 。不过这只有开发浏览器的人才能做到了。</span></div></div></blockquote><div style="text-align: left;"><div><br></div><div><br></div><div><br></div><div><br></div></div><div style="text-align: left;"><div><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">Ref：</span></b></div></div><blockquote style="text-align: left;"><div><a href="https://segmentfault.com/a/1190000004322487"><span data-wiz-span="data-wiz-span">《SegmentFault - 你真的会使用XMLHttpRequest吗？》</span></a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><br></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><h3 style="font-size:1.25rem;"><b>XHR&nbsp;</b><b>与 Ajax</b></h3></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span">不是一个类型的东西，没可比性。它们的关系是：操作 XMLHttpRequest 对象发送 Ajax 请求。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span">当涉及到 XMLHttpRequest 、Ajax 时，你一定要明确浏览器帮你做了什么——哪些你不用做，哪些你需要做。在这方面常见的一个遗留系统的问题就是老版本 (1.4)&nbsp;的 jQuery 封装的 Ajax 请求不支持二进制传输，需要升级 jQuery 版本或自己用&nbsp;原生 JS 封装的 Ajax 请求。</span></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b>http</b><b> 是</b><b>文本协议</b><b></b><b>，为什么还要</b><b></b><b>用 </b><b>content-type</b><b></b><b>、</b><b>response-type</b><b></b><b> 搞个</b><b></b><b>内容识别</b><b></b><b>呢？</b></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b><span data-wiz-span="data-wiz-span">注意了，http 只能传输文本只是在 http0.9 的远古时代，后来 http1.0 时代来临，浏览器或是服务器内核就支持二进制数据传输了，也就支持任意类型</span></div></div></div><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">的文件传输了。但是还需要做一件事，就是在头域（Header）里用 </span><u></u><u>content</u><u>-type</u><span data-wiz-span="data-wiz-span">、</span><u></u><u>response</u><u>-type</u><span data-wiz-span="data-wiz-span"> 搞个内容识别，来告诉浏览器、服务器内容是什么格式的。如果 http2.0 以前，那么头域必须是 ASCII 类型（字符）。Header 和 Body 是分开的，Body 里装载二进制数据。</span></div></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><b><span data-wiz-span="data-wiz-span">XHR 与 jQuery：</span></b></h3></div></div><div style="text-align: left;"><div><div><div><b><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b>jQuery</b><b></b><b></b><b>&nbsp;</b><b>的</b><b>版本</b><b></b><b>跟</b><b></b><b>&nbsp;</b><b></b><b>XHR</b><b>&nbsp;的</b><b>版本</b><b>有什么联系？浏览器中在&nbsp;</b><b>new XHR 对象</b><b>时，是如何决定它的</b><b>版本</b><b>的？</b></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b><span data-wiz-span="data-wiz-span">在你搞清楚 jQuery 和 XHR 的概念后就会明白，jQuery 的版本跟 XHR 的版本没有任何关系。jQuery 是用原生 XHR 进行二次封装，给自己封装了一</span></div></div></div></div><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">个发 Ajax 请求的方法—— ajax()，而不是自己另外实现了 XHR。因此 XHR 的版本与 jQuery 的版本无关，与浏览器所支持的版本有关。因此：①&nbsp; jQuery 的版本变化不会影响 XHR 的版本；② 在浏览器中 new XHR() 时其版本是浏览器决定的。</span></div></div></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b>为什么老版本 (v1.4) 的 </b><b>jQuery</b><b>&nbsp;发的 </b><b>Ajax</b><b> 请求下载的文件打开是</b><b>乱码</b><b>？</b></div></div><div style="text-align: left;"><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b><span data-wiz-span="data-wiz-span">这一点在 jQuery 官方文档就做了说明：&nbsp;“anything else&nbsp;will be returned as a string。”这里说的是如果 MIME type 是 XML、JSON、Text 等等这些</span></div></div><blockquote><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">文本</span><span>类型以外的类型，服务器响应的数据在浏览器这里接收后就会以 String 方式在返回给你（实为解析给你，这里的返回是经 jQuery ajax 对象的手返回给你，不是服务器的手，外国人有时候写文档是不会在乎有歧义的）。</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div style="text-align: center;"><span><img src="文件传输_基础知识（index）_files/0.7781009654371279.png" alt="20191029111117489.png"></span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">这也就是说，jQuery 发的 Ajax 请求只支持传输文本数据，不支持二进制传输，如果服务器给你传二进制数据，它会把二进制数据当做字符串解析给你，这当中会经过一层 ASCII 转码，把二进制转为一个个字符。由于二进制数据对应的本不是字符，所以这时候的字符就是乱码的了。拿乱码字符串拼成的文件，打开当然就乱码了。</span></div></div></div></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b>既然 </b><b>XHR</b><b>&nbsp;的</b><b>版本</b><b>不随 </b><b>jQuery</b><b>&nbsp;的</b><b>版本</b><b>，那</b><b></b><b>为什么老版本 (v1.4) 的</b><b></b><b>&nbsp;</b><b>jQuery</b><b>&nbsp;用 </b><b>XHR</b><b> </b><span data-wiz-span="data-wiz-span">2.0</span><b> 发的 </b><b>Ajax 请求</b><b>还是</b><b>不支持</b><b>传输二进制数据？</b></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b><span data-wiz-span="data-wiz-span">在官方文档里，只说了不支持二进制，却并没有说明不支持二进制的原因，那不支持二进制的原因是因为 XHR 吗？</span></div></div></div></div><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">并不是，这个问题其实自己仔细想想“封装”是怎样一个过程就能得到答案了。</span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">如果对某个东西&nbsp;A&nbsp;做二次封装，一般只有两种方式，一种是在原有对象&nbsp;A&nbsp;的基础上增加新的方法和属性，即建立一个新的对象 A+，A+&nbsp;拥有&nbsp;A&nbsp;的引用和新增的方法和属性。另一种就是丢弃原有对象&nbsp;A&nbsp;的引用，建立一个新的对象 A+，在新对象 A+&nbsp;里重新组合原有对象&nbsp;A&nbsp;的方法和属性。显然，前者可以让 A+&nbsp;获得 A 升级后的新方法和属性，后者则不行，因为后者定死了对象&nbsp;A&nbsp;方法名和属性名。</span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">可想而知，jQuery 是用后者来对 XHR 做二次封装的，所以当 XHR 2.0 提供了一个新属性（response）来提供对二进制数据的支持时，此时的 jQuery 是心有余而力不足的——它拿不到这个属性。这也就是它为什么用&nbsp;XHR&nbsp;2.0 发 Ajax 请求 还是不支持传输二进制数据的原因了。</span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">题外话：在我看来，显然第一种更好，扩展性强，至于为什么 jQuery 没有用第一种方式，应该有它的考量，这个就暂不深究了。</span></div></div></div></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b>低版本</b><b> (1.4) </b><b>jQuery</b><b> 怎么文件</b><b>下载</b><b>？</b></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b></span></div></div></div></div><blockquote style="text-align: left;"><div><div><div><div><span><b>传输的数据为</b></span><span><b style="color:rgb(255, 104, 32)"></b></span><span><b>二进制</b></span><span><b></b></span><span><b>的前提下：</b></span></div></div></div></div></blockquote><blockquote style="text-align: left;"><blockquote><div><div><div><div><span data-wiz-span="data-wiz-span">方法一：升级 jQuery 到完美支持原生 XHR 2.0 的版本。</span></div></div></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><div><div><span data-wiz-span="data-wiz-span">方法二：用原生 XHR 2.0。</span></div></div></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><div><div><span data-wiz-span="data-wiz-span">方法三：修改&nbsp;MIME Type，把二进制作为文本接收后再还原。详见当前笔记《Q：XHR 1.0 时代怎么上传、下载文件的》。</span></div></div></div></div></blockquote></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><b>传输的数据</b><b></b><b>为</b><b></b><b>字符串</b><b></b><b>的前提下：</b></div></div></div></div></blockquote><blockquote style="text-align: left;"><blockquote><div><div><div><div><span data-wiz-span="data-wiz-span">方法一：用 byte 转 int 或 char 的编码方式把二进制转为字符串传输。</span></div></div></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><div><div><span data-wiz-span="data-wiz-span">方法二：用 Base64 等编码方式把二进制转为字符串传输。</span></div></div></div></div></blockquote></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">Q：</span></b><b>jQuery ajax 中都支持哪些数据类型？</b></div></div><div style="text-align: left;"><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b><span data-wiz-span="data-wiz-span">xml、html、jsonp、json 等等。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b>jQuery 文件下载的常用方法：</b></span></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b></div></div><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">低</span>版本 jQuery（XHR 1.0）：修改 MIME 伪装二进制为文本数据，或用 Base64 编码二进制为字符串。详见当前笔记<u>《Q：低版本 (1.4) jQuery 怎么文件下载？》</u></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">高</span>版本 jQuery（XHR 2.0）：使用&nbsp;xhr.responseType 指定数据为二进制。详见当前笔记<u>《XHR response 数据类型的指定》</u></span></div></div></blockquote><div style="text-align: left;"><div><br></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><b>Ref：</b></div></div><blockquote style="text-align: left;"><div><a href="https://blog.csdn.net/discoveryunknown/article/details/53735712"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《csdn - 【jQuery】【ajax】不能传输二进制！》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.jb51.net/article/173065.htm"><span data-wiz-span="data-wiz-span">《jb51 - JQuery 实现文件下载的常用方法分析》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://api.jquery.com/jquery.ajax/"><span data-wiz-span="data-wiz-span">《jquery - jQuery.ajax()》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.jb51.net/article/173065.htm"><span data-wiz-span="data-wiz-span">《jb51 - JQuery 实现文件下载的常用方法分析》</span></a></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><a href="https://blog.csdn.net/SqrsCbrOnly1/article/details/91380525"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;jQuery 对ajax的三层封装》</span></a></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><a href="https://stackoverflow.com/questions/14322984/differences-between-contenttype-and-datatype-in-jquery-ajax-function"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《stackoverflow - jQuery ajax 函数中 contentType 和 dataType 的区别》</span></a><span data-wiz-span="data-wiz-span">&nbsp;</span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.nowcoder.com/questionTerminal/75a61e3650b04027abf11effdfe05b93?toCommentId=1540694"><span data-wiz-span="data-wiz-span">《牛客网 - jquery ajax中都支持哪些数据类型？》</span></a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><h3><span data-wiz-span="data-wiz-span">XHR&nbsp;使用的底层传输协议</span></h3></div><div style="text-align: left;"><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/bc251016-9885-4d6c-b07f-6d8b340c4397.png"></div><div style="text-align: center;">图 1 - XHR 底层传输协议</div><div><br></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">它通过 HTTP 或 HTTPS 请求 XML 文档。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">您可以在&nbsp;</span><a href="http://www.w3.org/TR/XMLHttpRequest"><span data-wiz-span="data-wiz-span"><font><font><span data-wiz-span="data-wiz-span">RFC </span></font></font></span></a><span data-wiz-span="data-wiz-span">中查看所有详细信息。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><b>Ref：</b></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; </span><a href="https://stackoverflow.com/questions/7186647/what-is-the-underlying-transport-protocol-used-by-xmlhttprequest"><span data-wiz-span="data-wiz-span">《stackoverflow - XMLHttpRequest 使用的底层传输协议是什么？》</span></a><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;<br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><b>XHR&nbsp;</b><b>与&nbsp;</b><b></b><b>Http</b></h3></div></div><div style="text-align: left;"><div><div><div style="text-align: center;"><br></div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/1f742078-85c0-4e46-b612-f4d66fa964ed.jpg"></div><div style="text-align: center;">图 1 - XHR 与 HTTP 的关系</div><div style="text-align: center;"><br></div></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR</span><span data-wiz-span="data-wiz-span"> 与 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http</span><span data-wiz-span="data-wiz-span"> 不是一个类型的东西，没可比性。它们的关系是：XMLHttpRequest 发的请求（如 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Ajax</span><span data-wiz-span="data-wiz-span">）是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http</span><span data-wiz-span="data-wiz-span"> 协议的。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 1.0</span><span data-wiz-span="data-wiz-span"> 与 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http 1.0</span><span data-wiz-span="data-wiz-span"> 没有半毛钱关系。</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR</span><span data-wiz-span="data-wiz-span"> 的版本有 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">1.0</span><span data-wiz-span="data-wiz-span"> 和 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">2.0</span><span data-wiz-span="data-wiz-span">，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http</span><span data-wiz-span="data-wiz-span"> 的版本有 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">0.9</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">1.0</span><span data-wiz-span="data-wiz-span">、</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">1.1</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">2.0</span><span data-wiz-span="data-wiz-span">，它们之间没有任何关系。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 1.0</span><span data-wiz-span="data-wiz-span"> 诞生的时间是 2006 年；</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 2.0</span><span data-wiz-span="data-wiz-span"> 的诞生时间是 2008 年，在 2012 有了用 </span>Wddeb IDL<span data-wiz-span="data-wiz-span"> 定义的标准，在 2014 年由 W3C 正式发布它的规范。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http 1.0</span><span data-wiz-span="data-wiz-span"> 诞生的时间是 1996 年；</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http 2.0</span><span data-wiz-span="data-wiz-span"> 的诞生时间是 2015 年。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);" data-wiz-span="data-wiz-span">Web IDL</span><span data-wiz-span="data-wiz-span">：它是一种<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">接口描述</span>语言(Interface Description Language) 格式，用于描述旨在在 Web 浏览器中实现的应用程序编程接口(API)。</span></div></div></div><blockquote><div style="text-align: left;">它的表现形式如下图代码所示：</div></blockquote><div style="text-align: left;"><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/d08a48a4-87df-464a-8f09-9ad9532b5c59.png"></div><div style="text-align: center;">图 1 - Web API Blob 的 Web IDL 定义</div></div><blockquote><div style="text-align: left;"><div style="text-align: left;">图中，中括号里包的是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);"> [扩展属性]</span>，可以用扩展属性做一些事情。在这里，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">[Serializable]</span> 这个扩展属性应该就是让接口具备序列化功能。因为文档里说了被这个扩展属性修饰过的对象，都是说可以序列化的对象。Java 里也有这种操作，但它用的是继承，不过继承后不用你去实现序列化，Java 会帮你实现。所以在这里，我想这个 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">[扩展属性]</span> 的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">意义</span>就是这个——<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">继承 Serializable</span><span>&nbsp;</span><span>接口</span><span>&nbsp;</span>。所以这个 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">[扩展属性] </span>可以看做是像 Java 里那样，继承了 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Serializable</span> 接口。</div><div style="text-align: left;">关于 WebIDL 的语法规则网上少之又少，不过可以看<span>英文的</span><span>官方</span><span>&nbsp;</span>W3C 规范文档&nbsp;<a href="https://www.w3.org/TR/WebIDL-1/#interface-object">《W3C - WebIDL Level 1》</a>。</div></div></blockquote><div style="text-align: left;"><div><br></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>Ref：</b></span></div></div></div><blockquote style="text-align: left;"><div><div><a href="https://www.w3.org/TR/XMLHttpRequest/"><span data-wiz-span="data-wiz-span">《w3 - XMLHttpRequest Level 1》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.jianshu.com/p/7dc28f991f99"><span data-wiz-span="data-wiz-span">《简书 - 前端必备HTTP技能之XMLHttpRequest对象详解》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://en.wikipedia.org/wiki/XMLHttpRequest"><span data-wiz-span="data-wiz-span">《wikipedia - XMLHttpRequest》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html"><span data-wiz-span="data-wiz-span">《XMLHttpRequest Level 2 使用指南》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://en.wikipedia.org/wiki/Web_IDL"><span data-wiz-span="data-wiz-span">《wikipedia - WebIDL》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="http://c.biancheng.net/view/5995.html"><span data-wiz-span="data-wiz-span">《C语言中文 -&nbsp;JS XMLHttpRequest入门教程（非常详细）》</span></a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><a href="http://c.biancheng.net/view/6080.html">《C语言中文 -&nbsp;JS XMLHttpRequest 2.0版本新特性》</a></span></div><div><a href="https://w3c.github.io/FileAPI/#blob">《github - w3c File API - The Blob Interface and Binary Data》</a></div><div><a href="https://www.w3.org/TR/WebIDL-1/#interface-object" style="text-decoration-skip-ink: none;">《W3C - WebIDL Level 1》</a></div><div><a href="https://blog.csdn.net/hunter___/article/details/80273466">《csdn - idl:语法详解》</a></div><div><a href="https://blog.ihomura.cn/2019/07/29/Web-IDL-%E7%AE%80%E4%BB%8B/">《个人博客 - Web IDL 简介》</a></div></blockquote><div style="text-align: left;"><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h4>responseType 与 Content-Tyep 的区别</h4><div><br></div><div><span>responseType 是 XHR 的属性，用来指定服务器响应的数据类型。</span></div><div><span>在这里要注意，虽然这句话广为流传，而且 MDN 上也是这句话，但这句话有歧义。</span></div><div><span>这句话不是叫服务器返回指定的类型，而是按照你指定的类型解析响应的数据。</span></div><div><span>responseType 如果不设置，默认是 json 还是 text 来着。</span></div><div><span>XHR 会且只会根据 responseType 指定的类型来解读响应的数据，如果在文件下载时不指定正确的&nbsp;</span><span>responseType 或者不指定<span>&nbsp;</span></span><span>responseType<span>&nbsp;</span></span><span>，那么即使服务器给你返回正确的 Content-Type 如<span>&nbsp;</span></span><span>Content-Type</span><span>: application/octet-stream 也无力回天，因为 XHR 压根不会理会 response 的 Content-Type。</span></div><div><span>Content-Type 是&nbsp;</span><span>Http Header 中的内容，与 XHR 的&nbsp;</span><span>responseType<span>&nbsp;是两个范畴的东西。</span></span></div><div><span>Http Header 中的 Content-Type 只是标识数据的 MIME 类型（可以简单理解为文件类型），</span><span>response Header<span>&nbsp; 中的 Content-Type 是</span></span><span>用于某个程序打开文件的时候用的，而不是浏览器接收文件的时候用的。浏览器（XHR）在接收数据的时候压根不会关心 response 里的 Content-Type 是什么，只有在打开文件的时候才会去看一下。</span></div><div><span><br></span></div><div><span><div><span>XHR 重写&nbsp;</span><span>request 或 response 的 Content-Type 的方法分别是 XHR.setRequestHeader 和 XHR.overrideMimeType()。</span></div><div><span>用了&nbsp;</span><span>XHR.overrideMimeType()，会覆盖 XHR.responseType 的设置和 response Content-Type 的内容，也就是说，</span><span>overrideMimeType() 优先级高于&nbsp;</span><span>responseType。</span></div><div><span>axios&nbsp;</span><span>重写&nbsp;</span><span>request 或 response<span>&nbsp;的 Content-Type 的方法跟 XHR 不一样，这里就不一一举例了。</span></span></div><div><br></div><div><span><div><span>Http request 和 response 的 header 里的 Content-Type 只是一种数据标识，标识自己的内容是什么，并不能强制对方给我相应的数据。这个标识一是方便浏览器发送数据，二是方便服务器知道数据类型，三是方便浏览器打开数据。</span></div><div><br></div><div><span>阮一峰老师这样描述&nbsp;</span>responseType：“这个属性的值是告诉服务器返回指定类型的数据。”</div><div>其实这是错误的解释，就算要告诉，在http 请求里，你拿什么信息告诉服务器你要的数据类型？Content-Type？</div><div>而且实践也证明了，当你不设置&nbsp;<span>responseType，那个下载 pdf 文件的接口并不会给你返回 text 数据，而依旧是 Content-Type 为&nbsp; application/pdf 的数据。</span></div><div><span>“当将responseType设置为一个特定的类型时，你需要确保服务器所返回的类型和你所设置的返回值类型是兼容的。”这句话，也可能证明</span><span>阮一峰老师这个描述是错误的。</span></div><div><br></div><div><br></div><div><br></div><div style=""><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">疑问：</span></b></div></span></div><br></span></div><div><b><span>Q：</span><span>前端能不能下载到真正的二进制数据，可以从浏览器后台的 request 和 response 的 header 中看出来吗？</span></b></div><div><span><b>A：</b></span></div><div>看不出来，因为你设置 XHR.<span>responseType</span><span>&nbsp;并不会重写 request 或 response 的 Content-Type。</span></div><div><span>你只能通过配置和返回结果来看：</span></div><blockquote><div><span>配置：</span></div><div>&nbsp; &nbsp; XHR：<span>查看 XHR 自身的</span><span>属性 responseType</span></div><div>&nbsp; &nbsp; axios：<span>查看 response 对象的</span><span>属性</span><span><span>&nbsp;</span>config&nbsp;</span></div><div><span>返回结果：</span></div><div><span><div>&nbsp; &nbsp; XHR：response 对象，如果&nbsp;<span>responseType 是 'blob'，</span><span>response 对象就是一个 Bolb 对象，而非实际的二进制数据。</span></div></span></div><div><span><div>&nbsp; &nbsp; axios：<span>response 还是&nbsp;</span><span>response.data 来着，不确定，可能都不是。这个待定。</span></div></span></div></blockquote><div><br></div><div><br></div><div><b>Q：responseType 会修改 content type 吗？</b></div><div><b>A：</b><br></div><div>不会，request 和 response 的都不会。</div><div><span><br></span></div><div><span><br></span></div><div><b>Q：reponseType 做了什么？</b></div><div><b>A：</b></div><div>设定 XHR对象，也就是浏览器，如何解读从服务器接收的数据。就这一件事。</div><div><br></div><div><br></div><div><b>Q：response Content-Type 对文件下载的影响？</b></div><div><b>A：</b></div><div>没有影响，浏览器下载文件时并不关心它，只有打开文件时才会关心它。</div><div>你的数据是什么类型，传过来就是什么类型，并不由你的 Content-Type 决定，Content-Type只是一个标识，你完全可以设置一个错误的标识，这个错误的标识这并不会改变数据原本的传输形式。</div><div><br></div><div><br></div><div><b>Q：<span>axios 中，</span>axios.defaults.headers.responseType 改变了什么呢？</b></div><div><b>A：</b></div><div>请求头，添加了一项头信息&nbsp;<span>responseType<span>&nbsp;。但这个项没有任何意义的。</span></span></div><div><div><img src="文件传输_基础知识（index）_files/36f9aca6-2aff-4459-993d-5a6e895bc496.png"></div><div><br></div></div><div><br></div><div><br></div><div><b>Q：下载文件时需要设置 UTF-8 吗？</b></div><div><b>A：</b>UTF-8、GBK 是字符编码，跟字符有关的，下载文件是下载二进制数据，<span data-wiz-span="data-wiz-span" style="font-size:0.938rem;">二进制数据没有编码的概念。</span></div><div><span data-wiz-span="data-wiz-span" style="font-size:0.938rem;">下载文件并不需要设置 UTF-8 这类字符编码，但打开文件的时候，如果是文本类文件，就会用到。</span></div><div><br></div><div><br></div><div><b>Q：下载文件的方式？</b></div><div><b>A：</b></div><div>高逼格的方式：</div><div>&nbsp; &nbsp;&nbsp;XHR +<span>&nbsp;</span><span>文件下载 URL +&nbsp;</span><span>Blob&nbsp;</span><span>+ window.URL +&nbsp;</span>&lt;a download&gt;</div><div>简单的方式：</div><div>&nbsp; &nbsp;&nbsp;window.location = 文件下载 URL （或&nbsp;<span>window.location.href）</span></div><div><span><br></span></div><div>第二种就是帆软中最常用的导出决策报表为 Excel 的方式，<span>window.location 一个下载链接时，浏览器地址栏不会变化，也不会跳转新页面，什么感觉都没有，唯一的感觉是弹出下载窗口。</span></div><div><br></div><div><br></div><div><br></div><div style=""><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;"><b>Ref：</b></span></div><div style=""><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;"><b><br></b></span></div><div><a href="https://blog.csdn.net/yudldl/article/details/83095523">《csdn - XMLHttpRequest 的 responseType 属性》</a><br></div><div><a href="https://juejin.cn/post/6844904129513422862" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">juejin - 前端下载后台返回的文件流,response为乱码</span>》</a><br></div><div><a href="https://blog.csdn.net/dongguan_123/article/details/100183284" style="text-decoration-skip-ink:none;">《csdn - 文件预览或下载中，axios设置responseType:blob时对于后台报错信息的捕获兼容》</a><br></div><div><a href="https://blog.csdn.net/weixin_45944917/article/details/109131007" style="text-decoration-skip-ink:none;">《csdn - 记导出文件类型responseType:blob的坑》</a><br></div><div><a href="https://www.cnblogs.com/jdWu-d/p/13410664.html" style="text-decoration-skip-ink:none;">《cnblogs - axios设置了responseType之后仍然接收不到正确的Blob对象》</a></div><div><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType" style="text-decoration-skip-ink:none;">《MDN - XMLHttpRequest &gt; XMLHttpRequest.responseType》</a></div><div><a href="https://stackoverflow.com/questions/32473892/xmlhttprequest-response-type-json" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">stackoverflow - XMLHttpRequest 响应类型和 JSON</span>》</a></div><div><a href="https://www.html5rocks.com/zh/tutorials/file/xhr2/" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">html5rocks - XMLHttpRequest2 新技巧</span>》</a></div><div><a href="https://blog.csdn.net/iteye_9007/article/details/82677432" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">csdn -&nbsp;</span><span style="color:rgb(0, 0, 0);">request和response中的content-type</span>》</a><br></div><div><div><a href="https://blog.csdn.net/u012894692/article/details/88846401" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">csdn -&nbsp;</span><span style="color:rgb(0, 0, 0);">http请求content-type与响应responseType</span>》</a><br></div><div><a href="https://segmentfault.com/a/1190000013056786" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">Http请求中的Content-Type</span>》</a><br></div><div><a href="https://segmentfault.com/a/1190000004322487" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">你真的会使用XMLHttpRequest吗？</span>》</a><br></div><div><a href="https://coding.imooc.com/learn/questiondetail/167837.html" style="text-decoration-skip-ink:none;">《imooc - 关于Content-type和responseType》</a><br></div></div><div><a href="http://javascript.ruanyifeng.com/bom/ajax.html#toc5" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">ruanyifeng -&nbsp;</span><span style="color:rgb(0, 0, 0);">AJAX</span>》</a><br></div><div><div><a href="https://segmentfault.com/q/1010000019043157" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">content-type 和 responseType 有什么区别？</span>》</a><br></div><div><a href="https://www.jianshu.com/p/d316e4b1ee4c" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">jianshu - axios config请求配置项</span>》</a><br></div><div><a href="https://www.cnblogs.com/aisowe/p/11558454.html" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">cnblogs - 怎样理解xhr.overrideMimeType()和xhr.responseType</span>》</a><br></div><div><a href="https://segmentfault.com/a/1190000015026760" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">前端利用Blob对象创建指定文件并下载</span>》</a><br></div></div><div><br></div><div><br></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><h3><span data-wiz-span="data-wiz-span">XHR response 数据类型的指定</span></h3></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">有些时候我们希望 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.response</span><span data-wiz-span="data-wiz-span"> 返回的就是我们想要的数据类型。比如：响应返回的数据是纯 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">JSON 字符串</span><span data-wiz-span="data-wiz-span">，但我们期望最终通过 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.response</span><span data-wiz-span="data-wiz-span"> 拿到的直接就是一个 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">js 对象</span><span data-wiz-span="data-wiz-span">，我们该怎么实现呢？</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">有2种方法可以实现：</span></div></div><blockquote style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">XHR <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">level 1</span> 就提供的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">overrideMimeType() </span><span data-wiz-span="data-wiz-span">&nbsp;方法</span></div></div></blockquote><blockquote style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">XHR <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">level 2</span> 才提供的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.responseType</span><span data-wiz-span="data-wiz-span"> 属性。</span></div></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">详见：</span><a href="https://blog.csdn.net/weixin_33885676/article/details/89443719?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《csdn - 你真的会使用XMLHttpRequest吗？》</span></a><span data-wiz-span="data-wiz-span">（原文</span><a href="https://segmentfault.com/a/1190000004322487"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《segmentfault - 你真的会使用XMLHttpRequest吗？》</span></a><span data-wiz-span="data-wiz-span">）</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><h4><b>xhr.overrideMimeType() 与 MIME Type</b></h4></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">虽然 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.responseType</span><span data-wiz-span="data-wiz-span"> 很强大，但是它的资料很多，也很易用，因此在这里主要谈谈 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">level1</span><span data-wiz-span="data-wiz-span"> 的&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">overrideMimeType()</span><span data-wiz-span="data-wiz-span">。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.overrideMimeType()</span><span data-wiz-span="data-wiz-span"> 的作用是用来修改 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">response</span><span data-wiz-span="data-wiz-span"> 的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">content-type</span><span data-wiz-span="data-wiz-span">&nbsp;的值，而 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">content-type</span><span data-wiz-span="data-wiz-span"> 的值就是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME</span><span data-wiz-span="data-wiz-span"> 标准的类型名称。</span></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">该方法 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 1.0</span><span data-wiz-span="data-wiz-span"> 中常用， 在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR 2.0</span><span data-wiz-span="data-wiz-span"> 中已被新增的功能更强大的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">responseType</span><span data-wiz-span="data-wiz-span"> 取代。因为 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.overrideMimeType()</span><span data-wiz-span="data-wiz-span"> 能做到的&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);"> xhr.responseType </span><span data-wiz-span="data-wiz-span">&nbsp;都能做到。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">详见：</span></div></div><blockquote style="text-align: left;"><div><div><a href="https://blog.csdn.net/weixin_33885676/article/details/89443719?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link"><span data-wiz-span="data-wiz-span">《csdn - 你真的会使用XMLHttpRequest吗？》</span></a><span data-wiz-span="data-wiz-span">（原文</span><a href="https://segmentfault.com/a/1190000004322487"><span data-wiz-span="data-wiz-span">《segmentfault - 你真的会使用XMLHttpRequest吗？》</span></a><span data-wiz-span="data-wiz-span">）</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">中的小节《如何指定xhr.response的数据类型 之 xhr.overrideMimeType()》</span></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><b>Ref：</b></div></div><blockquote style="text-align: left;"><div><div><a href="https://blog.csdn.net/weixin_37836947/article/details/60976618"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;AJAX overrideMimeType作用》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;</span></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><h3 style="">responseType 与 Content-Tyep 的区别</h3><div><br></div><div><br></div><div><br></div><div><span>responseType 是 XHR 的属性，用来指定服务器响应的数据类型。</span></div><div><span>在这里要注意，虽然这句话广为流传，而且 MDN 上也是这句话，但这句话有歧义。</span></div><div><span>这句话不是叫服务器返回指定的类型，而是按照你指定的类型解析响应的数据。</span></div><div><span>responseType 如果不设置，默认是 json 还是 text 来着。</span></div><div><span>XHR 会且只会根据 responseType 指定的类型来解读响应的数据，如果在文件下载时不指定正确的&nbsp;</span><span>responseType 或者不指定<span>&nbsp;</span></span><span>responseType<span>&nbsp;</span></span><span>，那么即使服务器给你返回正确的 Content-Type 如<span>&nbsp;</span></span><span>Content-Type</span><span>: application/octet-stream 也无力回天，因为 XHR 压根不会理会 response 的 Content-Type。</span></div><div><span>Content-Type 是&nbsp;</span><span>Http Header 中的内容，与 XHR 的&nbsp;</span><span>responseType<span>&nbsp;是两个范畴的东西。</span></span></div><div><span>Http Header 中的 Content-Type 只是标识数据的 MIME 类型（可以简单理解为文件类型），</span><span>response Header<span>&nbsp; 中的 Content-Type 是</span></span><span>用于某个程序打开文件的时候用的，而不是浏览器接收文件的时候用的。浏览器（XHR）在接收数据的时候压根不会关心 response 里的 Content-Type 是什么，只有在打开文件的时候才会去看一下。</span></div><div><span><br></span></div><div><span><div><span>XHR 重写&nbsp;</span><span>request 或 response 的 Content-Type 的方法分别是 XHR.setRequestHeader 和 XHR.overrideMimeType()。</span></div><div><span>用了&nbsp;</span><span>XHR.overrideMimeType()，会覆盖 XHR.responseType 的设置和 response Content-Type 的内容，也就是说，</span><span>overrideMimeType() 优先级高于&nbsp;</span><span>responseType。</span></div><div><span>axios&nbsp;</span><span>重写&nbsp;</span><span>request 或 response<span>&nbsp;的 Content-Type 的方法跟 XHR 不一样，这里就不一一举例了。</span></span></div><div><br></div><div><span><div><span><br></span></div><div><span>Http request 和 response 的 header 里的 Content-Type 只是一种数据标识，标识自己的内容是什么，并不能强制对方给我相应的数据。这个标识一是方便浏览器发送数据，二是方便服务器知道数据类型，三是方便浏览器打开数据。</span></div><div><br></div><div><br></div><div><span>阮一峰老师这样描述&nbsp;</span>responseType：“这个属性的值是告诉服务器返回指定类型的数据。”</div><div>其实这是错误的解释，就算要告诉，在http 请求里，你拿什么信息告诉服务器你要的数据类型？Content-Type？</div><div>而且实践也证明了，当你不设置&nbsp;<span>responseType，那个下载 pdf 文件的接口并不会给你返回 text 数据，而依旧是 Content-Type 为&nbsp; application/pdf 的数据。</span></div><div><span>“当将responseType设置为一个特定的类型时，你需要确保服务器所返回的类型和你所设置的返回值类型是兼容的。”这句话，也可能证明</span><span>阮一峰老师这个描述是错误的。</span></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1 style="font-size:1.67rem;"><b>疑问：</b></h1><br></span></div><br></span></div><div><b><span>Q：</span><span>前端能不能下载到真正的二进制数据，可以从浏览器后台的 request 和 response 的 header 中看出来吗？</span></b></div><div><span><b>A：</b></span></div><div>看不出来，因为你设置 XHR.<span>responseType</span><span>&nbsp;并不会重写 request 或 response 的 Content-Type。</span></div><div><span>你只能通过配置和返回结果来看：</span></div><blockquote><div><span>配置：</span></div><div>&nbsp; &nbsp; XHR：<span>查看 XHR 自身的</span><span>属性 responseType</span></div><div>&nbsp; &nbsp; axios：<span>查看 response 对象的</span><span>属性</span><span><span>&nbsp;</span>config&nbsp;</span></div><div><span>返回结果：</span></div><div><span><div>&nbsp; &nbsp; XHR：response 对象，如果&nbsp;<span>responseType 是 'blob'，</span><span>response 对象就是一个 Bolb 对象，而非实际的二进制数据。</span></div></span></div><div><span><div>&nbsp; &nbsp; axios：<span>response 还是&nbsp;</span><span>response.data 来着，不确定，可能都不是。这个待定。</span></div></span></div></blockquote><div><br></div><div><br></div><div><br></div><div><b>Q：responseType 会修改 content type 吗？</b></div><div><b>A：</b><br></div><div>不会，request 和 response 的都不会。</div><div><span><br></span></div><div><b>Q：reponseType 做了什么？</b></div><div><b>A：</b></div><div>设定 XHR对象，也就是浏览器，如何解读从服务器接收的数据。就这一件事。</div><div><br></div><div><br></div><div><b>Q：response Content-Type 对文件下载的影响？</b></div><div><b>A：</b></div><div>没有影响，浏览器下载文件时并不关心它，只有打开文件时才会关心它。</div><div>你的数据是什么类型，传过来就是什么类型，并不由你的 Content-Type 决定，Content-Type只是一个标识，你完全可以设置一个错误的标识，这个错误的标识这并不会改变数据原本的传输形式。</div><div><br></div><div><br></div><div><b>Q：<span>axios 中，</span>axios.defaults.headers.responseType 改变了什么呢？</b></div><div><b>A：</b></div><div>请求头，添加了一项头信息&nbsp;<span>responseType<span>&nbsp;。但这个项没有任何意义的。</span></span></div><div><div><img src="文件传输_基础知识（index）_files/36f9aca6-2aff-4459-993d-5a6e895bc496.png"></div><div><br></div></div><div><br></div><div><br></div><div><b>Q：下载文件时需要设置 UTF-8 吗？</b></div><div><b>A：</b>UTF-8、GBK 是字符编码，跟字符有关的，下载文件是下载二进制数据，<span data-wiz-span="data-wiz-span" style="font-size:0.938rem;">二进制数据没有编码的概念。</span></div><div><span data-wiz-span="data-wiz-span" style="font-size:0.938rem;">下载文件并不需要设置 UTF-8 这类字符编码，但打开文件的时候，如果是文本类文件，就会用到。</span></div><div><br></div><div><br></div><div><br></div><div><b>Q：下载文件的方式？</b></div><div><b>A：</b></div><div>高逼格的方式：</div><div>&nbsp; &nbsp;&nbsp;XHR +<span>&nbsp;</span><span>文件下载 URL +&nbsp;</span><span>Blob&nbsp;</span><span>+ window.URL +&nbsp;</span>&lt;a download&gt;</div><div>简单的方式：</div><div>&nbsp; &nbsp;&nbsp;window.location = 文件下载 URL （或&nbsp;<span>window.location.href）</span></div><div><span><br></span></div><div>第二种就是帆软中最常用的导出决策报表为 Excel 的方式，<span>window.location 一个下载链接时，浏览器地址栏不会变化，也不会跳转新页面，什么感觉都没有，唯一的感觉是弹出下载窗口。</span></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1 style="font-size:1.67rem;">Ref：</h1><div><br></div><div><a href="https://blog.csdn.net/yudldl/article/details/83095523" style="text-decoration-skip-ink:none;">《csdn - XMLHttpRequest 的 responseType 属性》</a></div><div><a href="https://juejin.cn/post/6844904129513422862" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">juejin - 前端下载后台返回的文件流,response为乱码</span>》</a><br></div><div><a href="https://blog.csdn.net/dongguan_123/article/details/100183284" style="text-decoration-skip-ink:none;">《csdn - 文件预览或下载中，axios设置responseType:blob时对于后台报错信息的捕获兼容》</a><br></div><div><a href="https://blog.csdn.net/weixin_45944917/article/details/109131007" style="text-decoration-skip-ink:none;">《csdn - 记导出文件类型responseType:blob的坑》</a><br></div><div><a href="https://www.cnblogs.com/jdWu-d/p/13410664.html" style="text-decoration-skip-ink:none;">《cnblogs - axios设置了responseType之后仍然接收不到正确的Blob对象》</a></div><div><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType" style="text-decoration-skip-ink:none;">《MDN - XMLHttpRequest &gt; XMLHttpRequest.responseType》</a></div><div><a href="https://stackoverflow.com/questions/32473892/xmlhttprequest-response-type-json" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">stackoverflow - XMLHttpRequest 响应类型和 JSON</span>》</a></div><div><a href="https://www.html5rocks.com/zh/tutorials/file/xhr2/" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">html5rocks - XMLHttpRequest2 新技巧</span>》</a></div><div><a href="https://blog.csdn.net/iteye_9007/article/details/82677432" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">csdn -&nbsp;</span><span style="color:rgb(0, 0, 0);">request和response中的content-type</span>》</a><br></div><div><div><a href="https://blog.csdn.net/u012894692/article/details/88846401" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">csdn -&nbsp;</span><span style="color:rgb(0, 0, 0);">http请求content-type与响应responseType</span>》</a><br></div><div><a href="https://segmentfault.com/a/1190000013056786" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">Http请求中的Content-Type</span>》</a><br></div><div><a href="https://segmentfault.com/a/1190000004322487" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">你真的会使用XMLHttpRequest吗？</span>》</a><br></div><div><a href="https://coding.imooc.com/learn/questiondetail/167837.html" style="text-decoration-skip-ink:none;">《imooc - 关于Content-type和responseType》</a><br></div></div><div><a href="http://javascript.ruanyifeng.com/bom/ajax.html#toc5" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">ruanyifeng -&nbsp;</span><span style="color:rgb(0, 0, 0);">AJAX</span>》</a><br></div><div><div><a href="https://segmentfault.com/q/1010000019043157" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">content-type 和 responseType 有什么区别？</span>》</a><br></div><div><a href="https://www.jianshu.com/p/d316e4b1ee4c" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">jianshu - axios config请求配置项</span>》</a><br></div><div><a href="https://www.cnblogs.com/aisowe/p/11558454.html" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">cnblogs - 怎样理解xhr.overrideMimeType()和xhr.responseType</span>》</a><br></div><div><a href="https://segmentfault.com/a/1190000015026760" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">前端利用Blob对象创建指定文件并下载</span>》</a><br></div></div><div><br></div><div><br></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><h2><a wiznote_tag="windows_bookmark" wiznote_add_time="1639712538486" name="Http">Http</a></h2></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><h3><b>Http 协议与 H</b><b></b><b>ttp</b><b> 请求</b></h3></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP 协议</span><span data-wiz-span="data-wiz-span">&nbsp;≠&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP 请求</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">协议</span><span data-wiz-span="data-wiz-span">&nbsp;是通信规范、通信规则，只要你按照这个规则，你发什么数据都可以。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">请求</span><span data-wiz-span="data-wiz-span">&nbsp;是用某种协议制作出一个请求，请求里包含协议版本、参数的数据，请求制作好后发送给服务器去处理。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><h3 style="text-align: left;"><span data-wiz-span="data-wiz-span">Http 传输（纯）二进制</span></h3></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">HTTP 协议能<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">发送（纯）二进制数据</span>吗？支持文件上传吗？</span></div></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">你如果问 HTTP 协议能发送二进制数据吗？那么这问得就很二笔，HTTP 协议发送的数据包都是 IP 协议数据包，是二进制的形式的，你说它能不能</span></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">发二进制数据？你应该问以前的&nbsp;HTTP 协议是否支持文件上传？那答案是什么呢？</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);" data-wiz-span="data-wiz-span">http 0.9</span><span data-wiz-span="data-wiz-span"> 是不支持非文本的（只能是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">ASCII</span> 字符）数据传输，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">http 1.0&nbsp;</span><span data-wiz-span="data-wiz-span">开始才支持的，而且是</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">纯二进制</span><span data-wiz-span="data-wiz-span">，注意，是纯的，不是 ASCII 字符转换的。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">不论 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP</span><span data-wiz-span="data-wiz-span"> 传输的是字符串还是二进制数据，到了 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">TCP</span><span data-wiz-span="data-wiz-span"> 层都以二进制传输</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">当 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP</span><span data-wiz-span="data-wiz-span"> 只能传字符串时，如果要用 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP</span><span data-wiz-span="data-wiz-span"> 传文件，那么需要有一个字符串和二进制转换的过程，例如将二进制数据通过 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Base64&nbsp;</span><span data-wiz-span="data-wiz-span">等编码方式转换为字符串，最后再反转回来。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><h4><span><b>Http 数据类型——MIME Type</b></span></h4></div><div style="text-align: left;"><div><span><b>1、概念：</b></span></div></div><div style="text-align: left;"><div style="text-align: left;"><font><span style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);" data-wiz-span="data-wiz-span">MIME</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">(Multipurpose Internet Mail Extensions) 多用途互联网</span></font><font></font><font><span data-wiz-span="data-wiz-span">邮件扩展</span></font><font></font><font><span data-wiz-span="data-wiz-span">类型，</span></font><font></font><font><span data-wiz-span="data-wiz-span">人话</span></font><font></font><font><span data-wiz-span="data-wiz-span">就是“</span></font><font></font><font><span data-wiz-span="data-wiz-span">文件类型</span></font><font></font><font><span data-wiz-span="data-wiz-span">”。它是一种文件类型标识符的规范，在此规范下有许多具体的文件类型标识符，例如 "application/otcet-stream" 表示二进制，"image/gif" 表示 gif 文件类型。在 HTTP 报头中，它不是字段名，而是字段值。</span></font><font></font><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div style="text-align: left;"><font><span data-wiz-span="data-wiz-span">这个 </span></font><font><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME</span></font><font><span data-wiz-span="data-wiz-span"> 既可以是服务端告诉客户端，也可以是客户端告诉服务端。</span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">最早的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP 协议 (0.9)</span><span data-wiz-span="data-wiz-span"> 中，并没有附加的数据类型信息（因为不支持 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Header</span><span data-wiz-span="data-wiz-span">），所有传送的数据都被</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">客户程序</span><span data-wiz-span="data-wiz-span">（浏览器）解释为 HTML (超文本标记语言)&nbsp;文档。后来支持多媒体数据类型后，为了区分</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">多媒体文件</span><span data-wiz-span="data-wiz-span">的数据类型，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">HTTP</span><span data-wiz-span="data-wiz-span"> 使用&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Header</span><span data-wiz-span="data-wiz-span">&nbsp;中的&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME Type</span><span data-wiz-span="data-wiz-span">&nbsp;来标识数据类型。</span></div></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><div><span data-wiz-span="data-wiz-span"><br></span></div></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">简而言之，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME</span><span data-wiz-span="data-wiz-span">&nbsp;只是一个数据类型的描述，如果是服务端告诉客户端，则是决定文件的</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">打开方式</span><span data-wiz-span="data-wiz-span">；反之，则是决定文件的</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">解读方式</span><span data-wiz-span="data-wiz-span">。</span></div></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><b>1.1、服务端告诉客户端的情况——请求头中的 Content-Type（</b></font><font><b style="color:rgb(255, 104, 32)"></b></font><font><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">非常重要</span></b></font><font><b></b></font><font><b>）：</b></font><font></font><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 </span></font><font><span data-wiz-span="data-wiz-span">HTML</span></font><font><span data-wiz-span="data-wiz-span">、有 </span></font><font><span data-wiz-span="data-wiz-span">XML</span></font><font><span data-wiz-span="data-wiz-span">、有 </span></font><font><span data-wiz-span="data-wiz-span">GIF</span></font><font><span data-wiz-span="data-wiz-span">、还有 </span></font><font><span data-wiz-span="data-wiz-span">Flash</span></font><font><span data-wiz-span="data-wiz-span"> ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示的呢？</span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">答案就是 </span></font><font><span data-wiz-span="data-wiz-span">MIME Type</span></font><font></font><font><span data-wiz-span="data-wiz-span">，也就是该资源的</span></font><font></font><font><span data-wiz-span="data-wiz-span">媒体类型</span></font><font><span data-wiz-span="data-wiz-span">。</span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">媒体类型</span></font><font></font><font><span data-wiz-span="data-wiz-span">通常是通过 HTTP 协议，</span></font><font></font><font><span data-wiz-span="data-wiz-span">由 Web 服务器告知浏览器</span></font><font></font><font><span data-wiz-span="data-wiz-span">的，更准确地说，是通过 </span></font><font></font><font><span data-wiz-span="data-wiz-span">Content-Type</span></font><font><span data-wiz-span="data-wiz-span"> 来表示的，例如:</span></font></div></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637242745389_8705" class="wiz-code-container"><textarea style="display:none;">Content-Type: text/HTML</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637242745389_8705"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 32px; min-width: 184.094px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Content</span><span class="cm-operator">-</span><span class="cm-variable">Type</span>: <span class="cm-variable">text</span><span class="cm-operator">/</span><span class="cm-variable">HTML</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 32px;"></div><div class="CodeMirror-gutters" style="height: 62px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">它表示内容是 HTML 类型。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">为什么是 “text/HTML” 而不是 “HTML/text” 或者别的什么？</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">因为这不是个人自定义的，而是 ietf 组织以 RFC 形式制定的标准，大多数 Web 服务器、用户代理、客户端（浏览器）都会支持这个标准。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">顺便说一句，Email 附件的类型也是通过 MIME Type 指定的。</span></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">MIME Type 在服务端告知客户端的情况下，就是设定某种扩展名的&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">文件</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;用哪一种&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">应用程序</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">打开</span></font><font></font><font><span data-wiz-span="data-wiz-span">，当该扩展名&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">文件</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;被访问的时候，&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">浏览器</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;会自动使用</span></font><font></font><font><span data-wiz-span="data-wiz-span">指定应用程序来打开</span></font><font></font><font><span data-wiz-span="data-wiz-span">。MIME Type</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">多用于</span></font><font></font><font><span data-wiz-span="data-wiz-span">指定一些</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">客户端自定义的文件名</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;，以及一些&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">媒体文件</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">打开方式</span></font><font></font><font><span data-wiz-span="data-wiz-span">。</span></font><font></font><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">通常只有一些在互联网上获得广泛应用的文件格式才会获得一个 MIME Type，如果是某个</span></font><font><span data-wiz-span="data-wiz-span">客户端自己定义的格式</span></font><font><span data-wiz-span="data-wiz-span">，一般只能以 </span></font><font><span data-wiz-span="data-wiz-span">application/x-</span></font><font><span data-wiz-span="data-wiz-span"> 开头。</span></font></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">XHTML 就是一个例子，它是一个获得广泛应用的格式，因此在 RFC 3236 规范中对它的 MIME Type 做了定义：</span></div></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637243202095_2715" class="wiz-code-container"><textarea style="display:none;">application/xHTML+XML。</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637243202095_2715"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 32px; min-width: 182.672px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">application</span><span class="cm-operator">/</span><span class="cm-variable">xHTML</span><span class="cm-operator">+</span><span class="cm-variable">XML。</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 32px;"></div><div class="CodeMirror-gutters" style="height: 62px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">如果 Header 中</span></font><font></font><font><span data-wiz-span="data-wiz-span">没有</span></font><font><span data-wiz-span="data-wiz-span"> </span></font><font><span data-wiz-span="data-wiz-span">MIME Type</span></font><font></font><font><span data-wiz-span="data-wiz-span">&nbsp;</span></font><font></font><font><span data-wiz-span="data-wiz-span">告诉</span></font><font><span data-wiz-span="data-wiz-span">浏览器文件类型，浏览器会怎么做？</span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span">浏览器会做一些</span></font><font><span data-wiz-span="data-wiz-span">默认处理</span></font><font><span data-wiz-span="data-wiz-span">，比如使用</span></font><font><span data-wiz-span="data-wiz-span">操作系统</span></font><font><span data-wiz-span="data-wiz-span">中配置的 MIME Type 。你可以在 Windows </span></font><font><span data-wiz-span="data-wiz-span">注册表</span></font><font></font><font><span data-wiz-span="data-wiz-span">“HKEY_LOCAL_MACHINE/SOFTWARE/Classes/MIME/Database/</span></font><font></font><font><span data-wiz-span="data-wiz-span">Content Type</span></font><font></font><font><span data-wiz-span="data-wiz-span">”的</span></font><font></font><font><span data-wiz-span="data-wiz-span">主键</span></font><font><span data-wiz-span="data-wiz-span">中看到 </span></font><font><span data-wiz-span="data-wiz-span">MIME Type</span></font><font><span data-wiz-span="data-wiz-span"> 有关的所有配置信息。</span></font></div></div><div style="text-align: left;"><div><font><span data-wiz-span="data-wiz-span"><br></span></font></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span><b>1.2、客户端</b></span><span><b></b></span><span><b>告诉</b></span><span><b></b></span><span><b>服务端的情况</b></span><span><b></b></span><span><b>——响应头中的 Content-Type（</b></span><span><b style="color:rgb(127, 127, 127)"></b></span><span><b><span data-wiz-span="data-wiz-span" style="color: rgb(102, 102, 102);">不常用</span></b></span><span><b></b></span><span><b>）</b></span><span><b></b></span><span><b>：</b></span><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">首先谈谈为什么我们需要在请求中设置&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(127, 127, 127)" data-wiz-span="data-wiz-span">Content-Type</span><span data-wiz-span="data-wiz-span">，而<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不仅仅是响应中</span>。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">如果服务器允许并接受多种类型的内容，在请求中设置 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Content-Type</span><span data-wiz-span="data-wiz-span"> 告诉服务器<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">数据类型</span>，服务器就知道该以怎样的方式（或是格式）<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">解析</span>这个数据。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">例如用 html </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">form 表单</span><span data-wiz-span="data-wiz-span">给服务器发数据的时候，你发送的是文本还是文件的二进制流，就需要告诉服务器，否则服务器就会错误解析你的数据。</span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637253212028_5142" class="wiz-code-container"><textarea style="display:none;"> &lt;form action="./login" method="POST"&gt;
    &lt;input type="text" name="user-name"/&gt;
    &lt;input type="tel" name="user-tel"/&gt;
    &lt;input type="submit"/&gt;
 &lt;/form&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637253212028_5142"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 128px; min-width: 322.672px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>5</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"> <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">action</span>=<span class="cm-string">"./login"</span> <span class="cm-attribute">method</span>=<span class="cm-string">"POST"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"text"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"user-name"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"tel"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"user-tel"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"> <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 128px;"></div><div class="CodeMirror-gutters" style="height: 158px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">form 表单&nbsp;</span><span data-wiz-span="data-wiz-span">会给请求头信息中增加 Content-Type：</span></div><div style="text-align: left;"><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/a55fc8df-2f22-4eb6-81f7-fd09993defbe.png"></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">form 表单&nbsp;</span><span data-wiz-span="data-wiz-span">所用的类型标识符一共 3 个：</span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637251770498_7438" class="wiz-code-container"><textarea style="display:none;">Content-Type: application/x-www-form-urlencoded		// 文本
Content-Type: multipart/form-data					// 二进制流，需要在表单中进行文件上传时，就需要使用这个
Content-Type: text/plain							// 文本，但网上有人说永远不要使用这个值，因为不会被可靠地解析。原因不明。</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637251770498_7438"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 950px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 80px; min-width: 920.469px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>3</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Content</span><span class="cm-operator">-</span><span class="cm-variable">Type</span>: <span class="cm-variable">application</span><span class="cm-operator">/</span><span class="cm-variable">x</span><span class="cm-operator">-</span><span class="cm-variable">www</span><span class="cm-operator">-</span><span class="cm-variable">form</span><span class="cm-operator">-</span><span class="cm-variable">urlencoded</span><span class="cm-tab" role="presentation" cm-text="	"> </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 文本</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Content</span><span class="cm-operator">-</span><span class="cm-variable">Type</span>: <span class="cm-variable">multipart</span><span class="cm-operator">/</span><span class="cm-variable">form</span><span class="cm-operator">-</span><span class="cm-variable">data</span><span class="cm-tab" role="presentation" cm-text="	">   </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 二进制流，需要在表单中进行文件上传时，就需要使用这个</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Content</span><span class="cm-operator">-</span><span class="cm-variable">Type</span>: <span class="cm-variable">text</span><span class="cm-operator">/</span><span class="cm-variable">plain</span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 文本，但网上有人说永远不要使用这个值，因为不会被可靠地解析。原因不明。</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 80px;"></div><div class="CodeMirror-gutters" style="height: 110px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">当然，这个场景下搞<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">自定义的格式</span>也是完全可以的，只要跟后端商定好类型标识符就行。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><blockquote style="text-align: left;"><div><div><b>Ref：</b></div></div></blockquote><blockquote style="text-align: left;"><blockquote><div><div><div><a href="https://juejin.cn/post/6844903957593063432"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《知乎 - HTTP请求头的Content-Type字段》</span></a></div></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://stackoverflow.com/questions/42480877/why-we-need-to-set-content-type-of-header-request"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《stackoverflow - Why We Need to Set Content Type of header request》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://www.cnblogs.com/jsean/articles/1610265.html"><span data-wiz-span="data-wiz-span">《cnblogs -&nbsp;什么是 MIME Type？》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://juejin.cn/post/6868277123824975886"><span data-wiz-span="data-wiz-span">《掘金 -&nbsp;HTTP请求的Content-Type类型》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://juejin.cn/post/6844903957593063432"><span data-wiz-span="data-wiz-span">《掘金 - HTTP请求头的Content-Type字段》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://www.runoob.com/http/http-content-type.html"><span data-wiz-span="data-wiz-span">《runoob - HTTP content-type》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://segmentfault.com/a/1190000013056786"><span data-wiz-span="data-wiz-span">《SegmentFault - Http请求中的Content-Type》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types"><span data-wiz-span="data-wiz-span">《MDN - MIME 类型》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://baike.baidu.com/item/MIME/2900607?fr=aladdin"><span data-wiz-span="data-wiz-span">《百度 - MIME》</span></a></div></div></blockquote></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></div></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><b>2、表现形式：</b></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">它在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Http 请求头</span><span data-wiz-span="data-wiz-span">或</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">响应头</span><span data-wiz-span="data-wiz-span">中的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">Content-Type</span><span data-wiz-span="data-wiz-span"> 中表现出来：</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: center;"><div><span><img src="文件传输_基础知识（index）_files/a55fc8df-2f22-4eb6-81f7-fd09993defbe.png"></span><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: center;"><div><span data-wiz-span="data-wiz-span">图 1 -&nbsp;Request Header</span></div></div><div style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/a7d20095-400a-46a9-8d56-31c10ec7bfdf.png"></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 2 -&nbsp;Response Header</span></div><div style="text-align: center;"><div><div><span data-wiz-span="data-wiz-span"><br><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>3、具体实现</b></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">每个 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME 类型</span><span data-wiz-span="data-wiz-span">由两部分组成，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">前面</span>是数据的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">大类别</span>，例如声音audio、图象image等，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">后</span></span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">面</span><span data-wiz-span="data-wiz-span">定义<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">具体的种类</span>。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; 七种大类别：</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text、message、audio、video、image、application、multipart</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">常见的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME 类型 </span><span data-wiz-span="data-wiz-span">(通用型)：</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HTML文档&nbsp; &nbsp; &nbsp; .html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;text/html</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xml文档&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;.xml&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text/xml</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XHTML文档&nbsp; &nbsp;&nbsp; .xhtml&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; application/xhtml+xml</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 普通文本&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.txt&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;text/plain</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PDF文档&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.pdf&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; application/pdf</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Word文档&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.word&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; application/msword</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JPEG图形&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.jpeg,.jpg&nbsp; &nbsp; &nbsp; image/jpeg</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; au声音文件&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.au&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; audio/basic</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AVI文件&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.avi&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; video/x-msvideo</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GZIP文件&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.gz&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; application/x-gzip</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TAR文件&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .tar&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;application/x-tar</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 二进制数据&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;application/octet-stream</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></div></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><b>4、作用：</b></div></div><div style="text-align: left;"><div><div><div><b>4.1、服务端告诉客户端的情况——请求头中的 Content-Type（</b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">非常重要</span></b><b>）：</b><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span">告诉服务端，客户端发来的数据要以什么格式来解析。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/1314bdbb-fa5d-4044-a7f6-d1df9d0d9633.png"></div></div></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><b>4</b><b>.2、客户端</b><b>告诉</b><b>服务端的情况</b><b>——响应头中的 Content-Type（</b><b></b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(127, 127, 127);">不常用</span></b><b>）</b><b>：</b><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">告诉服务端，客户端发来的数据要以什么<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">格式</span>来打开文件。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/a55fc8df-2f22-4eb6-81f7-fd09993defbe.png"><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><b>5、用法：</b></div></div><div style="text-align: left;"><div><b>5.1、</b><b></b><b>在服务端（</b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">响应头</span>中）</b><b>设置它</b></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; 略。详见 Ref。<br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><b>5.2、</b><b></b><b>在客户端（</b><b></b><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">请求头</span>中）</b><b>设置它</b></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; 略。详见 Ref。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><blockquote style="text-align: left;"><div><div><b>Ref：</b></div></div></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://blog.csdn.net/qq_37003559/article/details/104029496"><span data-wiz-span="data-wiz-span">《csdn - HTTP Mime-Type对照表》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://www.cnblogs.com/sunzhenyong/archive/2013/09/16/3324696.html"><span data-wiz-span="data-wiz-span">《Http:设置 浏览器中MIME 类型》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://blog.csdn.net/qq_26711103/article/details/81116900?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163723869316780261910868%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163723869316780261910868&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-81116900.pc_search_result_cache&amp;utm_term=mime-type&amp;spm=1018.2226.3001.4187"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;Nginx配置晋级之路（三）-----文件服务配置，MIME和 default_type》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://blog.csdn.net/nanhuaibeian/article/details/105375227?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724195016780261926946%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163724195016780261926946&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105375227.pc_search_result_cache&amp;utm_term=%E8%AE%BE%E7%BD%AE+mime+type&amp;spm=1018.2226.3001.4187"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;如何设置 mime-type 或者 response.setContentType》</span></a><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; &nbsp; &nbsp;</span></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://www.cnblogs.com/jsean/articles/1610265.html"><span data-wiz-span="data-wiz-span">《cnblogs - 什么是 MIME TYPE？》</span></a></div></div></blockquote></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></span></div></div><div style="text-align: left;"><div><span><div><b>6、引申妙用</b></div></span></div></div><div style="text-align: left;"><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></div><div style="text-align: left;"><div><span><div><span><b>6.1、<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">伪装</span>二进制响应数据为纯文本字符串</b></span><span><b></b></span><span><b>：</b></span></div></span></div></div><div style="text-align: left;"><div><span><div><b>● 适应场景：</b></div></span></div></div><blockquote style="text-align: left;"><div><div><span><div><span data-wiz-span="data-wiz-span">用于无法使用浏览器接收二进制数据，只能使用浏览器收发字符串的场景，如 XHR 1.0 。</span></div></span></div></div></blockquote><div style="text-align: left;"><span><div><div><div><b>●</b><b></b><b>&nbsp;</b><b>原理说明：</b></div></div></div></span></div><blockquote style="text-align: left;"><div><span><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">借 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr</span><span data-wiz-span="data-wiz-span"> 之手修改 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">response</span><span data-wiz-span="data-wiz-span"> 的 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">content-typ</span>e （</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME Type</span><span data-wiz-span="data-wiz-span">）为纯文本，令 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr</span><span data-wiz-span="data-wiz-span"> （实为<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">浏览器</span>）以纯文本格式来解析接收到的二进制（0101 0001）数据，于是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">xhr.responseText</span><span data-wiz-span="data-wiz-span"> 拿到的就是文件对应的二进制字符串（存在形式是 "0101 0001" 还是 0101 0001 对应的 ASCII 字符 "?" 还没确定，有待探究）。接着再把 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">responseText</span><span data-wiz-span="data-wiz-span"> 的字符串数据以字符为单位用二进制的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">位运算</span>算成二进制的值。</span></div></div></span></div></blockquote><blockquote style="text-align: left;"><div><span><div><span data-wiz-span="data-wiz-span">详见&nbsp;</span><span><a href="https://blog.csdn.net/weixin_33885676/article/details/89443719?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《csdn - 你真的会使用XMLHttpRequest吗？》</span></a></span><span data-wiz-span="data-wiz-span">。</span></div></span></div></blockquote><blockquote style="text-align: left;"><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></blockquote><div style="text-align: left;"><span><div><span><b>●</b></span><span><b></b></span><span><b>&nbsp;</b></span><span><b></b></span><span><b>实现代码：</b></span></div></span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637295218985_7491" class="wiz-code-container"><textarea style="display:none;">// 修改 response 的 content-type （MIME Type），伪装二进制为纯文本
xhr.overrideMimeType("text/plain; charset=x-user-defined");

// 取得伪装结果
var binStr = xhr.responseText;

// 遍历伪装结果，把伪成纯文本的二进制转为真二进制
for (var i = 0, len = binStr.length; i &lt; len; ++i) {
    // 按字符 index 获取字符的 Unicode 编码（0~65535的整数)，可以看成是 ASCII 码，因为英文字符的码都是一样的。
    var c = binStr.charCodeAt(i);
	// 用位运算对字符转码，把字符转为原来的二进制数据
    var byte = c &amp; 0xff;		// Q：byte 不用保存？直接修改了源地址上的值？

}</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637295218985_7491"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 834px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 344px; min-width: 803.516px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>14</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 修改 response 的 content-type （MIME Type），伪装二进制为纯文本</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">overrideMimeType</span>(<span class="cm-string">"text/plain; charset=x-user-defined"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 取得伪装结果</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-def">binStr</span> <span class="cm-operator">=</span> <span class="cm-variable">xhr</span>.<span class="cm-property">responseText</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// 遍历伪装结果，把伪成纯文本的二进制转为真二进制</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>, <span class="cm-def">len</span> <span class="cm-operator">=</span> <span class="cm-variable">binStr</span>.<span class="cm-property">length</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">len</span>; <span class="cm-operator">++</span><span class="cm-variable">i</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// 按字符 index 获取字符的 Unicode 编码（0~65535的整数)，可以看成是 ASCII 码，因为英文字符的码都是一样的。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">var</span> <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-variable">binStr</span>.<span class="cm-property">charCodeAt</span>(<span class="cm-variable">i</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 用位运算对字符转码，把字符转为原来的二进制数据</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">var</span> <span class="cm-def">byte</span> <span class="cm-operator">=</span> <span class="cm-variable">c</span> <span class="cm-operator">&amp;</span> <span class="cm-number">0xff</span>;<span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// Q：byte 不用保存？直接修改了源地址上的值？</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 344px;"></div><div class="CodeMirror-gutters" style="height: 374px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>6.2、把响应数据<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">转为对象</span>：</b></span></div></div></div><div style="text-align: left;"><div><div><span><div><div><span><div><b>&nbsp;</b><b>适应场景：</b></div></span></div></div></span></div></div></div><blockquote style="text-align: left;"><span data-wiz-span="data-wiz-span">用于响应数据是 JSON 字符串、xml 文档字符串，又要操作 JSON 对象、 DOM 对象的情况</span></blockquote><div style="text-align: left;"><div><div><span><div><span><div><div><div><b>●</b><b></b><b>&nbsp;</b><b>原理说明：</b></div></div></div></span></div></span></div></div></div><blockquote style="text-align: left;"><div><span><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">借<span>&nbsp;</span></span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(127, 127, 127)">xhr</span><span data-wiz-span="data-wiz-span"><span>&nbsp;</span>之手修改<span>&nbsp;</span></span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(127, 127, 127)">response</span><span data-wiz-span="data-wiz-span">&nbsp;的<span>&nbsp;</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32);">content-ty</span></span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">pe</span><span data-wiz-span="data-wiz-span"> （</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(127, 127, 127)">MIME Type</span><span data-wiz-span="data-wiz-span">）为 JSON、DOM 对应的格式，如 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">"application/json"</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">"text/xml"</span><span data-wiz-span="data-wiz-span">，然后 xhr 拿到的数据就会是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">JSON 对象</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">DOM 对象</span><span data-wiz-span="data-wiz-span">了。详见&nbsp;</span><a href="https://blog.csdn.net/weixin_33885676/article/details/89443719?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link"><span data-wiz-span="data-wiz-span">《csdn - 你真的会使用XMLHttpRequest吗？》</span></a><span data-wiz-span="data-wiz-span">。</span></div></div></span></div></blockquote><blockquote style="text-align: left;"><span><div style="text-align: left;"><span data-wiz-span="data-wiz-span">至于是浏览器解析的还是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">XHR</span><span data-wiz-span="data-wiz-span"> 自己转的，查不到相关资料，暂不深究，但我感觉是浏览器解析的，为什么呢？因为 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">MIME Type</span><span data-wiz-span="data-wiz-span"> 主要就是给<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">浏览器</span>用的呀。</span></div></span></blockquote><div style="text-align: left;"><span><div><span><div><span><b>●</b></span><span><b></b></span><span><b>&nbsp;</b></span><span><b></b></span><span><b>实现代码：</b></span></div></span></div></span></div><div data-mode="JSX" data-theme="eclipse"  id="wiz_cm_1637318609832_3931" class="wiz-code-container"><textarea style="display:none;">// JSON
xhr.overrideMimeType('application/json; charset = utf-8');		// 推荐
xhr.overrideMimeType('text/json; charset = utf-8');				// 不推荐

// DOM
xhr.overrideMimeType('application/xml; charset = utf-8');		// 推荐
xhr.overrideMimeType('text/xml; charset = utf-8');				// 不推荐
</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637318609832_3931"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 595px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 200px; min-width: 564.781px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>8</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// JSON</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">overrideMimeType</span>(<span class="cm-string">'application/json; charset = utf-8'</span>);<span class="cm-tab" role="presentation" cm-text="	">  </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 推荐</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">overrideMimeType</span>(<span class="cm-string">'text/json; charset = utf-8'</span>);<span class="cm-tab" role="presentation" cm-text="	"> </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 不推荐</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// DOM</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">overrideMimeType</span>(<span class="cm-string">'application/xml; charset = utf-8'</span>);<span class="cm-tab" role="presentation" cm-text="	">   </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 推荐</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">xhr</span>.<span class="cm-property">overrideMimeType</span>(<span class="cm-string">'text/xml; charset = utf-8'</span>);<span class="cm-tab" role="presentation" cm-text="	">  </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 不推荐</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 200px;"></div><div class="CodeMirror-gutters" style="height: 230px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><blockquote style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">关于 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">application/xml</span><span data-wiz-span="data-wiz-span"> 与 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">text/xml</span><span data-wiz-span="data-wiz-span"> 的区别，详见</span></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><a href="https://blog.csdn.net/kikajack/article/details/79233017"><span data-wiz-span="data-wiz-span">《MIME 类型中，application/xml 与 text/xml 的区别》</span></a></div></div></div></blockquote><blockquote style="text-align: left;"><div><a href="https://blog.csdn.net/desert3/article/details/84156164"><span data-wiz-span="data-wiz-span">《Mime text/xml 和 application/xml 字符集编码（转）》&nbsp; &nbsp;&nbsp;</span></a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><b>Ref：</b></div></blockquote><blockquote style="text-align: left;"><blockquote><div><div><a href="https://blog.csdn.net/zooen2011/article/details/19111179"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《csdn -&nbsp;解析Json需要设置Mime》</span></a></div></div></blockquote></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><b>7、疑问：</b><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span><b>Q：</b></span><span><b></b></span><span><b>MIME Type 与 Content Type</b></span></div></div><div style="text-align: left;"><div><div><b>A：</b><span data-wiz-span="data-wiz-span">一张图告诉你它们的关系：</span></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/081a75af-78f5-4108-b9ae-e60c9e2b6605.jpg"></div></div></div><blockquote style="text-align: left;"><blockquote><div><div><div><b>Ref：</b></div></div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><div><div><a href="https://blog.csdn.net/weixin_34055910/article/details/93555815"><span data-wiz-span="data-wiz-span">《csdn - MIME Type和Content-Type》</span></a><span data-wiz-span="data-wiz-span">&nbsp;&nbsp;</span></div></div></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><div><div><span><div><a href="https://blog.csdn.net/weixin_41229588/article/details/105684298?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724195016780261926946%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163724195016780261926946&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-22-105684298.pc_search_result_cache&amp;utm_term=%E8%AE%BE%E7%BD%AE+mime+type&amp;spm=1018.2226.3001.4187"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;HTTP中content-type和MIME媒体类型》</span></a></div></span></div></div></blockquote></blockquote></blockquote><div style="text-align: left;"><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></div><div style="text-align: left;"><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></div><div style="text-align: left;"><div><span><div><div><b>Q：</b><b>XHR 1.0 发二进制应该是可以的吧？</b></div></div></span></div></div><div style="text-align: left;"><div><span><div><div><b>A：</b><span data-wiz-span="data-wiz-span">为什么会这么想呢？因XHR 2.0 发二进制用的方法和 1.0 的一样。但也可能不行，因为 XHR 1.0 在发数据时，它可能是把数据编码了再发出去</span></div></div></span></div></div><blockquote style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">的。</span></div></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">没错，XHR 1.0 的确是把数据&nbsp;touch（触摸，即经手，意为转码了）了一下再发出去的。因此不能传递二进制。不过要申明一点，这锅 HTTP 不背。</span></div></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">详见</span><a href="https://stackoverflow.com/questions/5165337/xmlhttprequest-overridemimetype-for-outgoing-data"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《StackOverflow -&nbsp;用于传出数据的 XmlHttpRequest overrideMimeType》</span></a></div></div></div></div></div></blockquote><div style="text-align: left;"><div><span><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></span></div></div><div style="text-align: left;"><div><span><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></span></div></div><div style="text-align: left;"><div><span><div><div><div><div><b>Q：</b><b></b><b>是</b><b></b><b>&nbsp;</b><b>"0101 0001"</b><b></b><b>&nbsp;</b><b>还是 0101 0001 对应的 ASCII 字符</b><b style="color:rgb(255, 104, 32)"></b><b>&nbsp;</b><b>"?"</b><b>&nbsp;(假设对应"?</b><b>")？</b></div></div></div></div></span></div></div><div style="text-align: left;"><div><span><div><div><div><div><b>A：</b><span data-wiz-span="data-wiz-span">把 “用位运算对字符转码，把字符转为原来的二进制数据” 的原理搞明白，这个问题就搞明白了。</span></div></div></div></div></span></div></div><div style="text-align: left;"><div><span><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span><b>8、Ref：</b></span></div></div><blockquote style="text-align: left;"><div><a href="https://segmentfault.com/q/1010000006670932"><span data-wiz-span="data-wiz-span">《SegmentFault - http传输格式是文本还是二进制？》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.cnblogs.com/zxtceq/p/7154460.html"><span data-wiz-span="data-wiz-span">《cnblogs - 有关使用HTTP协议传输二进制文件》</span></a><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.cnblogs.com/zxtceq/p/7154488.html"><span data-wiz-span="data-wiz-span">《cnblogs - HTTP传输二进制初探》</span></a></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><h4><b>MIME Type 的设置方式</b></h4></div></div></div></div><blockquote style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">设置 MIME Type 就是设置 Header 中的 Content-Type。&nbsp;</span></div></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><div><div><b>服务端（后端）设置（</b><b>灵活</b><b>）：</b></div></div></div></div></div><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">●&nbsp;request&nbsp;：未知</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">●&nbsp;response：用服务器或者代理服务器改，应该要配置一个“文件扩展名 —— MIME” 的映射关系。</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><img src="文件传输_基础知识（index）_files/f3624779-4aa2-460c-bedd-f40dc896e3eb.png"></div></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><div><div><div><span data-wiz-span="data-wiz-span">详见：</span></div></div></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><div><span><a href="https://www.jianshu.com/p/5926d5a3b11d"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《MIME类型JSON文件》</span></a></span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><b>客户端</b><b>（前端）</b><b>设置</b><b>（</b><b>死板</b><b>）</b><b>：</b></div></div></div></div></div><blockquote style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span">●&nbsp;request：直接在&nbsp;Header 中添加&nbsp;MIME (Content-Type)&nbsp;的内容。</span></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span">●&nbsp;response：用 XHR 的 overrideMIMEType()&nbsp;覆盖 Response Header 中的 MIME (Content-Type) 。</span></div></div></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br></span></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><h3 style="font-size:1.25rem;"><b><span data-wiz-span="data-wiz-span"><br></span></b><b>Http 0.9／1.0／1.1／2.0 的异同</b></h3></div></div></div></div></div></div><blockquote style="text-align: left;"><div><div><div><div><div><div><div><span data-wiz-span="data-wiz-span">HTTP 是一个基于 TCP 协议来传递数据的，是 TCP/IP 协议簇的的一员，至于我们最关心的“能否传递二进制数据”需要看版本。</span></div></div></div></div></div></div></div></blockquote><div style="text-align: left;"><div><div><div><div><div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.015097013403778815.png"></div></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><div><br></div></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 0.9</span><span data-wiz-span="data-wiz-span"> 是第一个版本的 HTTP 协议，只有一个 GET 方式，只支持纯本文内容，且<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不支持 Header</span>（请求头响应头），不支持 POST 方法，因此客户端无法向服务器传递太多信息，它给服务器传递的数据只能拼接在 URL 上。它还规定服务器只能响应 HTML 格式的字符串（ASCII 字符），不能是别的格式，因此，它无法直接传输二进制数据。因此，该版本无法上传文件，也无法通过纯二进制方式下载文件。因此便有了些奇技淫巧让它间接传输二进制数据，如：可以用 BASE 64 编码方式让二进制和字符来回转换，间接实现传递二进制数据。</span></div></div></div></div></div></div></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 1.0</span><span data-wiz-span="data-wiz-span"> 内容大大增加，首先是允许传输任意类型的数据，数据类型在 Header 中用 Content-Type 字段标识。这使得互联网不仅可以传输文字，还<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">能传输图像、视频、二进制文件</span>。第二是请求方法增加了 POST 和 HEAD。第三是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">增加了 Header</span><span data-wiz-span="data-wiz-span">（请求头和响应头）。第四是增加了<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">“非默认”</span>持久连接（persistent connection，即长连接，即 TCP 连接能不断开，一个 TCP 连接被多个请求复用，不用为每个请求建立连接）。如果要使用持久连接，只需添加头信息：<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Connection: keep-alive</span>。&nbsp; &nbsp;&nbsp;</span></div></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><u><span data-wiz-span="data-wiz-span"><br></span></u></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 1.1</span><span data-wiz-span="data-wiz-span">&nbsp;发、在 1.0 基础上做的完善，引入了<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">“默认”</span>持久连接（无需添加 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Connection: keep-alive</span>）、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">管道机制</span><span data-wiz-span="data-wiz-span">（假多路复用，有队头阻塞。pipelining，管道，即 TCP 连接可以<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">并发</span>请求，但服务器仍是挨个处理）、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">分块传输</span><span data-wiz-span="data-wiz-span">、新增 5 个请求方式（如 OPTIONS, PUT）。该版本一直用到了20 年后的今天，直到现在还是最流行的版本。不过，管道化请求有几个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">致命弱点</span><span data-wiz-span="data-wiz-span">，例如会造成</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">队头阻塞（Head of Line Block）</span><span data-wiz-span="data-wiz-span">，前一个响应未返回，后面的响应将被阻塞。注意，TCP 队头阻塞和 HTTP 队头阻塞不是一个层面的事。</span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">HTTP 2.0</span><span data-wiz-span="data-wiz-span"> 增加了</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">服务器推送（Server Push）</span><span data-wiz-span="data-wiz-span">、多工（真多路复用，无队头阻塞）、二进制分帧等等。值得注意的是，这个 Server Push 它虽然跟 WebSocket 的一样基于 HTTP（TCP）长连接，但是它并不是用来实现即时通信的，而是优化请求数量的，所以<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">即时通信还得靠 WebSocket</span>。</span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><b>请求方式（Request Method）随 HTTP 版本的变化：</b></div></div></div></div></div></div></div><blockquote style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">0.9</span><span data-wiz-span="data-wiz-span"> 定义了 1 种请求方式：GET</span></div></div></blockquote><blockquote style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">1.0</span><span data-wiz-span="data-wiz-span"> <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">新增</span>了 2 种请求方式：POST 和 HEAD 方法。</span></div></div></blockquote><blockquote style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">1.1</span><span data-wiz-span="data-wiz-span"> <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">新增</span>了 5 种请求方式：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</span></div></div></blockquote><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">常见疑问：</span></b></span></div></div></div></div></div></div><div><span data-wiz-span="data-wiz-span"><b><br></b></span></div><div><span data-wiz-span="data-wiz-span"><b>Q：为什么说 HTTP 2.0 基于二进制解析，HTTP 1.x 基于文本解析？</b><br></span></div></div><blockquote style=""><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">详情：为什么说 HTTP 2.0 基于二进制解析，HTTP 1.x 基于文本解析？难道 HTTP 1.x 传输二进制数据时给转为了 ASCII 字符再传输的？</span></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><b>A：</b></span></div></div><blockquote style=""><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span">这里说的是解析，而不是传输，到了 TCP 这一层都是二进制数据，只是在解析时，HTTP 1.x 的请求头里的信息只能是文本形式的，HTTP 2.0 的请求头可以是任意数据形式的。</span></div></div></div></div></div></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><div><div><b>Ref：</b></div></div></div></div></div></div></div><blockquote style="text-align: left;"><div><div><div><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《cnblogs -&nbsp;关于HTTP协议，一篇就够了》</span></a></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><div><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/232"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《github - 第 117 题：介绍下 http1.0、1.1、2.0 协议的区别》</span></a></div></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="http://www.manongjc.com/detail/10-lmpedoijhwqzkpg.html"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《码农教程 - (纯干货)HTTP／1.0／1.1／2.0的区别以及http和https的区别》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://blog.csdn.net/qq_39207948/article/details/80969968"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《csdn - HTTP／1.0／1.1／2.0的区别以及http和https的区别》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.cnblogs.com/sjjg/p/5891392.html"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《cnblogs - HTTP/0.9、HTTP/1.0、HTTP/1.1、HTTP/2 历史演变和设计思路（详）＊》</span></a></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://blog.csdn.net/sss_0916/article/details/100045939?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《csdn - 『网络』HTTP/0.9、HTTP/1.0、HTTP/1.1、HTTP/2.0的区别》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://www.cnblogs.com/mengff/p/12724641.html"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《cnblogs - TCP队头阻塞和HTTP队头阻塞》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><a href="http://linkedkeeper.com/detail/blog.action?bid=167"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《个人博客 - 浅谈基于HTTP2推送消息到APNs》</span></a></div></blockquote><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><h3 style="font-size:1.25rem;"><span><b>Http</b></span><span><b></b></span><span><b></b></span><span><b></b></span><span><b>&nbsp;版本控制（Protocol Versioning）</b></span><span><b></b></span><span><b></b></span><span><b></b></span><span><b></b></span></h3></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span"><br></span></b></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><b>Q：</b><span data-wiz-span="data-wiz-span">浏览器发起 http 请求时候，如何知道服务器支持什么 http 版本？浏览器如何选择 http2 ？</span></div></div></div></div></div><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">详情：请求报文中必须填写 http 的版本，作为浏览器，在发起请求时候，浏览器是怎么知道需要怎么填写呢？</span></div></blockquote><div style="text-align: left;"><div><div><div><div><b>A：</b><span data-wiz-span="data-wiz-span">无论是主版本还是次版本，它都不知道服务器支持哪个，它默认自己支持的最大版本。</span></div></div></div></div></div><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">关于这些问题，RFC 规范中有很好的解释：</span></div></blockquote><blockquote style="text-align: left;"><div><span style="text-decoration-skip-ink:none" data-wiz-span="data-wiz-span">《RFC 7230, HTTP/1.1: Message Syntax and Routing》之：</span></div></blockquote><blockquote style="text-align: left;"><blockquote><div><a href="https://datatracker.ietf.org/doc/html/rfc7230#section-2.6"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《2.6.&nbsp; Protocol Versioning》</span></a><span data-wiz-span="data-wiz-span">（协议的版本控制）</span></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><a href="https://datatracker.ietf.org/doc/html/rfc7540#section-3.2"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《3.2.&nbsp; Starting HTTP/2 for "http" URIs》</span></a><span data-wiz-span="data-wiz-span">（为 http URI 启动 HTTP/2）</span></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">如果是次版本（1.x），它是先发一个自己支持最大次版本，如果成功，后续会使用双方都支持的最大次版本。</span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">如果是主版本（x.0），它是在请求发送前的&nbsp;TLS 握手阶段确定服务器是否支持的，支持就使用 2.x，否则就 1.x。如果在非 TLS 环境下，可能会使用一个叫 Upgrade 的协议头，请求服务器升级协议为 HTTP2。</span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">如果服务器对客户端使用的 http 协议无论主版本还是次版本都不支持，会返回 505（HTTP Version Not Supported）。</span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><b><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">关于 TLS 握手：</span></b></div></blockquote><blockquote style="text-align: left;"><blockquote><div><span data-wiz-span="data-wiz-span">当浏览器向&nbsp;stackoverflow.com&nbsp;发送请求时，执行的动作是：</span></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><ol class="wiz-list-level1"><li><span data-wiz-span="data-wiz-span">DNS 查找。找到stackoverflow的IP地址。</span></li><li><span data-wiz-span="data-wiz-span">TCP/IP 握手</span></li><li><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">TLS 握手</span></li><li><span data-wiz-span="data-wiz-span">HTTP 请求/响应（应用程序协议）</span></li><li><span data-wiz-span="data-wiz-span">……</span></li></ol></blockquote></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><blockquote><div><span data-wiz-span="data-wiz-span">在&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TLS 握手</span><span data-wiz-span="data-wiz-span">的时候，浏览器会告诉服务器支持什么版本的什么协议，不仅限于 http。</span></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span">如果服务器发现浏览器能够识别 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">http/2</span><span data-wiz-span="data-wiz-span">，那它会把浏览器与它之间的通信协议升级为&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">http/2</span><span data-wiz-span="data-wiz-span">。浏览器只是遵守服务器的升级策略，因此只有在服务器升级通信协议后，浏览器才会显示浏览器与服务器有</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">http/2</span><span data-wiz-span="data-wiz-span">&nbsp;连接（名为“h2”）。</span></div></blockquote></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><b>Ref：</b></div></div></div></div></div><blockquote style="text-align: left;"><div><div><a href="https://stackoverflow.com/questions/37181601/how-does-a-browser-know-if-a-site-supports-http-2"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《stackoverflow - How does a browser know if a site supports HTTP/2?》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://www.zhihu.com/question/321943562"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《浏览器发起http请求时候，如何知道服务器支持什么http 版本？》</span></a></div></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span><b></b><b>Q：</b><b>HTTP 的版本分为 0.9、1.0、1.1、2.0，那 HTTP 的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">版本</span>是什么<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">决定</span>的，浏览器，服务器？</b></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><b>A：</b><span data-wiz-span="data-wiz-span">服务端程序员写的程序。tomcat，jetty 并不能决定 HTTP 版本。</span></div></div></div></div></div><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">那什么什么时候决定的？</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">在<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">通讯中</span>指定的版本号。</span></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><b>Ref：</b></div></blockquote><blockquote style="text-align: left;"><blockquote><div><a href="https://segmentfault.com/q/1010000010612052"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《SegmentFault - HTTP的版本是什么决定的，浏览器，服务器？》</span></a></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/232"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《github - 第 117 题：介绍下 http1.0、1.1、2.0 协议的区别》</span></a></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><a href="https://www.imooc.com/wenda/detail/486736"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《imooc - HTTP的版本是什么决定的，浏览器，服务器？》</span></a></div></blockquote></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><h3><span data-wiz-span="data-wiz-span">HTTP 与 TCP 、IP 、TCP/IP 的关系</span></h3></div></div></div><blockquote style="text-align: left;"><blockquote><div><img src=""><div style="text-align: center;"><div><div><div><div><img src="文件传输_基础知识（index）_files/a62d1079-371a-4a36-a208-24c32b73f573.png" width="765" height="335"></div></div></div></div></div><div style="text-align: center;">图 1 - HTTP 与 TCP 在 Client 与 Server 之间的职能</div></div></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><div><img src=""></div></blockquote></blockquote><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 是第 7 层应用层的协议，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 是第 4 层</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输层</span><span data-wiz-span="data-wiz-span">的协议，。网络是分层的，协议也是分层的，它根据网络的分层来分层。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 基于 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span>（注意，不是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP/IP</span>），是 TCP/IP 协议（</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">簇</span><span data-wiz-span="data-wiz-span">）中的一员，属于 TCP/IP 协议簇分层（体系）中的第 4 层——</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">应用层</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 是对 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 的一种应用。由于&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTTP</span><span data-wiz-span="data-wiz-span">&nbsp;它不涉及数据包（packet）传输，因此数据包还是“</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">IP 协议数据包</span><span data-wiz-span="data-wiz-span">”。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 与 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 依然是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">独立</span><span data-wiz-span="data-wiz-span">的个体，它俩的关系是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTTP</span><span data-wiz-span="data-wiz-span"> 需要 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> “</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">打下手</span><span data-wiz-span="data-wiz-span">”。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span">&nbsp;不是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">连接</span><span data-wiz-span="data-wiz-span">，而是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">通信</span><span data-wiz-span="data-wiz-span">的。</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">连接</span><span data-wiz-span="data-wiz-span">的，连接建立好了才能</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">通信</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div></div><div style="text-align: left;"><div><div><span><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">TCP</span><span> 是</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">水管</span><span>，</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">HTTP</span><span> 是水的</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">类型</span><span>，传输的数据是</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">水</span><span>。水管放什么类型的</span><span data-wiz-span="data-wiz-span">水</span><span>都可以，可以是</span><span>纯净水也可以是可乐水，因此不仅限于 </span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">HTTP</span><span> 类的水。</span></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">HTTP 协议</span><span data-wiz-span="data-wiz-span">是建立在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 协议之上的一种</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">应用</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 通信过程</span><span data-wiz-span="data-wiz-span">是：首先 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">3 次握手</span><span data-wiz-span="data-wiz-span">建立起一个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span">连接，然后在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 连接之上用一个叫 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTTP</span><span data-wiz-span="data-wiz-span"> 的应用层的协议来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输</span><span data-wiz-span="data-wiz-span">数据。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 请求</span><span data-wiz-span="data-wiz-span">不是浏览器的专利，Java 也是可以模拟 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTTP 请求</span><span data-wiz-span="data-wiz-span">的。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 连接</span><span data-wiz-span="data-wiz-span">&nbsp;是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">短连接</span><span data-wiz-span="data-wiz-span">，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不</span><span data-wiz-span="data-wiz-span">是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">无连接</span><span data-wiz-span="data-wiz-span">，请求处理完后就立即断开连接了。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">IP</span><span data-wiz-span="data-wiz-span"> 是第 3 层</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">网络层</span><span data-wiz-span="data-wiz-span">的协议，是 Internet Protocol（网际互连协议）的缩写，是网络之间互连的协议。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TCP/IP 协议&nbsp;</span><span data-wiz-span="data-wiz-span">不仅仅指的是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 和</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">IP</span><span data-wiz-span="data-wiz-span">两个协议，而是指一个由&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">3~7 层之间</span><span data-wiz-span="data-wiz-span">的诸如 HTTP、Telnet、FTP、SMTP、TCP、UDP、IP 等等</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">多个协议</span><span data-wiz-span="data-wiz-span">构成的</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">协议簇</span><span data-wiz-span="data-wiz-span">，是一个协议集合。只是因为在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP/IP</span><span data-wiz-span="data-wiz-span"> 协议中 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 协议和 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">IP</span><span data-wiz-span="data-wiz-span"> 协议最具代表性，所以才称之为称为 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP/IP</span><span data-wiz-span="data-wiz-span"> 协议。这个协议集合的目的是在多个不同网络间实现</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">信息传输</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: center;"><span><img src="文件传输_基础知识（index）_files/0.6654443304669312.png" alt="TCP/IPåè®®çç»æ" width="490" height="245"></span></div><div style="text-align: center;"><span>图 1 - TCP/IP 协议簇结构</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span><div><span data-wiz-span="data-wiz-span"><br></span></div></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; </span><b>Ref：</b></div></div></div></div></div><blockquote style="text-align: left;"><blockquote><blockquote><div><span><a href="https://www.cnblogs.com/baizhanshi/p/8482612.html"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《cnblogs - HTTP与TCP的区别和联系》</span></a></span></div></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><div><span><div><a href="https://www.cnblogs.com/amunote/p/4126548.html"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《cnblogs - java模拟http的get和post请求》</span></a></div></span></div></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><div><span><div><a href="https://www.bilibili.com/video/BV1uK4y1W7mq?from=search&amp;seid=14662697167431909101&amp;spm_id_from=333.337.0.0"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《bilibili - java模拟HTTP请求》</span></a></div></span></div></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><div><span><div><a href="https://network.51cto.com/art/202105/661212.htm"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《51CTO - 一文走进 HTTP 与 TCP 协议》</span></a></div></span></div></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><div><div><div><div><a href="https://www.cnblogs.com/roverliang/p/5176456.html"><span data-wiz-span="data-wiz-span">《cnblogs - HTTP协议—— 简单认识TCP/IP协议》</span></a></div></div></div></div></blockquote></blockquote></blockquote><blockquote style="text-align: left;"><blockquote><blockquote><a href="https://baike.baidu.com/item/TCP/IP%E5%8D%8F%E8%AE%AE/212915"><span data-wiz-span="data-wiz-span">《百度 - TCP/IP协议》</span></a></blockquote></blockquote><blockquote><blockquote><a href="https://baike.baidu.com/item/IP/224599?fr=aladdin"><span data-wiz-span="data-wiz-span">《百度 - IP》</span></a></blockquote></blockquote><blockquote><blockquote><a href="https://www.zhihu.com/question/39541968"><span data-wiz-span="data-wiz-span">《知乎 - TCP/IP、Http、Socket的区别?》</span></a></blockquote></blockquote><blockquote><blockquote><a href="https://www.zikao365.com/ask/wa1905168868.shtml"><span data-wiz-span="data-wiz-span">《zikao365 - Http协议处于TCP/IP协议体系的什么》</span></a></blockquote></blockquote><blockquote><blockquote><span data-wiz-span="data-wiz-span"><br></span></blockquote></blockquote></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><span data-wiz-span="data-wiz-span">Http 长连接与短链接</span></h3></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">这里的连接</span><span data-wiz-span="data-wiz-span">说的其实就是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);"> TCP 长连接</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP 短连接</span><span data-wiz-span="data-wiz-span">，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Http</span><span data-wiz-span="data-wiz-span"> 不是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">连接</span><span data-wiz-span="data-wiz-span">，而是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">通信</span><span data-wiz-span="data-wiz-span">的，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP</span><span data-wiz-span="data-wiz-span"> 是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">连接</span><span data-wiz-span="data-wiz-span">的。连接建立好了才能通信。</span></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 虽然</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">基于 TCP</span><span data-wiz-span="data-wiz-span">（注意，不是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">TCP/IP</span><span data-wiz-span="data-wiz-span">），但它俩仍然是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">独立</span><span data-wiz-span="data-wiz-span">的个体，HTTP 是 7 层</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">应用层</span><span data-wiz-span="data-wiz-span">的，TCP 是 4 层</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输层</span><span data-wiz-span="data-wiz-span">的，应用层的&nbsp;Http 需要传输层的 TCP 帮忙 “</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">打下手</span><span data-wiz-span="data-wiz-span">”。</span></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">这里说的</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">长连接</span><span data-wiz-span="data-wiz-span">、短连接也就是有的人说的</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">持久连接</span><span data-wiz-span="data-wiz-span">（persistent connection）、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">非持久连接</span><span data-wiz-span="data-wiz-span">，需要在请求头里添加 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Connection:keep-alive</span><span data-wiz-span="data-wiz-span"> 来启用的。</span></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">无论 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Http 1.x</span><span data-wiz-span="data-wiz-span"> 还是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Http 2.x</span><span data-wiz-span="data-wiz-span">，长连接都是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TCP 的长连接</span><span data-wiz-span="data-wiz-span">。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 中，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Client</span><span data-wiz-span="data-wiz-span"> 或 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Server</span><span data-wiz-span="data-wiz-span"> 都是可以主动</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">关闭连接</span><span data-wiz-span="data-wiz-span">的。</span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">Ref：</span></div></div><div style="text-align: left;"><div><a href="http://www.manongjc.com/detail/10-lmpedoijhwqzkpg.html"><span data-wiz-span="data-wiz-span">《码农教程 - (纯干货)HTTP／1.0／1.1／2.0的区别以及http和https的区别》</span></a></div></div><div style="text-align: left;"><div><a href="https://www.jianshu.com/p/5b8bba273259"><span data-wiz-span="data-wiz-span">《简书 - http的长连接和短连接（史上最通俗！2.0）》</span></a></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><h3><span data-wiz-span="data-wiz-span">Http 与 WebSocket</span></h3></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">WebSocket</span><span data-wiz-span="data-wiz-span"> 基于 HTTP ，至于是 1.0 还是 1.1，是&nbsp;1.x 还是 2.x ，这并不重要。有人说是 1.1。而且基于 2.0 的 WebSocket 正在开发中。</span></div></div><div style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP</span><span data-wiz-span="data-wiz-span"> 基于 TCP。WebSocket、HTTP、TCP 是从左往右依赖的 3 不同的协议，不同的个体。</span></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.14284025671537037.png" width="313" height="134"></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"> </span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Websocket</span><span data-wiz-span="data-wiz-span"> 借用了 HTTP 来完成一部分握手动作，以建立 Websocket 的 TCP 长连接。可以简单理解为 WebSocket 创建了一条TCP连接。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Websocket</span><span data-wiz-span="data-wiz-span">&nbsp;其实是一个新协议，虽然基于 HTTP，但其实又跟 HTTP 基本没有关系，它只是为了兼容现有浏览器的握手规范才用 HTTP 来握手的，也就是说它是 HTTP 的一种补充。可以通过这样一张图理解：</span></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.3010772156907656.png"></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>Http 2.0 与 WebSocket：</b></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 2.0</span><span data-wiz-span="data-wiz-span"> 只是对 HTML、CSS 等 JS 资源的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输方式</span>进行了<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">优化</span>，并没有提供新的 JS API，也<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不能用于实时传输消息</span>。如果需要实时传输消息，现在还是需要 WebSocket 或 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">SSE</span>（基于 HTTP）。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 2.0</span><span data-wiz-span="data-wiz-span">&nbsp;虽然支持服务器推送资源到客户端，但那不是应用程序可以感知的，主要是让浏览器（用户代理）提前缓存静态资源，所以我们不能指望HTTP2可以像 WebSocket 建立双向实时通信。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 2.0</span><span data-wiz-span="data-wiz-span"> 中的新特性 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Server Push</span> 服务器推送并不是用来给客户端推送消息的，而是让客户端只需发一个 index.html 的请求，就能让服务器把 index.html 和相关的 css、js 以及图片等静态资源文件全都给你推送过来，无需再发送这些 css、js、图片的请求。如果 Client 不发请求，Server 是没法 Push 的。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><span><img src="文件传输_基础知识（index）_files/0.7633745671266013.png"></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 2.0</span><span data-wiz-span="data-wiz-span"> 和 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">WebSocket </span><span data-wiz-span="data-wiz-span">协议都是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">应用层</span><span data-wiz-span="data-wiz-span">的协议，两者应用场景不一样。HTTP 2.0 主要用来一问一答的方式交付信息；WebSocket 让通信双方都可以主动去交换信息。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">基于</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTTP 2.0</span><span data-wiz-span="data-wiz-span"> 的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">WebSockets</span><span data-wiz-span="data-wiz-span"> 即将在 Chrome 91 版本中正式启用。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>Ref：</b></div></div></div><blockquote style="text-align: left;"><div><div><a href="https://zhuanlan.zhihu.com/p/149388044"><span data-wiz-span="data-wiz-span">《知乎 - WebSocket》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://www.zhihu.com/question/20215561"><span data-wiz-span="data-wiz-span">《知乎 -&nbsp;WebSocket 是什么原理？为什么可以实现持久连接？》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://zhuanlan.zhihu.com/p/95622141"><span data-wiz-span="data-wiz-span">《知乎 -&nbsp;理清 WebSocket 和 HTTP 的关系》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><a href="http://linkedkeeper.com/detail/blog.action?bid=167"><span data-wiz-span="data-wiz-span">《个人博客 - 浅谈基于HTTP2推送消息到APNs》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="http://www.ruanyifeng.com/blog/2018/03/http2_server_push.html"><span data-wiz-span="data-wiz-span">《阮一峰 - HTTP/2 服务器推送（Server Push）教程》</span></a></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><b>Http 与 Cookie</b></h3></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Cookie</span><span data-wiz-span="data-wiz-span"> 是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Http</span><span data-wiz-span="data-wiz-span"> 的好伙伴。HTTP/<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">1.1</span> 引入 Cookie 来保存状态信息。原因是&nbsp;HTTP 协议是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">无状态</span>的，<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">引入 Cookie</span> 是为了让 HTTP 协议尽可能简单，使得它能够<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">处理大量事务</span>。</span></div></div></div><div style="text-align: left;"><div><div><br></div></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Cookie</span> 也被成为 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Http Cookie</span>、<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Web Cookie</span> 或<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">浏览器 Cookie</span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Http</span> 是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">无状态</span>的协议，如<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">会话状态</span>（如<span style="">用户登录状态）</span>，没有状态，两个 Http 请求之间就没有任何关联了，所以诞生了 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Cookie</span> ，用 Cookie 来为无状态的 HTTP 提供并管理状态（信息）。</div><div><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Cookie</span><span data-wiz-span="data-wiz-span"> 最常见的功能是管理</span><span style="">会话状态，如用户登录状态。</span></div><div style="text-align: left;"><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Cookie</span><span style=""> 在客户端与服务器的传递形式是在 HTTP Header 的字段中传递的，以 key-value 的明文形式。首先服务端在响应 Header 中用字段 set-cookie 告诉客户端要保存的 cookie 信息，然后客户端再在请求 Header 中用字段 cookie 传 cookie 信息给服务端。</span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span><b>Ref：</b></span></div></div></div><blockquote style=""><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><a href="https://segmentfault.com/a/1190000018234763">《segmentfault - 一文读懂Http Headers为何物(超详细)》</a></span></div></div></div></blockquote><blockquote style=""><div style="text-align: left;"><div><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">《MDN - HTTP &gt; HTTP Cookie》</a></div></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br> </span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h2><span data-wiz-span="data-wiz-span">数据包、数据帧、报文：</span></h2></div></div><div style="text-align: left;"><div><div><span><b><span data-wiz-span="data-wiz-span"><br></span></b></span></div></div></div><div style="text-align: left;"><div><div><span><b>1、数据包（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">packet</span>）的概念</b></span><span><b></b></span><span><b>：</b></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">包(Packet)&nbsp;</span><span data-wiz-span="data-wiz-span">是通信传输中的数据单位，一般也称“数据包”。在包交换网络里，单个消息被划分为多个数据块，这些数据块称为包，它包含接收者和发送者的地址信息（源 IP 和目的 IP），以及要传输数据块（净载数据）。这一个个的包在网络中传输，最后在目的地重新组合。</span></div></div></div><div style="text-align: left;"><div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/c542cb67-d92f-4833-b7e0-5b89673ac7b0.jpg"></div><div style="text-align: center;"><span>图 1 - 数据包承载的信息</span></div></div><div><div><br></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">是第三层网络层的概念，只是在第二层数据链路层传输的时候，要被包装成帧。现在最常见的是 IP 协议的数据包。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">也分包头、包体，包头有寻址信息，包体就是数据。</span></div></div></div><div style="text-align: left;"><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/3f795bf0-9049-4283-99b3-284c541b1506.jpg"></div><div style="text-align: center;">图 1 - 数据包包头与包体</div><div style="text-align: center;"><div><br></div></div><div><br></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>2、数据</b><b></b><b>帧（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">frame</span>）的</b><b></b><b></b><b>概念</b><b>：</b></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">来自线路的二进制数据包称作一个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">帧</span><span data-wiz-span="data-wiz-span">，是第二层数据链路层的概念。</span></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span"><img src="文件传输_基础知识（index）_files/629ba9ae-1be3-47d6-a04e-b1023bdcf8cc.jpg"><br></span></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 1 - 帧、包在 1~3 层的位置</span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>2.1、以太网数据帧概念：</b></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">以太帧</span><span data-wiz-span="data-wiz-span">：在以太网数据链路上的数据包称作以太网数据帧，即以太帧，也叫 MAC 帧。</span><img src="" width="341" height="151"></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/9c2b8678-6cba-40d7-badf-6b1a1f11fe83.jpg" width="312" height="143"></div><div style="text-align: center;"><span>图 1 - 以太帧的概念</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">以太帧起始部分</span><span data-wiz-span="data-wiz-span">由前导码和帧开始符组成，后面紧跟着一个以太网报头，以 MAC 地址说明目的地址和源地址。</span><img src="" width="333" height="106"></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/43b272a0-67c2-4294-b21a-ab1dce54c769.jpg">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="文件传输_基础知识（index）_files/4abb4780-59cb-49f7-96a4-5d6e281f493c.jpg"></div><div style="text-align: center;"><span>图 1 - 以太帧的前导码、帧开始符、以太网报头的概念</span></div><div><div><br></div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/f29c164d-d8db-480a-8738-3ed6c0609c29.jpg"></div><div style="text-align: center;"><span>图 2 - 以太帧的&nbsp;</span><span>MAC 地址的</span><span>概念</span></div></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">以太帧中间部分</span><span data-wiz-span="data-wiz-span">部是包含其他协议报头的数据包，如 IP 协议的。</span><img src="" width="197" height="92"></div></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/c2037ba6-3102-43f8-882c-dac900616a5d.jpg"></div><div style="text-align: center;"><span>图 1 - 以太帧中部的</span><span>概念</span></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">以太帧结尾部分</span><span data-wiz-span="data-wiz-span">是一个 32 位的冗余校验码，用于检验数据是否出现损坏。</span><img src="" width="261" height="165"></div></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/17ab03e6-4121-44e5-82e7-5eec945681fe.jpg"></div><div style="text-align: center;"><span>图 1 - 以太帧尾部的</span><span>概念</span></div><div><br></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span">来自线路的一个二进制数据包称作一个帧。</span></div></div></div></div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/a7a43b23-4a43-47be-821c-d08af85e8a3d.jpg"></div><div style="text-align: center;"><span>图 2 - 以太帧一个帧的</span><span>概念</span></div><div><br></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">从物理线路看到的帧，除其他信息外，还可看到前导码和帧开始符，任何物理硬件都会需要这些信息。</span></div></div></div><div style="text-align: left;"><div><div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/ce0b031a-4745-45e6-9643-fd210af0833b.jpg"></div><div style="text-align: center;"><span>图 1 - 以太帧的前导码、帧开始符的</span><span>概念</span></div><div style="text-align: center;"><br></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><br></div><div><br></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><b>2.2、以太帧概念图</b></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><b>● 资料 1：</b></div></div></div></div></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span"><div><div><div><div><br></div></div></div></div></span></div><blockquote style="text-align: center;"><div><div><div><div><img src="" width="508" height="192"><img src="文件传输_基础知识（index）_files/df0a52b7-dc9e-408a-a224-932055c9b3ae.jpg"></div></div></div></div></blockquote><blockquote style="text-align: center;"><div><span data-wiz-span="data-wiz-span">图 1 -&nbsp; 帧格式 帧头 + 帧体 + 帧尾（Traile：拖尾）</span></div></blockquote><blockquote style="text-align: center;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: center;"><div><div><div><img src="" width="669" height="442"></div></div></div></blockquote><blockquote style="text-align: center;"><div><div><div><img src="文件传输_基础知识（index）_files/d1635e25-bc8e-4c16-b115-41703751b13b.jpg" width="686" height="417"></div></div></div></blockquote><blockquote style="text-align: center;"><div><div><div><span>图 2 -&nbsp;&nbsp;</span><span>以太 2 以太帧格式</span></div></div></div></blockquote><blockquote style="text-align: center;"><div><div><img src="文件传输_基础知识（index）_files/78580ee0-7f94-4ebb-8151-2cd5514b6d18.jpg"></div></div></blockquote><blockquote style="text-align: center;"><div>图 3 - 以太 2 以太帧与 802.3 以太帧的结构<img src="" width="965" height="480"><img src="文件传输_基础知识（index）_files/0f98a806-ec93-43ed-bfa3-03ce7c537d24.jpg"></div></blockquote><div style="text-align: center;"><div><div><div><span data-wiz-span="data-wiz-span">图 4 - 以太帧的发送和接收</span></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>● 资料 2：</b></div></div></div><div style="text-align: left;"><div><br></div></div><div style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/0.24299700209781097.png" alt="ä»¥å¤ªå¸§ç»æï¼æ&nbsp;¼å¼ï¼"></div></div><div style="text-align: center;"><div><div><span data-wiz-span="data-wiz-span">图 1 -&nbsp; 以太帧的结构</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>● 资料 3：</b></div></div></div><div style="text-align: center;"><div><div><img src="" width="531" height="479"><img src="文件传输_基础知识（index）_files/0.6804493684724169.png"></div></div></div><div style="text-align: center;"><div><div><span data-wiz-span="data-wiz-span">图 1 - 以太帧的封装格式</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/60e13f60-4eb6-46eb-8441-f1b4afd4c255.png"></div></div><div style="text-align: center;"><div><div><div><span data-wiz-span="data-wiz-span">图 2 - 以太帧的结构</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><br></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>数据包与数据帧：</b></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据帧</span><span data-wiz-span="data-wiz-span"> &gt; </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">，且</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据</span><span data-wiz-span="data-wiz-span">帧 ≠ </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据帧</span><span data-wiz-span="data-wiz-span">有帧头、帧体、帧尾，帧体就是数据包。数据包只有包头和包体，包头是寻址信息，包体是数据。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">在传输过程中是以数据帧的形式传输的。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TCP/IP 协议</span><span data-wiz-span="data-wiz-span">是工作在 OSI 模型第三层(网络层)、第四层(传输层)上的，帧工作在第二层(数据链路层)。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据帧</span><span data-wiz-span="data-wiz-span">由 帧头+IP头+TCP/UDP头+数据+帧校验组成；</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">上一层的内容由下一层的内容来传输，所以在局域网中，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">“包”</span><span data-wiz-span="data-wiz-span">是包含在“帧”里的。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">我们可以用一个形象一些的例子对</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">的概念加以说明：我们在邮局邮寄产品时，虽然产品本身带有自己的包装盒，但是在邮寄的时候只用产品原包装盒来包装显然是不行的。必须把内装产品的包装盒放到一个邮局指定的专用纸箱里，这样才能够邮寄。这里，产品包装盒相当于数据包，里面放着的产品相当于可用的数据，而专用纸箱就相当于帧，且一个帧中只有一个数据包。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>3、报文（message）的概念：</b></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">报文</span><span data-wiz-span="data-wiz-span">是网路中交换与传输的数据单元，也是网络传输的单元，报文包含了将要发送的完整的数据信息，其长短不一。报文在传输过程中会不断地封装成分组、包、帧来传输，封装的方式就是添加一些控制信息组成的不受，那些就是报文头。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">报文</span><span data-wiz-span="data-wiz-span">也分报头和报体。</span></div></div></div><div style="text-align: left;"><div style="text-align: center;"><div><span data-wiz-span="data-wiz-span"><img src="文件传输_基础知识（index）_files/0.20618099409456137.png"><br></span></div><div><span data-wiz-span="data-wiz-span">图 1 - TCP/UDP 报文格式</span></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span"><img src="文件传输_基础知识（index）_files/0.9210056387375919.png"><br></span></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 2 - HTTP 报文格式<br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>4、数据包、</b><b>帧、报文的区别：</b></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">当</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">在数据链路层传输的时候叫做“帧”。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">然后这一个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">帧</span><span data-wiz-span="data-wiz-span">被接受并提交到第二层处理：剥开帧头和帧尾，获得数据包（对于第二层来说它只认识帧头和帧尾，其他包括包头等都是帧承载的普通数据）；</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">然后这个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">被提交到第三层：它能识别包头，得到被包在里面的信息（信息包含第四层TCP数据报头，对于第三层来说也是报头也是它承载的普通数据）。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">然后第三层结束以后把去掉报头的数据给第四层，这些数据就是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">报文</span><span data-wiz-span="data-wiz-span">。</span></div></div></div><div style="text-align: left;"><div><div><img src="" width="548" height="342"><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">报文</span><span data-wiz-span="data-wiz-span">中的数据是完整的，报文可以理解为要传递的一个完整文件，如记事本文件、电影文件，总之是一个完整的有意义的数据。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">这个文件如果能用一个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">传走，那么这个数据包也可以叫做报文。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">中的数据需要组装后才能是一个数据完整的报文。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包</span><span data-wiz-span="data-wiz-span">相当于细胞，报文相当于生物。</span><img src="" width="742" height="356"></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><span data-wiz-span="data-wiz-span"><img src="文件传输_基础知识（index）_files/0.062130744525437445.png" width="609" height="291"><br></span></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 1 - 数据包与报文的区别</span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">报文 (message)</span><span data-wiz-span="data-wiz-span"> 在应用层生成：报文段拼接后生成报文，即完整的信息。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">报文段 (segment</span><span data-wiz-span="data-wiz-span">) 在传输层生成：数据包加工后生成报文段。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数据包 (packet)</span><span data-wiz-span="data-wiz-span"> 在网络层生成：把以太帧解包加工后生成数据包。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">以太帧 (frame) </span><span data-wiz-span="data-wiz-span">在数据链路层生成：把数据包打包后生成以太帧。</span></div></div></div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.9650596169047684.png" alt="preview"></div><div style="text-align: center;"><div><div><span data-wiz-span="data-wiz-span">图 1 - 段、包、帧在网络上的传输、层级和关系</span></div></div></div><div style="text-align: left;"><div><div><br></div></div></div><div style="text-align: left;"><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/e01c2c90-f8c7-4360-a849-edc92de93a20.jpg" width="955" height="477"></div><div style="text-align: center;"><span>图 2 - 网络协议地图</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span">5、数据的封装过程和对应的协议：</span></b></div><div><span data-wiz-span="data-wiz-span"><div style="text-align: center;"><div><span data-wiz-span="data-wiz-span"><img src="文件传输_基础知识（index）_files/0.8930926362696283.png"><br></span></div><div><span data-wiz-span="data-wiz-span">图 1 - 数据的封装过程和对应的协议、对应的层级</span></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span"><img src="文件传输_基础知识（index）_files/0.053339048069860735.png"></span></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span"><div><div><span data-wiz-span="data-wiz-span">图 2 - 数据的封装过程和对应的层级</span></div></div><br><br></span></div><br></span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>6、附：IP 协议数据包结构：</b></div></div></div><div style="text-align: left;"><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/0.3099173909574524.png" alt="preview" width="422" height="291"></div><div style="text-align: center;">图 1 - IP 协议数据包结构</div></div><div style="text-align: left;"><div><div><br></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>Ref：</b></div></div></div><blockquote style="text-align: left;"><div><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85"><span data-wiz-span="data-wiz-span">《百度 - 数据包》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.bilibili.com/s/video/BV1JT4y1F7QF"><span data-wiz-span="data-wiz-span">《bilibili - 05-HCIA 以太网帧及MAC地址》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="http://c.biancheng.net/view/6391.html"><span data-wiz-span="data-wiz-span">《c语言中文 - 以太网数据帧格式（结构）图解》</span></a></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://zhidao.baidu.com/question/16642303.html"><span data-wiz-span="data-wiz-span">《百度 -&nbsp;数据包和数据帧分别代表什么？》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://baike.baidu.com/item/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%B8%A7%E6%A0%BC%E5%BC%8F/10290427?fr=aladdin"><span data-wiz-span="data-wiz-span">《百度 - 以太网帧格式》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://blog.csdn.net/damishidai15/article/details/88746367"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;帧、报文、数据包的差别》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><a href="https://blog.51cto.com/91xueit/1359295"><span data-wiz-span="data-wiz-span">《51cto -&nbsp;报文和数据包的区别》</span></a></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://blog.csdn.net/a3192048/article/details/84671340"><span data-wiz-span="data-wiz-span">《csdn - 报文、报文段、分组、包、数据报、帧、数据流的概念区别》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><a href="https://segmentfault.com/a/1190000023409283"><span data-wiz-span="data-wiz-span">《SegmentFault 图解TCP报文段、数据包、帧》</span></a></div></div></blockquote><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><h2><span data-wiz-span="data-wiz-span">XML 与 HTML：</span></h2></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XML</span><span data-wiz-span="data-wiz-span">，Extensive <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Markup</span> Language，可扩展标记语言。&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;Extensive：可扩展的，广阔的</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span><span data-wiz-span="data-wiz-span">，Hypertext </span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">Markup</span><span data-wiz-span="data-wiz-span">&nbsp;Language，超本文标记语言。&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Hyper：亢奋的，精力旺盛的</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ML</span><span data-wiz-span="data-wiz-span">，Markup Language，就是 &lt;Tag&gt;&lt;/Tag&gt; 语言。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">严格语法的 HTML 就是 XML？</span><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">错</span>，是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">XHTML</span>。关于“</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML与XHTML有什么区别</span><span data-wiz-span="data-wiz-span">”见硬盘文档<u>《高频前端开发面试问题及答案整理_涂改版.doc》</u><u>之</u><u>《HTML与XHTML有什么区别》</u>。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">一般 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XML</span><span data-wiz-span="data-wiz-span"> 用来像 JSON 那样传递数据，Tag name 作 name，Tag body 作 value。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">关于“</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XML和JSON的区别</span><span data-wiz-span="data-wiz-span">”见硬盘文档<u>《高频前端开发面试问题及答案整理_涂改版.doc》</u><u>之</u><u>《XML和JSON的区别？》</u>。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XML</span><span data-wiz-span="data-wiz-span"> 维基百科都说它是一种<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">标记语言</span>，因此不要听信网上一些人的谬论“它不是标记语言”。依据都没有就乱讲。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XML</span><span data-wiz-span="data-wiz-span"> 标签<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">没有</span>像 HTML 那样被<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">预定义</span>。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">XML</span><span data-wiz-span="data-wiz-span">&nbsp;是一种很像 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span><span data-wiz-span="data-wiz-span"> 的标记语言，仿佛是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTML 抽象类</span>，但他们之间</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">没有继承关系</span><span data-wiz-span="data-wiz-span">。&nbsp;</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">XML</span><span data-wiz-span="data-wiz-span">&nbsp;的设计宗旨是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输数据</span><span data-wiz-span="data-wiz-span">，而不是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">显示数据</span><span data-wiz-span="data-wiz-span">，HTML 恰恰相反。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">XML</span><span data-wiz-span="data-wiz-span">&nbsp;不是用来取代 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span><span data-wiz-span="data-wiz-span"> 的，他们为不同的目的而设计，HTML 设计核心是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">显示 Web 数据</span><span data-wiz-span="data-wiz-span">，XML 是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输 Web 数据</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">XML</span><span data-wiz-span="data-wiz-span">&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不能</span>用来</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">直接写网页</span><span data-wiz-span="data-wiz-span">，要转换成 HTML 格式才能在浏览器上显示。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">XML</span><span data-wiz-span="data-wiz-span">&nbsp;与 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span><span data-wiz-span="data-wiz-span"> 有相同的地方，比如都有 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">DOM</span><span data-wiz-span="data-wiz-span">，都可以用 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">CSS</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)">XML</span><span data-wiz-span="data-wiz-span">&nbsp;与 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">HTML</span><span data-wiz-span="data-wiz-span">&nbsp;最大的不同就是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">应用方向不同</span><span data-wiz-span="data-wiz-span">，前者是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">传输</span><span data-wiz-span="data-wiz-span">方向，后者是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">显示</span><span data-wiz-span="data-wiz-span">方向。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: center;"><div><div><div><span><img src=""><img src="文件传输_基础知识（index）_files/0.7751385431925942.png"></span><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: center;"><div><div><div><span data-wiz-span="data-wiz-span">图 1 - HTML 内容格式</span><img src=""></div></div></div></div><div data-mode="XML" data-theme="material"  id="wiz_cm_1637396779792_1538" class="wiz-code-container"><textarea style="display:none;">&lt;?xml version="" encoding="utf-8" ?&gt;
&lt;书籍列表&gt;
    &lt;计算机书籍&gt;
        &lt;书名&gt;XML的今生今世&lt;/书名&gt;
        &lt;价格&gt;66.66&lt;/价格&gt;
        &lt;简要介绍&gt;该书详细描写XML的从出生到衰老的整个过程&lt;/简要介绍&gt;
    &lt;/计算机书籍&gt;
&lt;/书籍列表&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-material" data-id="wiz_cm_1637396779792_1538"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 33px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 200px; min-width: 494.188px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>8</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">&lt;?xml</span> <span class="cm-meta">version="" encoding="utf-8" ?&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">书籍列表</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">计算机书籍</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">书名</span><span class="cm-tag cm-bracket">&gt;</span>XML的今生今世<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">书名</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">价格</span><span class="cm-tag cm-bracket">&gt;</span>66.66<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">价格</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">简要介绍</span><span class="cm-tag cm-bracket">&gt;</span>该书详细描写XML的从出生到衰老的整个过程<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">简要介绍</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">计算机书籍</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">书籍列表</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 200px;"></div><div class="CodeMirror-gutters" style="height: 230px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图&nbsp;2 - XML<span>&nbsp;</span>内容格式</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><b>Ref：</b></div></div></div></div><blockquote style="text-align: left;"><div><a href="https://www.runoob.com/xml/xml-intro.html"><span data-wiz-span="data-wiz-span">《runoob - XML 简介》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://www.cnblogs.com/hanfanfan/p/9734048.html"><span data-wiz-span="data-wiz-span">《cnblogs -&nbsp;html 与 xml 的区别与联系》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://blog.csdn.net/u010097777/article/details/41679787"><span data-wiz-span="data-wiz-span">《csdn -&nbsp;XML和HTML》</span></a></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br><br></span></div></div></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><h2 style="font-size:1.5rem;"><b>FormData&nbsp;</b></h2></div></div></div></div></div><blockquote style="text-align: left;"></blockquote><div><div><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;"><br></span></b></span></div><div><b style="font-size:1.333rem"><span data-wiz-span="data-wiz-span">概念：</span></b></div></div><blockquote style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">字面意思是表单数据，它在<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">不同的场合有不同的意义</span>。</span></div></div></blockquote><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">JS WebAPI</span><span data-wiz-span="data-wiz-span">：JS 的 WebAPI，用来构造 HTML 表单数据数据，即 &lt;form&gt; 元素的数据。这样做是为了操作二进制数据。</span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Form encode type</span><span data-wiz-span="data-wiz-span">：Form 属性 enctype 指定的 form 数据的编码方式之一。如果指定为“multipart/form-data”（多部件/表单数据），则表示告诉浏览器</span></div></div></div></div></div></div><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><div style="text-align: left;"><div><div><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">把我的 form 数据读成二进制的流数据。</span></div></div></div></div></div></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">JS WebAPI 时：</span></b></div><div style="text-align: left;"><b style="font-size:1.167rem"><br></b></div><div style="text-align: left;"><b style="font-size:1.167rem">FormData 的代码形式：</b></div><div><span data-wiz-span="data-wiz-span">我们先来发送一个简单的表单。</span><span>正如你所看到的，它几乎就是一行代码：</span></div></div><div data-mode="HTML" data-theme="eclipse"  id="wiz_cm_1637397365608_4120" class="wiz-code-container"><textarea style="display:none;">&lt;form id="formElem"&gt;
  &lt;input type="text" name="name" value="John"&gt;
  &lt;input type="text" name="surname" value="Smith"&gt;
  &lt;input type="submit"&gt;
&lt;/form&gt;

&lt;script&gt;
  formElem.onsubmit = async (e) =&gt; {
    e.preventDefault();

    let response = await fetch('/article/formdata/post/user', {
      method: 'POST',
      body: new FormData(formElem)		// FormData 在这！！
    });

    let result = await response.json();

    alert(result.message);
  };
&lt;/script&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637397365608_4120"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 488px; min-width: 492.016px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>20</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">id</span>=<span class="cm-string">"formElem"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"text"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"name"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"John"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"text"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"surname"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"Smith"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-variable">formElem</span>.<span class="cm-property">onsubmit</span> <span class="cm-operator">=</span> <span class="cm-keyword">async</span> (<span class="cm-def">e</span>) <span class="cm-operator">=&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable-2">e</span>.<span class="cm-property">preventDefault</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">let</span> <span class="cm-def">response</span> <span class="cm-operator">=</span> <span class="cm-keyword">await</span> <span class="cm-variable">fetch</span>(<span class="cm-string">'/article/formdata/post/user'</span>, {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-property">method</span>: <span class="cm-string">'POST'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-property">body</span>: <span class="cm-keyword">new</span> <span class="cm-variable">FormData</span>(<span class="cm-variable">formElem</span>)<span class="cm-tab" role="presentation" cm-text="	">  </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// FormData 在这！！</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    });</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">let</span> <span class="cm-def">result</span> <span class="cm-operator">=</span> <span class="cm-keyword">await</span> <span class="cm-variable-2">response</span>.<span class="cm-property">json</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">alert</span>(<span class="cm-variable-2">result</span>.<span class="cm-property">message</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  };</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">20</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 488px;"></div><div class="CodeMirror-gutters" style="height: 518px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><div><div><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/b6a2f4ba-d4b7-455f-895d-42f18e4f33b5.png"></div><div><br></div></div><div><br></div><div><br></div><div style="text-align: left;"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">FormData 的数据存在形式：</span></b></div></div><div>以<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">键值对</span>的形式存在于 Http 请求的 Content 中。</div></div><div style="text-align: center;"><div><img src="文件传输_基础知识（index）_files/0.388027941645582.png"></div></div><div style="text-align: center;"><span data-wiz-span="data-wiz-span">图 1 -&nbsp;FormData 在Http 请求中的存在形式</span></div><div><br></div><div><br></div><div><br></div><div><br></div><div style="text-align: left;"><b style="font-size:1.167rem">F</b><span style="font-size: 1.167rem;"><b></b></span><span style="font-size: 1.167rem;"><b>ormData</b></span><b style="font-size: 1.167rem;"></b><b style="font-size:1.167rem">&nbsp;的“打开</b><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">方式”：</span></b></div><div>● 直接存储 &lt;form&gt; 数据以便用 JS <span>搞一些</span>小动作（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">构造器传参</span>）：</div></div><div data-mode="HTML" data-theme="eclipse"  id="wiz_cm_1637398027743_4349" class="wiz-code-container"><textarea style="display:none;">&lt;form id="formElem"&gt;
  &lt;input type="text" name="name" value="John"/&gt;
  &lt;input type="submit"/&gt;
&lt;/form&gt;

&lt;script&gt;
  formElem.onsubmit = async (e) =&gt; {		// formElem：就是 form 的 DOM 对象，这用直接用 id 获取 DOM 对象的方法是 HTML5 的新特性
    e.preventDefault();
    let formData = new FormData(formElem);		// 直接用构造函数装起来
  };
&lt;/script&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637398027743_4349"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 1004px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 272px; min-width: 974.297px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>11</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">id</span>=<span class="cm-string">"formElem"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"text"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"name"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"John"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-variable">formElem</span>.<span class="cm-property">onsubmit</span> <span class="cm-operator">=</span> <span class="cm-keyword">async</span> (<span class="cm-def">e</span>) <span class="cm-operator">=&gt;</span> {<span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// formElem：就是 form 的 DOM 对象，这用直接用 id 获取 DOM 对象的方法是 HTML5 的新特性</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable-2">e</span>.<span class="cm-property">preventDefault</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">let</span> <span class="cm-def">formData</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">FormData</span>(<span class="cm-variable">formElem</span>);<span class="cm-tab" role="presentation" cm-text="	">  </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 直接用构造函数装起来</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  };</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 272px;"></div><div class="CodeMirror-gutters" style="height: 302px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span">● 发送带有文件的表单（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">构造器传参</span>、<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">append 添加表单项</span>）：</span></div></div><div data-mode="HTML" data-theme="eclipse"  id="wiz_cm_1637399176623_2015" class="wiz-code-container"><textarea style="display:none;">&lt;form id="formElem"&gt;
  &lt;input type="file" name="picture" accept="image/*"/&gt;
  &lt;input type="submit"/&gt;
&lt;/form&gt;

&lt;script&gt;
  formElem.onsubmit = async (e) =&gt; {
    e.preventDefault();
    let formData = new FormData(formElem);			// 直接用构造函数装起来。也可以用 append() 添加一个 form item
  };
&lt;/script&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637399176623_2015"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 880px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 272px; min-width: 850.391px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>11</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">id</span>=<span class="cm-string">"formElem"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"file"</span> <span class="cm-attribute">name</span>=<span class="cm-string">"picture"</span> <span class="cm-attribute">accept</span>=<span class="cm-string">"image/*"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-variable">formElem</span>.<span class="cm-property">onsubmit</span> <span class="cm-operator">=</span> <span class="cm-keyword">async</span> (<span class="cm-def">e</span>) <span class="cm-operator">=&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable-2">e</span>.<span class="cm-property">preventDefault</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">let</span> <span class="cm-def">formData</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">FormData</span>(<span class="cm-variable">formElem</span>);<span class="cm-tab" role="presentation" cm-text="	">  </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 直接用构造函数装起来。也可以用 append() 添加一个 form item</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  };</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 272px;"></div><div class="CodeMirror-gutters" style="height: 302px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><span><br></span></div><div><span>● 发送具有 Blob 数据的表单（</span><span style="color:rgb(255, 104, 32)">append 添加表单项</span><span>）：</span><br></div></div><div data-mode="HTML" data-theme="eclipse"  id="wiz_cm_1637399185608_7908" class="wiz-code-container"><textarea style="display:none;">&lt;body style="margin:0"&gt;
  &lt;canvas id="canvasElem" width="100" height="80" style="border:1px solid"&gt;&lt;/canvas&gt;
  &lt;input type="button" value="提交" onclick="submit()"/&gt;
    
  &lt;script&gt;
    // 忽略下段代码
    canvasElem.onmousemove = function(e) {
      let ctx = canvasElem.getContext('2d');
      ctx.lineTo(e.clientX, e.clientY);
      ctx.stroke();
    };

    async function submit() {
      // 获取一个 Blob 数据。
      let imageBlob = await new Promise(resolve =&gt; canvasElem.toBlob(resolve, 'image/png'));
      // 重点在这！！ append()
      let formData = new FormData();
      formData.append("image", imageBlob, "image.png");		// 请注意图片 Blob 是如何添加的，参数是 image，而不是 file
    }
  &lt;/script&gt;
&lt;/body&gt;</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637399185608_7908"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 919px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 512px; min-width: 888.875px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>21</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">body</span> <span class="cm-attribute">style</span>=<span class="cm-string">"margin:0"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">canvas</span> <span class="cm-attribute">id</span>=<span class="cm-string">"canvasElem"</span> <span class="cm-attribute">width</span>=<span class="cm-string">"100"</span> <span class="cm-attribute">height</span>=<span class="cm-string">"80"</span> <span class="cm-attribute">style</span>=<span class="cm-string">"border:1px solid"</span><span class="cm-tag cm-bracket">&gt;&lt;/</span><span class="cm-tag">canvas</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">type</span>=<span class="cm-string">"button"</span> <span class="cm-attribute">value</span>=<span class="cm-string">"提交"</span> <span class="cm-attribute">onclick</span>=<span class="cm-string">"submit()"</span><span class="cm-tag cm-bracket">/&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// 忽略下段代码</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">canvasElem</span>.<span class="cm-property">onmousemove</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span>(<span class="cm-def">e</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-keyword">let</span> <span class="cm-def">ctx</span> <span class="cm-operator">=</span> <span class="cm-variable">canvasElem</span>.<span class="cm-property">getContext</span>(<span class="cm-string">'2d'</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-variable-2">ctx</span>.<span class="cm-property">lineTo</span>(<span class="cm-variable-2">e</span>.<span class="cm-property">clientX</span>, <span class="cm-variable-2">e</span>.<span class="cm-property">clientY</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-variable-2">ctx</span>.<span class="cm-property">stroke</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    };</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">async</span> <span class="cm-keyword">function</span> <span class="cm-def">submit</span>() {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-comment">// 获取一个 Blob 数据。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-keyword">let</span> <span class="cm-def">imageBlob</span> <span class="cm-operator">=</span> <span class="cm-keyword">await</span> <span class="cm-keyword">new</span> <span class="cm-variable">Promise</span>(<span class="cm-def">resolve</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">canvasElem</span>.<span class="cm-property">toBlob</span>(<span class="cm-variable-2">resolve</span>, <span class="cm-string">'image/png'</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-comment">// 重点在这！！ append()</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-keyword">let</span> <span class="cm-def">formData</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">FormData</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">      <span class="cm-variable-2">formData</span>.<span class="cm-property">append</span>(<span class="cm-string">"image"</span>, <span class="cm-variable-2">imageBlob</span>, <span class="cm-string">"image.png"</span>);<span class="cm-tab" role="presentation" cm-text="	"> </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-comment">// 请注意图片 Blob 是如何添加的，参数是 image，而不是 file</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">20</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">script</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">21</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 512px;"></div><div class="CodeMirror-gutters" style="height: 542px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;"><b>FormData 的坑：</b></span></div><div><span data-wiz-span="data-wiz-span">详见</span><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;"><a href="https://www.jianshu.com/p/9a0615b8c7fe"><span data-wiz-span="data-wiz-span" style="font-size: 1rem;">《简书 - HTML5的FormData上传文件和数据踩坑记录》</span></a></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><b style="font-size: 1.333rem;"><span data-wiz-span="data-wiz-span">疑问：</span></b></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="font-weight: bold; font-size: 1.5rem;">Q：</span><b>为什么可以从 &lt;script&gt; 中通过 &lt;form&gt; 的 </b><span data-wiz-span="data-wiz-span" style="font-weight: bold; color: rgb(255, 104, 32);">id</span><b> 可以</b></span><b style="color:rgb(255, 104, 32)"><span data-wiz-span="data-wiz-span">直接获取</span></b><span style="color:rgb(255, 104, 32)"><b></b></span><span><b><span data-wiz-span="data-wiz-span">到该</span></b></span><b style="color:rgb(255, 104, 32)"><span data-wiz-span="data-wiz-span"> DOM 元素</span></b><span data-wiz-span="data-wiz-span"><b>？</b></span></div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.5rem;">A：</span></b></span><span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTML5</span> 新特性。</span></div></div><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span">HTML5规范文档中指出：“如果一个元素符合下面两条规则中的任一条，则 window 对象中必须要有与之对应的一个属性，属性值就是这个对象。”</span></div></div><div style="text-align: left;"><div><br></div></div></blockquote><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><b>Ref：</b></span></div></div><blockquote><div style="text-align: left;"><div><a href="https://blog.csdn.net/weixin_34199405/article/details/86228393">《csdn - js DOM 元素ID就是全局变量》</a></div></div></blockquote><blockquote><div style="text-align: left;"><div><a href="https://zhuanlan.zhihu.com/p/392810408">《<span style="color: rgb(0, 0, 0);">知乎 - html元素的id属性值可以直接在js中操作</span>》</a></div></div></blockquote><blockquote><div style="text-align: left;"><div><div><a href="https://segmentfault.com/q/1010000006705153">《SegmentFault - 为什么可以从script中通过form的id可以直接获取到该dom元素？》</a></div></div></div></blockquote><div style="text-align: left;"><div><div><br></div></div><div><br></div></div></blockquote><div style="text-align: left;"><div><div style="text-align: left;"><span style="font-size:1.5rem"><b>Q：</b></span>“<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">使用 formData 无法得到文件的内容</span>” 这句话如何理解？如果无法得到文件内容，那么 <span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">&lt;form&gt;</span> + <font color="#ffffff"><span style="background-color: rgb(102, 102, 102);">JSP</span></font>&nbsp;又是怎么读取文件的呢？&nbsp;</div></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b></div></div><blockquote><div style="text-align: left;"><div>关于这句话，可能有 2 种情况：</div></div></blockquote><blockquote><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span" style="color: rgb(51, 102, 255);">情况一</span>：前端获取不到——直接打印 formData 发现为空。</div></div></blockquote><blockquote><blockquote><div style="text-align: left;"><div>这是因为无法直接通过 formData 对象获取，需要使用一些方法：</div></div></blockquote></blockquote><blockquote><blockquote><blockquote><div style="text-align: left;"><div>● 使用 formData.get('file')</div></div></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><div style="text-align: left;"><div>● 使用 for-of 迭代</div></div></blockquote></blockquote></blockquote><blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span" style="color: rgb(51, 102, 255);">情况二</span>：后端获取不到非文件数据——request.getParameter() 方法获取非文件的数据时发现为空</div></div></blockquote><blockquote><blockquote><div style="text-align: left;">原因和解法略，详见<a href="https://blog.csdn.net/yin_xing_ye/article/details/83961355">《csdn - 用multipart/form-data提交表单文件数据获取不了解决办法》</a></div></blockquote></blockquote></blockquote><blockquote><div style="text-align: left;"><div><br></div><div>&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">&lt;form&gt;</span><span><span>&nbsp;</span>+<span>&nbsp;</span></span><font color="#ffffff"><span style="background-color:rgb(102, 102, 102);">JSP</span></font> 是提交的时候文件是由 &lt;form&gt; 读取并发送的，不需要我们操心。</div><div><br></div></div></blockquote><blockquote><div style="text-align: left;"><div><b>Ref：</b></div></div><blockquote><div style="text-align: left;"><div><a href="https://blog.csdn.net/weixin_30484247/article/details/96101327">《csdn - formData看不到数据的原因》</a></div></div></blockquote><div style="text-align: left;"><div><br></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><div><div><div style="text-align: left;"><b style="font-size:1.333rem">Ref</b><b></b><b><span data-wiz-span="data-wiz-span" style="font-size: 1.333rem;">：</span></b></div></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;</span><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《MDN - Web API 接口参考：FormData》</span></a><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;</span><a href="https://zh.javascript.info/formdata"><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none">《现代JS - FormData》</span></a></div></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><h2 style="font-size:1.5rem;"><b>HTML &lt;form&gt;</b></h2></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div><h3><span data-wiz-span="data-wiz-span">&lt;form&gt; 的 action：</span></h3><div><span data-wiz-span="data-wiz-span">action 属性定义了当表单被提交时数据被送往何处。</span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><div><span data-wiz-span="data-wiz-span">语法：formObject.action=URL</span></div></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">action 的 URL 可以是&nbsp;JSP，也可以是&nbsp;HTML，也可以是接口</span></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">Ref：</span></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp; </span><a href="https://www.runoob.com/jsref/prop-form-action.html"><span data-wiz-span="data-wiz-span">《runoob - Form action 属性》</span></a><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div><div style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;<br></span></div></div></div></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><div><div><h3><span data-wiz-span="data-wiz-span">&lt;form&gt; 的 Multipart 多部件请求</span></h3><div><span data-wiz-span="data-wiz-span">当 &lt;</span><span data-wiz-span="data-wiz-span" style="color:rgb(0, 147, 0)">form </span><span data-wiz-span="data-wiz-span" style="color:rgb(0, 0, 255)">enctype</span><span data-wiz-span="data-wiz-span">="</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">multipart/form-data</span><span data-wiz-span="data-wiz-span">"&gt; 时，&lt;</span><span data-wiz-span="data-wiz-span" style="color:rgb(0, 147, 0)">form<span>&nbsp;</span></span><span data-wiz-span="data-wiz-span">&gt; 发出的请求为 </span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">Content Type</span><span data-wiz-span="data-wiz-span"> 为 multipart/form-data 格式，请求体携带<span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">多部件（Multipart）</span>的请求，如图所示</span></span></div></div></div></div></div></div><blockquote style="text-align: center;"><blockquote><div><img src="文件传输_基础知识（index）_files/0.14491498147315185.png" alt="è¿éåå¾çæè¿°"></div><div>&nbsp; &nbsp;图1 - 请求头<span><br></span></div></blockquote><blockquote><div><img src="文件传输_基础知识（index）_files/0.530955128396017.png" alt="è¿éåå¾çæè¿°"></div><div><span>&nbsp; &nbsp;图2 - 多部件（Multipart）请求体</span><span><br></span></div></blockquote></blockquote><blockquote style="text-align: center;"><br></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span>多部件（Multipart）请求体</span><span>：就是把每一个表单项（form item）分割为一个部件（part），再以请求头的 content-type 的 boundary 后面的一串随机字符串作为分割标识 。&nbsp;</span><br></div><div><br></div><div><br></div><div><b>Ref：</b></div></div><blockquote><div style="text-align: left;"><div><a href="https://www.cnblogs.com/aotemanzhifu/p/9192355.html" style="text-decoration-skip-ink: none;">《cnblogs - JavaWeb上传原理和实现》</a></div></div></blockquote><div style="text-align: left;"><div><div><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div></div></div><div style="text-align: left;"><br></div><div style="text-align: left;"><br></div><div style="text-align: left;"><br></div><div style="text-align: left;"><br></div><div style="text-align: left;"><br></div><div style="text-align: left;"><br></div><div style="text-align: left;"><br></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h2><span data-wiz-span="data-wiz-span">二进制对象——Blob、File、FileReader、ArrayBuffer、Buffer、Uint8Array</span></h2></div></div><div style="text-align: left;"><div><div><img src=""><br></div></div></div><div style="text-align: left;"><div style="text-align: center;"><div><div><img src="文件传输_基础知识（index）_files/917114c6-bbeb-4c9b-a839-69fb4ea0eca8.jpg"></div><div>图 1 - 二进制数据处理对象 Blob、File、FileReader、ArrayBuffer、Buffer、Uint8Array 的关系</div><div><br></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><b>基本概念：</b></h3></div></div><div style="text-align: left;"><div><div><b>Blob（WebAPI）：</b></div></div></div><blockquote style="text-align: left;"></blockquote><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Blob</span><span data-wiz-span="data-wiz-span">，Big Large Object，表示一个不可变的、原始数据的类似文件的对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ReadableStream</span><span data-wiz-span="data-wiz-span"> 来用于数据操作。&nbsp;它不是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">JS</span><span data-wiz-span="data-wiz-span"> 的类型，它是文件的&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Web API</span><span data-wiz-span="data-wiz-span">。</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Blob</span><span data-wiz-span="data-wiz-span"> 是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">File</span><span data-wiz-span="data-wiz-span"> 的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">父类</span>，它俩都是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">接口</span><span data-wiz-span="data-wiz-span">。</span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><b>File</b><b></b><b></b><b></b><b><span data-wiz-span="data-wiz-span">（W</span></b><b><span data-wiz-span="data-wiz-span">ebAPI）：</span></b></div><blockquote><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">File</span><span data-wiz-span="data-wiz-span"> 对象<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">继承</span>自 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Blob</span><span data-wiz-span="data-wiz-span">，并扩展了与</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">文件系统</span><span data-wiz-span="data-wiz-span">相关的功能。这个对象似乎不常用。</span></div></blockquote><div><span data-wiz-span="data-wiz-span"><br></span></div><div style="text-align: left;"><b>FileReader</b><b></b><b></b><b></b><b><span data-wiz-span="data-wiz-span">（</span></b><b><span data-wiz-span="data-wiz-span">WebAPI）：</span></b></div><blockquote><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">FileReader</span><span data-wiz-span="data-wiz-span"> 是一个对象，其唯一目的是从 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Blob</span><span data-wiz-span="data-wiz-span">（包括 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">File</span><span data-wiz-span="data-wiz-span">）对象中<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">读取数据</span>。但它跟</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);"> File</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Blob</span><span data-wiz-span="data-wiz-span"> 没有<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">血缘关系</span>（继承关系）。</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">FileReader</span><span> 允许 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Web</span><span> 应用程序（浏览器）异步<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">读取文件</span>（或原始数据缓冲区 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Buffer</span><span>）的内容，前提是使用 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">File</span><span> 或 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">Blob</span><span> 对象指定要读取的文件或数据。</span><span>其中&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">File&nbsp;</span><span>对象可以是来自用户在一个&nbsp;&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">&lt;input&gt;</span><span>元素上选择文件后返回的&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">FileList&nbsp;</span><span>对象,也可以来自</span><span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">拖放操作</span>生成的 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">DataTransfer&nbsp;</span><span>对象,还可以是来自在一个&nbsp;</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">HTMLCanvasElement&nbsp;</span><span>上执行</span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">mozGetAsFile()&nbsp;</span><span>方法后所返回的结果。</span></div></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span><b>ArrayBuffer（JS 类）：</b></span></div></div></div><blockquote style="text-align: left;"><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 是&nbsp;ES6 引入的 3 个<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">二进制数组对象</span>中的一种，是 3 个二进制数组对象的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">核心</span>对象，是所有的基础，是原始的二进制数据，是基本的二进制对象 —— 对固定长度的连续内存空间（就是栈）的引用。它类似</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数组</span><span data-wiz-span="data-wiz-span">，但本质不是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数组</span><span data-wiz-span="data-wiz-span">，它跟</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数组</span><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">没有半毛钱关系</span>，只是操作方法像</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">数组</span><span data-wiz-span="data-wiz-span">一样。</span></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><b>Uint8Array（JS&nbsp;</b><b></b><b>类</b><b></b><b>）：</b></div></div></div><blockquote style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint</span><span data-wiz-span="data-wiz-span">，Unsigned int，无符号整型（整数），</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8</span><span data-wiz-span="data-wiz-span"> 就是 8 位的 Uint。Uint16 同理。</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Uint8Array</span><span data-wiz-span="data-wiz-span"> 是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> （<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">抽象类</span>）的子类（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">实现类</span>），是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">视图</span>（</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">View</span><span data-wiz-span="data-wiz-span">）之一，用于操作 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 的数据。</span></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span><b>Buffer（Node.js 类）：</b></span></div></div></div><blockquote style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Buffer&nbsp;</span><span data-wiz-span="data-wiz-span">是&nbsp;<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Node.js</span> 提供的一个用于操作 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span">&nbsp;的视图(</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">view</span><span data-wiz-span="data-wiz-span">)（就是工具）。&nbsp; &nbsp;&nbsp;</span></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><b>关系和区别：</b></h3></div></div><div style="text-align: left;"><div><div><span><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Blob</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Buffer</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8Array</span><span data-wiz-span="data-wiz-span">&nbsp;之间<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">没有继承关系</span>。</span></div></span></div></div></div><div style="text-align: left;"><div><div><span><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8Array</span><span data-wiz-span="data-wiz-span"> 和&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Buffer</span><span data-wiz-span="data-wiz-span"> 一样，是一个用于操作 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 的<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">视图</span>(<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">view</span>)（就是工具），只是&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8Array</span><span data-wiz-span="data-wiz-span"> 是&nbsp;</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ES6</span><span data-wiz-span="data-wiz-span"> 提供的，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Buffer</span><span data-wiz-span="data-wiz-span"> 是 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Node.js</span><span data-wiz-span="data-wiz-span"> 提供的。一般在</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">前端</span><span data-wiz-span="data-wiz-span">用前者，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">后端</span><span data-wiz-span="data-wiz-span">用后者。</span></div></span></div></div></div><div style="text-align: left;"><div><div><br></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><h3><span><b>ArrayBuffer 详解：</b></span></h3></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">由于</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 是核心，因此对 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 深入研究。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><div style="text-align: center;"><img src="文件传输_基础知识（index）_files/5b72c691-8820-4bcf-ae6b-e503edab8a9e.png"></div><div style="text-align: center;">图 1 - ArrayBuffer 备忘清单</div><div><br></div><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span">、</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">TypedArray</span><span data-wiz-span="data-wiz-span">、</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">DataView</span><span data-wiz-span="data-wiz-span"> —— JS </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">二进制数组</span><span data-wiz-span="data-wiz-span">三剑客：</span></div></div></div></div><blockquote style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">ES6</span><span data-wiz-span="data-wiz-span"> 引入类型化数组 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">TypedArray</span><span data-wiz-span="data-wiz-span">，类型化数组<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">像极了数组</span>，其像数组一样元素被设置为特定类型的值，但它</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">不是真正的数组</span><span data-wiz-span="data-wiz-span">，它的本质是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">类似数组</span>的 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Buffer</span><span data-wiz-span="data-wiz-span"> 对象。它的子类 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Uint8Array</span><span data-wiz-span="data-wiz-span"> 表示一个 8 位无符号整型数组。</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> 用于解决 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Javascript</span><span data-wiz-span="data-wiz-span"> </span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">处理二进制数据的问题</span><span data-wiz-span="data-wiz-span">。</span></div></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">说到 JS 处理二进制数据，就要说说</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">二进制数组</span><span data-wiz-span="data-wiz-span">了。JS&nbsp;中二进制数组由三类对象组成：</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span">、</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">TypedArray</span><span data-wiz-span="data-wiz-span">、</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">DataView</span><span data-wiz-span="data-wiz-span">。</span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">ES6</span> 将 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> 和 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">DataView</span><span data-wiz-span="data-wiz-span"> 3 个二进制数组类引入，它们属于独立的规格，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">没有继承关系</span><span data-wiz-span="data-wiz-span">，而且都是以数组的语法处理二进制数据，所以统称为二进制数组。但是，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 0, 0);"><b>二进制数组的性质不是数组，而是像极了数组的（复合）对象</b></span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">简单说，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 对象代表原始的二进制数据，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> </span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">视图</span><span data-wiz-span="data-wiz-span">用来读写简单类型的二进制数据，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">DataView</span><span data-wiz-span="data-wiz-span"> </span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">视图</span><span data-wiz-span="data-wiz-span">用来读写复杂类型的二进制数据。</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 对象代表储存二进制数据的</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">一段内存</span><span data-wiz-span="data-wiz-span">，它不能直接读写，只能通过</span><span style="color:rgb(255, 104, 32)" data-wiz-span="data-wiz-span">视图</span><span data-wiz-span="data-wiz-span">（</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> 视图或 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">DataView</span><span data-wiz-span="data-wiz-span"> </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">视图</span><span data-wiz-span="data-wiz-span">)来读写，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">视图</span><span data-wiz-span="data-wiz-span">的</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">作用</span><span data-wiz-span="data-wiz-span">是以指定格式</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">解读二进制数据</span><span data-wiz-span="data-wiz-span">。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> 有一个子类&nbsp;</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Uint8Array</span><span data-wiz-span="data-wiz-span">，该类型数组表示二进制补码 8 位有符号整数的数组，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Web IDL</span><span data-wiz-span="data-wiz-span"> 中定义它的类型为 byte，这是否表示 JS 自身有二进制数据类型了？不，它是个类似数组的对象，是个复合的 byte 类型，只要不是基本数据类型的 byte，就不能算。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">核心对象</span>，是所有的基础，是</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">原始的二进制数据</span><span data-wiz-span="data-wiz-span">，是基本的二进制对象 —— 对固定长度的</span><span data-wiz-span="data-wiz-span" style="color:rgb(255, 104, 32)">连续内存空间</span><span data-wiz-span="data-wiz-span">（就是</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">栈</span><span data-wiz-span="data-wiz-span">）的引用。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 与 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Array</span><span data-wiz-span="data-wiz-span"> <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">没有任何共同之处</span>：</span></div></div></div></div><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">· 它的长度是固定的，我们无法增加或减少它的长度。</span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span">· 它正好占用了内存中的那么多空间。</span></div></blockquote><blockquote style="text-align: left;"><div style="text-align: left;"><span data-wiz-span="data-wiz-span">· 要访问单个字节，需要另一个“视图”对象，而不是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">buffer[index]</span><span data-wiz-span="data-wiz-span">。</span></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">要操作 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span">，我们需要使用“视图”对象。视图对象本身并不存储任何东西。它是一副“眼镜”，透过它来解释存储在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 中的字节。例如&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8Array</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint16Array</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint32Array</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Float64Array</span><span data-wiz-span="data-wiz-span"> 等等。</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">请注意，没有名为 </span><span style="color:rgb(255, 255, 255);background-color:rgb(102, 102, 102)" data-wiz-span="data-wiz-span">TypedArray</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);"> 的构造器</span><span data-wiz-span="data-wiz-span">，它只是表示 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 上的视图（如 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Int8Array</span><span data-wiz-span="data-wiz-span">，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8Array</span><span data-wiz-span="data-wiz-span"> ）之一的通用总称术语。当你看到&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">new</span><span data-wiz-span="data-wiz-span"> </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span">&nbsp;之类的内容时，它表示&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">new</span><span data-wiz-span="data-wiz-span"> </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Int8Array</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">new</span><span data-wiz-span="data-wiz-span"> </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Uint8Array</span><span data-wiz-span="data-wiz-span">&nbsp;或其他，具体哪个取决于构造器的参数类型。虽然他们的的构造器的行为各不相同，但是无论是 </span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">new</span><span data-wiz-span="data-wiz-span"> </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Int8Array</span><span data-wiz-span="data-wiz-span"> 或 </span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">new</span><span data-wiz-span="data-wiz-span"> </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Float64Array</span><span data-wiz-span="data-wiz-span"> 都无关紧要。（可见&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">TypedArray</span><span data-wiz-span="data-wiz-span"> 是个抽象类）</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">类型化数组的行为</span><span data-wiz-span="data-wiz-span">类似于常规数组，具有索引（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">index</span>），并且是可迭代（<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Iterator</span>）的。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span">在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">JavaScript</span><span data-wiz-span="data-wiz-span"> 中有很多种二进制数据格式，会有点容易混淆。仅举几个例子：</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span">，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Uint8Array</span><span data-wiz-span="data-wiz-span">，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">DataView</span><span data-wiz-span="data-wiz-span">，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Blob</span><span data-wiz-span="data-wiz-span">，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">File</span><span data-wiz-span="data-wiz-span"> 及其他。与其他语言相比，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">JavaScript</span><span data-wiz-span="data-wiz-span"> 中的二进制数据是以非标准方式实现的。可见，虽然&nbsp;JS </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">自身没有二进制数据类型</span><span data-wiz-span="data-wiz-span">（</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Byte</span><span data-wiz-span="data-wiz-span">），但不代表 JS 就不能存储二进制数据了，</span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ArrayBuffer</span><span data-wiz-span="data-wiz-span"> 就是个例子。</span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">new ArrayBuffer(Int) </span><span data-wiz-span="data-wiz-span">时，系统会分配一个&nbsp;Int&nbsp;字节的连续内存空间，并用 0 进行预填充。</span></div></div></div></div><blockquote style="text-align: left;"><div><div><div><img src=""></div></div></div></blockquote><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div></div><div style="text-align: left;"><div><div><div><span><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">Ref：</span></b></span></div></div></div></div><blockquote style="text-align: left;"><div><a href="https://zh.javascript.info/arraybuffer-binary-arrays"><span data-wiz-span="data-wiz-span">《现代 JS - ArrayBuffer，二进制数组》</span></a><span data-wiz-span="data-wiz-span">&nbsp; &nbsp;&nbsp;</span></div></blockquote><blockquote style="text-align: left;"><div><a href="https://es6.ruanyifeng.com/#docs/arraybuffer"><span data-wiz-span="data-wiz-span">《阮一峰 - ECMAScript 6 入门 - ArrayBuffer》</span></a></div></blockquote><blockquote style="text-align: left;"><div><a href="https://zhuanlan.zhihu.com/p/97768916"><span data-wiz-span="data-wiz-span">《知乎 - 聊聊JS的二进制家族：Blob、ArrayBuffer和Buffer》</span></a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span" style="text-decoration-skip-ink:none"><a href="https://zhuanlan.zhihu.com/p/144381462">《知乎 - NodeJS中ArrayBuffer与Buffer的异同》</a></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API">《MDN - Web API 接口参考》</a></span></div><div><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">《MDN - Web API 接口参考 - <span style="color: rgb(0, 0, 0);">FileReader</span>》</a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><a href="https://zh.javascript.info/file">《JavaScript 现代 - File 和 FileReader》</a></span></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><br></span></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><h3><b>JS、WebAPI、DOM、BOM 之间的关系和区别：</b></h3></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">JS</span><span data-wiz-span="data-wiz-span"> 分<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">三大块</span>：</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">ECMAScript</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">DOM</span><span data-wiz-span="data-wiz-span">、</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">BOM</span><span data-wiz-span="data-wiz-span">。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">ECMAScript</span><span data-wiz-span="data-wiz-span"> 是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">核心</span><span data-wiz-span="data-wiz-span">，与什么浏览器、什么 HTML 元素、什么 XHR 对象都无关。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">DOM</span><span data-wiz-span="data-wiz-span"> 是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTML</span><span data-wiz-span="data-wiz-span"> 相关的，它的&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Web API </span><span data-wiz-span="data-wiz-span">用来操作 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">HTML</span><span data-wiz-span="data-wiz-span"> 元素，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">API</span><span data-wiz-span="data-wiz-span"> 都放在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">document 对象</span><span data-wiz-span="data-wiz-span">里；</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">BOM</span><span data-wiz-span="data-wiz-span"> 是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">浏览器</span><span data-wiz-span="data-wiz-span">相关的，它的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Web API</span><span data-wiz-span="data-wiz-span"> 用来操作浏览器，</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">API</span><span data-wiz-span="data-wiz-span"> 都放在 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">window</span><span data-wiz-span="data-wiz-span"> </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">对象</span><span data-wiz-span="data-wiz-span">里。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span data-wiz-span="data-wiz-span" style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);">Web API </span><span data-wiz-span="data-wiz-span">是 Web 应用编程时用的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">API</span><span data-wiz-span="data-wiz-span">，是一个接口，本质是一个</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">方法</span><span data-wiz-span="data-wiz-span">。然后再由 Web 应用（如浏览器）厂商去</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">实现</span><span data-wiz-span="data-wiz-span">这些 API，接着程序员就可以用这些 API </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">在 Web 应用上“为所欲为”</span><span data-wiz-span="data-wiz-span">。现在用的一般是 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">W3C</span><span data-wiz-span="data-wiz-span"> 制定的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Web API</span><span data-wiz-span="data-wiz-span">。</span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">Web API</span><span data-wiz-span="data-wiz-span"> 和 </span><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">DOM</span><span data-wiz-span="data-wiz-span"> 是两种概念，前者是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">接口</span><span data-wiz-span="data-wiz-span">，后者是</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">模型</span><span data-wiz-span="data-wiz-span">。 </span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">DOM</span><span data-wiz-span="data-wiz-span"> 可以拥有&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Web API </span><span data-wiz-span="data-wiz-span">，以便大家来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">操作</span><span data-wiz-span="data-wiz-span">它。</span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div style="text-align: left;"><span style="color: rgb(255, 255, 255); background-color: rgb(102, 102, 102);" data-wiz-span="data-wiz-span">DOM</span><span data-wiz-span="data-wiz-span"> 有 DOM 的 </span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">WebAPI</span><span data-wiz-span="data-wiz-span">，文件又有</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">文件的 WebAPI</span><span data-wiz-span="data-wiz-span">，文件的 Web API 显然是用来</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">操作文件</span><span data-wiz-span="data-wiz-span">的。文件的 Web API 中最典型的就是 </span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">Blob</span><span data-wiz-span="data-wiz-span">（父类）和&nbsp;</span><span style="color: rgb(255, 104, 32);" data-wiz-span="data-wiz-span">File</span><span data-wiz-span="data-wiz-span">（子类）了，API 都放在它们的对象里 。以下是&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Blob</span><span data-wiz-span="data-wiz-span">（父类）和&nbsp;</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">File</span><span data-wiz-span="data-wiz-span">（子类）</span><span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">Web IDL</span><span data-wiz-span="data-wiz-span"> 定义：</span></div></div></div><div data-mode="Java" data-theme="eclipse"  id="wiz_cm_1637413662763_5065" class="wiz-code-container"><textarea style="display:none;">// Blob 的 Web IDL 定义：
[Exposed=(Window,Worker), Serializable]
interface Blob {
    ……
}
// File 的 Web IDL 定义：
[Exposed=(Window,Worker), Serializable]
interface File : Blob {
    ……
}</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1637413662763_5065"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class=" wiz-hide wiz_CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class=" wiz-hide wiz_CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 248px; min-width: 307.25px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre class="CodeMirror-line-like"></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>10</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class=" wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div style="position: relative;" class="CodeMirror-activeline"><div class=" wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -30px; width: 30px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// Blob 的 Web IDL 定义：</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">[<span class="cm-variable">Exposed</span><span class="cm-operator">=</span>(<span class="cm-variable">Window</span>,<span class="cm-variable">Worker</span>), <span class="cm-variable">Serializable</span>]</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">interface</span> <span class="cm-def">Blob</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">……</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// File 的 Web IDL 定义：</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">[<span class="cm-variable">Exposed</span><span class="cm-operator">=</span>(<span class="cm-variable">Window</span>,<span class="cm-variable">Worker</span>), <span class="cm-variable">Serializable</span>]</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">interface</span> <span class="cm-def">File</span> : <span class="cm-variable">Blob</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">……</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line" role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 248px;"></div><div class="CodeMirror-gutters" style="height: 278px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">Ref：</span></b></div></div></div><blockquote style="text-align: left;"><div><a href="https://www.cnblogs.com/jiazexin/p/7080425.html"><span data-wiz-span="data-wiz-span">《cnblogs - JS由三部分组成》</span></a></div></blockquote><blockquote style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><a href="https://www.jb51.net/article/197374.htm">《jb51 - JavaScript Blob对象原理及用法详解》</a></span></div><div><a href="https://w3c.github.io/FileAPI/#file-section">《Github - w3c - File API - 4. The File Interface》</a></div></blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><div style="text-align: center;"><br></div></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div></div><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span"><br></span></div></div></div><h2 style="text-align: left;"><div><h1><span data-wiz-span="data-wiz-span">疑问：</span></h1></div></h2><div style="text-align: left;"><div><h2><span data-wiz-span="data-wiz-span"><br></span></h2><h2><span data-wiz-span="data-wiz-span" style="font-size: 2rem;">Q：</span><span data-wiz-span="data-wiz-span">如何理解“JS没有二进制数据类型”：</span></h2></div></div><blockquote><div style="text-align: left;"><div><div><span data-wiz-span="data-wiz-span">菜鸟教程里说“JavaScript 语言自身<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">只有字符串类型</span>，没有二进制数据类型”，可是 JavaScript 明明可以存储、操作二进制数据呀？这该怎么理解呢？</span></div></div></div></blockquote><div style="text-align: left;"><div><span data-wiz-span="data-wiz-span"><span data-wiz-span="data-wiz-span" style="font-size: 2rem;"><b>A：</b></span><span style="font-weight: normal;" data-wiz-span="data-wiz-span">网上有人说这里说的二进制类型其实是 <span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);">byte array</span>。但我觉得说的是基本数据类型是<span data-wiz-span="data-wiz-span" style="color: rgb(255, 104, 32);"> byte</span> 类型，因为它在 JS 中确实没有，不过在 Java 中有。</span></span></div><div><br></div><div><b style="font-size: 1.333rem;">Ref：</b><br></div></div><blockquote style="text-align: left;"><div><a href="https://segmentfault.com/q/1010000011003918"><span data-wiz-span="data-wiz-span">《在《七天学会node.js》里为什么说js语言自身只有字符串类型，没有二进制数据类型》</span></a></div></blockquote><h1 class="title" style="font-size: 1.25rem; color: rgb(51, 51, 51); font-family: 微软雅黑; text-align: left;"><span data-wiz-span="data-wiz-span"><br></span></h1><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div><div><span data-wiz-span="data-wiz-span"><br></span></div>

  <script type="text/javascript">
    /**
    * 让 iframe 中的 <a> 打开新页面
    */
    let aDoms = document.getElementsByTagName("a")
    for ( let aDom of aDoms ) {
      let oldHref = aDom.href;
      let newHref = "javascript:window.open('" + oldHref + "')";
      // console.info("aDom", aDom);
      aDom.href = newHref;
    }
  </script>

</body></html>