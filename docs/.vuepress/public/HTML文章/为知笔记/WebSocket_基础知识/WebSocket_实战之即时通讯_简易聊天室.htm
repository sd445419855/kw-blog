<!doctype html><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<title>WebSocket_实战之即时通讯_简易聊天室</title>
    
<style id="wiz_code_style">.wiz-editor-body .wiz-code-container{position: relative; padding:8px 0; margin: 5px 0;text-indent:0; text-align:left;}.CodeMirror {font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; color: black; font-size: 10.5pt; font-size: 0.875rem}.wiz-editor-body .wiz-code-container .CodeMirror div {margin-top: 0; margin-bottom: 0;}.CodeMirror-lines {padding: 4px 0;}.CodeMirror pre.CodeMirror-line,.CodeMirror pre.CodeMirror-line-like {padding: 0 4px;}.CodeMirror pre.CodeMirror-line {min-height: 24px;}.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {background-color: white;}.CodeMirror-gutters {border-right: 1px solid #ddd; background-color: #f7f7f7; white-space: nowrap;}.CodeMirror-linenumbers {}.CodeMirror-linenumber {padding: 0 3px 0 5px; min-width: 20px; text-align: right; color: #999; white-space: nowrap;}.CodeMirror-guttermarker {color: black;}.CodeMirror-guttermarker-subtle {color: #999;}.CodeMirror-cursor {border-left: 1px solid black; border-right: none; width: 0;}.CodeMirror div.CodeMirror-secondarycursor {border-left: 1px solid silver;}.cm-fat-cursor .CodeMirror-cursor {width: auto; border: 0 !important; background: #7e7;}.cm-fat-cursor div.CodeMirror-cursors {z-index: 1;}.cm-fat-cursor-mark {background-color: rgba(20, 255, 20, 0.5);-webkit-animation: blink 1.06s steps(1) infinite;-moz-animation: blink 1.06s steps(1) infinite;animation: blink 1.06s steps(1) infinite;}.cm-animate-fat-cursor {width: auto; border: 0; -webkit-animation: blink 1.06s steps(1) infinite; -moz-animation: blink 1.06s steps(1) infinite; animation: blink 1.06s steps(1) infinite; background-color: #7e7;}@-moz-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@-webkit-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}.CodeMirror-overwrite .CodeMirror-cursor {}.cm-tab { display: inline-block; text-decoration: inherit; }.CodeMirror-rulers {position: absolute; left: 0; right: 0; top: -50px; bottom: -20px; overflow: hidden;}.CodeMirror-ruler {border-left: 1px solid #ccc; top: 0; bottom: 0; position: absolute;}.cm-s-default .cm-header {color: blue;}.cm-s-default .cm-quote {color: #090;}.cm-negative {color: #d44;}.cm-positive {color: #292;}.cm-header, .cm-strong {font-weight: bold;}.cm-em {font-style: italic;}.cm-link {text-decoration: underline;}.cm-strikethrough {text-decoration: line-through;}.cm-s-default .cm-keyword {color: #708;}.cm-s-default .cm-atom {color: #219;}.cm-s-default .cm-number {color: #164;}.cm-s-default .cm-def {color: #00f;}.cm-s-default .cm-variable,.cm-s-default .cm-punctuation,.cm-s-default .cm-property,.cm-s-default .cm-operator {}.cm-s-default .cm-variable-2 {color: #05a;}.cm-s-default .cm-variable-3 {color: #085;}.cm-s-default .cm-comment {color: #a50;}.cm-s-default .cm-string {color: #a11;}.cm-s-default .cm-string-2 {color: #f50;}.cm-s-default .cm-meta {color: #555;}.cm-s-default .cm-qualifier {color: #555;}.cm-s-default .cm-builtin {color: #30a;}.cm-s-default .cm-bracket {color: #997;}.cm-s-default .cm-tag {color: #170;}.cm-s-default .cm-attribute {color: #00c;}.cm-s-default .cm-hr {color: #999;}.cm-s-default .cm-link {color: #00c;}.cm-s-default .cm-error {color: #f00;}.cm-invalidchar {color: #f00;}.CodeMirror-composing { border-bottom: 2px solid; }div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }.CodeMirror-activeline-background {background: #e8f2ff;}.CodeMirror {position: relative; background: #f5f5f5;}.CodeMirror-scroll {overflow: hidden !important; margin-bottom: 0; margin-right: -30px; padding: 16px 30px 16px 0; outline: none; position: relative;}.CodeMirror-sizer {position: relative; border-right: 30px solid transparent;}.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {position: absolute; z-index: 6; display: none;}.CodeMirror-vscrollbar {right: 0; top: 0; overflow-x: hidden; overflow-y: scroll;}.CodeMirror-hscrollbar {bottom: 0; left: 0 !important; overflow-y: hidden; overflow-x: scroll;pointer-events: auto !important;outline: none;}.CodeMirror-scrollbar-filler {right: 0; bottom: 0;}.CodeMirror-gutter-filler {left: 0; bottom: 0;}.CodeMirror-gutters {position: absolute; left: 0; top: 0; min-height: 100%; z-index: 3;}.CodeMirror-gutter {white-space: normal; height: 100%; display: inline-block; vertical-align: top; margin-bottom: -30px;}.CodeMirror-gutter-wrapper {position: absolute; z-index: 4; background: none !important; border: none !important;}.CodeMirror-gutter-background {position: absolute; top: 0; bottom: 0; z-index: 4;}.CodeMirror-gutter-elt {position: absolute; cursor: default; z-index: 4;}.CodeMirror-gutter-wrapper ::selection { background-color: transparent }.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }.CodeMirror-lines {cursor: text; min-height: 1px;}.CodeMirror pre.CodeMirror-line,.CodeMirror pre.CodeMirror-line-like {-moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0; border-width: 0; background: transparent; font-family: inherit; font-size: inherit; margin: 0; white-space: pre; word-wrap: normal; line-height: inherit; color: inherit; z-index: 2; position: relative; overflow: visible; -webkit-tap-highlight-color: transparent; -webkit-font-variant-ligatures: contextual; font-variant-ligatures: contextual;}.CodeMirror-wrap pre.CodeMirror-line,.CodeMirror-wrap pre.CodeMirror-line-like {word-wrap: break-word; white-space: pre-wrap; word-break: normal;}.CodeMirror-linebackground {position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 0;}.CodeMirror-linewidget {position: relative; z-index: 2; padding: 0.1px;}.CodeMirror-widget {}.CodeMirror-rtl pre { direction: rtl; }.CodeMirror-code {outline: none;}.CodeMirror-scroll,.CodeMirror-sizer,.CodeMirror-gutter,.CodeMirror-gutters,.CodeMirror-linenumber {-moz-box-sizing: content-box; box-sizing: content-box;}.CodeMirror-measure {position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;}.CodeMirror-cursor {position: absolute; pointer-events: none;}.CodeMirror-measure pre { position: static; }div.CodeMirror-cursors {visibility: hidden; position: relative; z-index: 3;}div.CodeMirror-dragcursors {visibility: visible;}.CodeMirror-focused div.CodeMirror-cursors {visibility: visible;}.CodeMirror-selected { background: #d9d9d9; }.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }.CodeMirror-crosshair { cursor: crosshair; }.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }.cm-searching {background: #ffa; background: rgba(255, 255, 0, .4);}.cm-force-border { padding-right: .1px; }@media print {  .CodeMirror div.CodeMirror-cursors {visibility: hidden;}}.cm-tab-wrap-hack:after { content: ""; }span.CodeMirror-selectedtext { background: none; }.CodeMirror-activeline-background, .CodeMirror-selected {transition: visibility 0ms 100ms;}.CodeMirror-blur .CodeMirror-activeline-background, .CodeMirror-blur .CodeMirror-selected {visibility:hidden;}.CodeMirror-blur .CodeMirror-matchingbracket {color:inherit !important;outline:none !important;text-decoration:none !important;}.CodeMirror-sizer {min-height:auto !important;}</style><style name="wiz_code_style" id="wiz_code_style-eclipse">.cm-s-eclipse span.cm-meta { color: #FF1717; }.cm-s-eclipse span.cm-keyword { line-height: 1em; font-weight: bold; color: #7F0055; }.cm-s-eclipse span.cm-atom { color: #219; }.cm-s-eclipse span.cm-number { color: #164; }.cm-s-eclipse span.cm-def { color: #00f; }.cm-s-eclipse span.cm-variable { color: black; }.cm-s-eclipse span.cm-variable-2 { color: #0000C0; }.cm-s-eclipse span.cm-variable-3 { color: #0000C0; }.cm-s-eclipse span.cm-property { color: black; }.cm-s-eclipse span.cm-operator { color: black; }.cm-s-eclipse span.cm-comment { color: #3F7F5F; }.cm-s-eclipse span.cm-string { color: #2A00FF; }.cm-s-eclipse span.cm-string-2 { color: #f50; }.cm-s-eclipse span.cm-qualifier { color: #555; }.cm-s-eclipse span.cm-builtin { color: #30a; }.cm-s-eclipse span.cm-bracket { color: #cc7; }.cm-s-eclipse span.cm-tag { color: #170; }.cm-s-eclipse span.cm-attribute { color: #00c; }.cm-s-eclipse span.cm-link { color: #219; }.cm-s-eclipse span.cm-error { color: #f00; }.cm-s-eclipse .CodeMirror-activeline-background { background: #e8f2ff; }.cm-s-eclipse .CodeMirror-matchingbracket { outline:1px solid grey; color:black !important; }</style><style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;position:relative;padding: 20px 16px;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body a {word-wrap: break-word;text-decoration-skip-ink: none;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body li.wiz-list-align-style {list-style-position: inside; margin-left: -1em;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;padding: 2px;vertical-align:bottom;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #a7afbc;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #a7afbc;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-editor-body td > div:first-child {margin-top:0;}.wiz-editor-body td > div:last-child {margin-bottom:0;}.wiz-editor-body img.wiz-svg-image {box-shadow:1px 1px 4px #E8E8E8;}.wiz-editor-body .wiz-image-container {margin:0;max-width: 100%;display: inline-flex;flex-direction: column;}.wiz-editor-body .wiz-image-container .wiz-image-title {display:inline-block;text-align: center;color: #a7afbc;line-height: 18px;font-size: 12px;min-height: 18px;width: 100%;white-space: normal;}.wiz-hide {display:none !important;}.wiz-editor-body.wiz-editor-outline {padding-right:0; padding-left:0;}.wiz-editor-body.wiz-editor-outline .outline-container {margin:0; padding:0; line-height:1.5;}.wiz-editor-body.wiz-editor-outline .outline-container div {margin:0;}.wiz-editor-body.wiz-editor-outline .node {margin:0; padding: 0;}.wiz-editor-body.wiz-editor-outline .outline-container > .node {margin-right:24px; margin-left:30px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .children {display:none;}.wiz-editor-body.wiz-editor-outline .node .row {position:relative; padding-left:26px;}.wiz-editor-body.wiz-editor-outline .node .operator-container {width:36px;position:absolute; top:4px; left:-18px;}.wiz-editor-body.wiz-editor-outline .node .operator-bar {position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center;}.wiz-editor-body.wiz-editor-outline .node .switch {width:18px; height:18px;display:flex;flex-direction: column;align-items: center;overflow: hidden;}.wiz-editor-body.wiz-editor-outline .node .switch i {font-size:20px;position:relative;left:-1px;top:-1px;}.wiz-editor-body.wiz-editor-outline .node .switch.active {cursor:pointer;color:transparent; transition:transform 200ms ease 0s;}.wiz-editor-body.wiz-editor-outline .node.collapsed .switch.active {transform:rotateZ(-90deg);}.wiz-editor-body.wiz-editor-outline .node .row:hover .switch.active {color:#505F79}.wiz-editor-body.wiz-editor-outline .node .dot {display:flex; align-items:center; justify-content:center; border-radius:100%; width:18px; height:18px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .dot {background-color:rgba(80, 95, 121, .15);}.wiz-editor-body.wiz-editor-outline .node .dot-icon {background-color:#505F79; border-radius:100%; width:6px; height:6px;}.wiz-editor-body.wiz-editor-outline .node .child {margin-left:8px; border-left:1px solid #E6E9ED; padding-left:17px;}.wiz-editor-body.wiz-editor-outline .node .content {flex:1;outline:none; padding:4px 0;}.wiz-editor-body.wiz-editor-outline .node div.content {font-size:1rem;}.wiz-editor-body.wiz-editor-outline .node.complete > .row .content {text-decoration:line-through;color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .notes {outline:none; font-size:.8rem; color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .image {outline:none; padding-top:4px; padding-bottom:4px;}.wiz-editor-body.wiz-editor-outline .outline-container h1,.wiz-editor-body.wiz-editor-outline .outline-container h2,.wiz-editor-body.wiz-editor-outline .outline-container h3,.wiz-editor-body.wiz-editor-outline .outline-container h4,.wiz-editor-body.wiz-editor-outline .outline-container h5,.wiz-editor-body.wiz-editor-outline .outline-container h6 {margin:0;}body, .wiz-editor-body {  padding-left: 48px;  padding-right: 48px;}</style></head>

<body onload="parent.window.document.all.dd.height=document.body.scrollHeight" class="wiz-editor-body" data-wiz-document-type="common" spellcheck="false"><div><br></div><div><br></div><h1>Node 接口定义：</h1><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636169209779_7639" class="wiz-code-container"><textarea style="display:none;">{
	"type":"类型",
	"nickname":"昵称",
	"message":"消息内容"
}
// type 取值：notification、message、nick_update</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636169209779_7639"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 152px; min-width: 369px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>6</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-string">"type"</span>:<span class="cm-string">"类型"</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-string">"nickname"</span>:<span class="cm-string">"昵称"</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-string">"message"</span>:<span class="cm-string">"消息内容"</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// type 取值：notification、message、nick_update</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 152px;"></div><div class="CodeMirror-gutters" style="height: 182px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><br></div><div><blockquote><span><div><br></div><div><br></div><div><br></div><div><br></div></span></blockquote></div><h1><span>WebSocket Server&nbsp;</span>广播之——广播用户聊天消息</h1><blockquote></blockquote><blockquote><div>广播是 WebSocket 的关键。广播不是调用 Server 的广播方法，没有这个方法，广播是调用一个又一个 Client 的 send 方法，一个一个的发消息。虽是官方方法，不过我还是吐槽，这个方法太 low 了，如果有 10W 用户要推消息，难不成把同一消息重复发送 10W 次吗？好了回归正题。</div><div>实现代码如下：</div></blockquote><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636690577624_1727" class="wiz-code-container"><textarea style="display:none;">// 新建 WebSocket Server 对象，关联 Http Server
const webSocketServer = new WebSocketServer({
  // port: 8888,                    // 青铜操作：单独监听一个端口
  server: httpServer                // 白银操作：监听 http 服务器
});  

// 封装广播消息的方法
const broadcast = function (msg){
    // ws.send(msg);                                          // 错误操作。这样不是广播，而是原路发给发送者。
      let clientArray = webSocketServer.clients;                // 正确操作。server 下有一个属性 clients，保存这所有连接进来的 client 。clients 是个 Set                                        
      clientArray.forEach((element, sameElement, set) =&gt; {      // Set 的 forEach 详见：https://www.cnblogs.com/wssdx/p/10738091.html                                       
        element.send(msg);                                                         
      });                                                               
}

// 广播消息
broadcast(JSON.stringify({
    message:'your message'
}));</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636690577624_1727"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 1385px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 464px; min-width: 1325px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>19</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 新建 WebSocket Server 对象，关联 Http Server</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">webSocketServer</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">WebSocketServer</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// port: 8888,                    // 青铜操作：单独监听一个端口</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-property">server</span>: <span class="cm-variable">httpServer</span>                <span class="cm-comment">// 白银操作：监听 http 服务器</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">});  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 封装广播消息的方法</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">broadcast</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">msg</span>){</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// ws.send(msg);                                          // 错误操作。这样不是广播，而是原路发给发送者。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-keyword">let</span> <span class="cm-def">clientArray</span> <span class="cm-operator">=</span> <span class="cm-variable">webSocketServer</span>.<span class="cm-property">clients</span>;                <span class="cm-comment">// 正确操作。server 下有一个属性 clients，保存这所有连接进来的 client 。clients 是个 Set                                        </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-variable-2">clientArray</span>.<span class="cm-property">forEach</span>((<span class="cm-def">element</span>, <span class="cm-def">sameElement</span>, <span class="cm-def">set</span>) <span class="cm-operator">=&gt;</span> {      <span class="cm-comment">// Set 的 forEach 详见：https://www.cnblogs.com/wssdx/p/10738091.html                                       </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">        <span class="cm-variable-2">element</span>.<span class="cm-property">send</span>(<span class="cm-variable-2">msg</span>);                                                         </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      });                                                               </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 广播消息</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">broadcast</span>(<span class="cm-variable">JSON</span>.<span class="cm-property">stringify</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">message</span>:<span class="cm-string">'your message'</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}));</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 464px;"></div><div class="CodeMirror-gutters" style="height: 494px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><br></div><div><br></div><div><br></div><h1><span>WebSocket 上线、离线通知实现方法：</span></h1><blockquote><div>既然<span style="color: rgb(255, 255, 255); background-color: rgb(127, 127, 127);">每连一个 Client 上来， Server 都会生成一个 WebSocket 对象来管理该 Client</span>，那么<span>无</span>论上线通知还是离线通知，操作这个 WebSocket 对象，拿到对应的用户昵称，再广播“该用户XX登录”就完成了。</div><div><br></div></blockquote><div>那么，如何操作这个 WebSocket 对象呢？</div><div>从官方文档可知，<span>这个 WebSocket 对象在 <span data-wiz-span="data-wiz-span" style="background-color: rgb(127, 127, 127); color: rgb(255, 255, 255);">Server </span>的 <span data-wiz-span="data-wiz-span" style="background-color: rgb(127, 127, 127); color: rgb(255, 255, 255);">connection </span>事件触发时会传给事件的<span data-wiz-span="data-wiz-span" style="background-color: rgb(127, 127, 127); color: rgb(255, 255, 255);">回调 callback</span>。注意，不是 open 事件。接下来，就在 connection 事件的回调里拿着这个对象为所欲为就完事了。</span></div><div><span>在这里，我用 Map 做个简单的实现，我把这个 WebSocket 对象作为 Map 的 key，对象的用户昵称作为 Map 的 value，建立了临时的一对一的 Client 与昵称的对应关系。</span></div><div><span><br></span></div><div><span>实现代码如下：</span></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">上线通知：</span></b></span></div><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636701081777_5883" class="wiz-code-container"><textarea style="display:none;">// 给 connection 事件绑定处理函数
webSocketServer.on('connection', handleConnection);

// -- connection
const handleConnection = function (ws){                     // 一个 ws (WebSocket实例) 对应一个已连接的 client
  // 生成 client 的默认 nickname
  if (nicknameMap.has(ws) == false) {
    nicknameMap.set(ws, nicknamePrefix.concat(counter));    // string.concat() 拼接字符串 
  }
  // 广播登录消息
  broadcast(JSON.stringify({
    type: 'notification',
    nickname: 'System',
    message: "用户 " + nicknameMap.get(ws) + " 进入群聊！"		// 在这获取用户昵称
  }));
};</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636701081777_5883"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 392px; min-width: 836.906px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>16</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 给 connection 事件绑定处理函数</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">webSocketServer</span>.<span class="cm-property">on</span>(<span class="cm-string">'connection'</span>, <span class="cm-variable">handleConnection</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// -- connection</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">handleConnection</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">ws</span>){                     <span class="cm-comment">// 一个 ws (WebSocket实例) 对应一个已连接的 client</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 生成 client 的默认 nickname</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-keyword">if</span> (<span class="cm-variable">nicknameMap</span>.<span class="cm-property">has</span>(<span class="cm-variable-2">ws</span>) <span class="cm-operator">==</span> <span class="cm-atom">false</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">nicknameMap</span>.<span class="cm-property">set</span>(<span class="cm-variable-2">ws</span>, <span class="cm-variable">nicknamePrefix</span>.<span class="cm-property">concat</span>(<span class="cm-variable">counter</span>));    <span class="cm-comment">// string.concat() 拼接字符串 </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 广播登录消息</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable">broadcast</span>(<span class="cm-variable">JSON</span>.<span class="cm-property">stringify</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">type</span>: <span class="cm-string">'notification'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">nickname</span>: <span class="cm-string">'System'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">message</span>: <span class="cm-string">"用户 "</span> <span class="cm-operator">+</span> <span class="cm-variable">nicknameMap</span>.<span class="cm-property">get</span>(<span class="cm-variable-2">ws</span>) <span class="cm-operator">+</span> <span class="cm-string">" 进入群聊！"</span><span class="cm-tab"> </span><span class="cm-tab">    </span><span class="cm-comment">// 在这获取用户昵称</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  }));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">};</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 392px;"></div><div class="CodeMirror-gutters" style="height: 422px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><br></div><div style="text-align: left;"><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size: 1.167rem;">离线通知：</span></b></span></div><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636701380193_2274" class="wiz-code-container"><textarea style="display:none;">// 给 connection 事件绑定处理函数
webSocketServer.on('connection', handleConnection);

// -- connection
const handleConnection = function (ws){                     // 一个 ws (WebSocket实例) 对应一个已连接的 client
  // 生成 client 的默认 nickname
  if (nicknameMap.has(ws) == false) {
    nicknameMap.set(ws, nicknamePrefix.concat(counter));    // string.concat() 拼接字符串 
  }    
  // 给客户端的 close 事件绑定处理函数
  ws.on('close', (code, reason) =&gt; { handleClientClose(code, reason, ws); });
  // -- client close
  const handleClientClose = function(code, reason, ws) {          // (Number,String)
    console.log('WebSocket Client closed! ', 'code: ', code, 'reason: ', reason)
    // 广播 client 离线通知
    broadcast(JSON.stringify({
      type: 'notification',
      nickname: 'System',
      message: "用户 " + nicknameMap.get(ws) + " 退出群聊！"		// 在这获取用户昵称
    }));
  };
};</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636701380193_2274"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 536px; min-width: 836.906px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>22</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 给 connection 事件绑定处理函数</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">webSocketServer</span>.<span class="cm-property">on</span>(<span class="cm-string">'connection'</span>, <span class="cm-variable">handleConnection</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// -- connection</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">handleConnection</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">ws</span>){                     <span class="cm-comment">// 一个 ws (WebSocket实例) 对应一个已连接的 client</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 生成 client 的默认 nickname</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-keyword">if</span> (<span class="cm-variable">nicknameMap</span>.<span class="cm-property">has</span>(<span class="cm-variable-2">ws</span>) <span class="cm-operator">==</span> <span class="cm-atom">false</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">nicknameMap</span>.<span class="cm-property">set</span>(<span class="cm-variable-2">ws</span>, <span class="cm-variable">nicknamePrefix</span>.<span class="cm-property">concat</span>(<span class="cm-variable">counter</span>));    <span class="cm-comment">// string.concat() 拼接字符串 </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  }    </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 给客户端的 close 事件绑定处理函数</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable-2">ws</span>.<span class="cm-property">on</span>(<span class="cm-string">'close'</span>, (<span class="cm-def">code</span>, <span class="cm-def">reason</span>) <span class="cm-operator">=&gt;</span> { <span class="cm-variable">handleClientClose</span>(<span class="cm-variable-2">code</span>, <span class="cm-variable-2">reason</span>, <span class="cm-variable-2">ws</span>); });</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// -- client close</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-keyword">const</span> <span class="cm-def">handleClientClose</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span>(<span class="cm-def">code</span>, <span class="cm-def">reason</span>, <span class="cm-def">ws</span>) {          <span class="cm-comment">// (Number,String)</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">'WebSocket Client closed! '</span>, <span class="cm-string">'code: '</span>, <span class="cm-variable-2">code</span>, <span class="cm-string">'reason: '</span>, <span class="cm-variable-2">reason</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// 广播 client 离线通知</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">broadcast</span>(<span class="cm-variable">JSON</span>.<span class="cm-property">stringify</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-property">type</span>: <span class="cm-string">'notification'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-property">nickname</span>: <span class="cm-string">'System'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-property">message</span>: <span class="cm-string">"用户 "</span> <span class="cm-operator">+</span> <span class="cm-variable">nicknameMap</span>.<span class="cm-property">get</span>(<span class="cm-variable-2">ws</span>) <span class="cm-operator">+</span> <span class="cm-string">" 退出群聊！"</span><span class="cm-tab">   </span><span class="cm-tab">    </span><span class="cm-comment">// 在这获取用户昵称</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">20</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    }));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">21</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  };</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">22</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">};</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 536px;"></div><div class="CodeMirror-gutters" style="height: 566px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><span><br></span></div><div><span><div><br></div></span></div><blockquote><span><div><br></div></span></blockquote><div><span><br></span></div><div><span><br></span></div><h1><span>WebSocket 如何发现并<span>关闭故障连接 ——</span></span><span>&nbsp;</span><span>心跳检测</span></h1><blockquote><div>要发现出现故障连接，就需要对该连接进行检测，那么 WebSocket 中如何检测一个连接是否故障了呢？</div><div><br></div><div><span>用心跳检测。那么 WebSocket 中怎么进行心跳检测呢？</span></div><div><span>在 WebSocket-WS 中，提供了 ping 和 pong 两个消息的发送方法和接收事件，以此实现心跳检测。ping、pong 顾名思义就是乒乓球的乒乓，这边一乒那边一乓，就构成一次心跳检测的整个过程。借助定时器，就可以实现定期的心跳检测了。</span></div></blockquote><blockquote><blockquote><div><div><img src="WebSocket_实战之即时通讯_简易聊天室_files/e91df66c-c562-4da4-8c79-23228eddb348.png"></div></div></blockquote></blockquote><div><div><br></div></div><div><span><b>实现代码：</b></span></div><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636709011400_8619" class="wiz-code-container"><textarea style="display:none;">// 新建 WebSocket Server 对象，关联 Http Server
const webSocketServer = new WebSocketServer({
  // port: 8888,                    // 青铜操作：单独监听一个端口
  server: httpServer                // 白银操作：监听 http 服务器
});  

// 为 WebSocket Server 事件绑定处理函数
// -- connection
webSocketServer.on('connection', handleClientConnection);
// -- close
webSocketServer.on('close', handleServerClose);
    
// 定期对 client 进行心跳检测
const intervalId = setInterval(() =&gt; {
  // console.info('webSocketServer.clients: ', webSocketServer.clients);
  webSocketServer.clients.forEach((element, sameElement, set) =&gt; {
    // 检查 client 存活状态
    // -- 当 client 存活为 false 时，则表示上一次发出去的心跳检测 ping 包没有收到对应的心跳响应 pong 包，那么表示该 client 没有心跳了
    if (element.isAlive == false) {
      console.info("client connection is closed!");
      // 终断与该 client 的连接     
      element.terminate();                  // terminate()：Forcibly close the connection. 强制关闭连接。 close()：Initiate a closing handshake. 发起一个关闭连接的请求。   二者作用基本相同，都会触发 client 的 close 事件，只是前者暴力，后者温柔，后者得一会儿才能关闭连接。
      // 返回，跳出当前 client 的后续心跳检查工作
      return;
    }
    // -- 当存活状态为 true 时，则表示上一次发出去的心跳检测 ping 包收到了对应的心跳响应 pong 包，那么表示该 client 还有心跳
    // ---- 可以做些什么，也可以什么都不做，继续下一次检测
    console.info("client connection is keeping alive!");
    // -- 重新发起心跳检测
    // ---- 初始化存活状态为 false
    element.isAlive = false;
    // ---- 发出心跳检测 ping 包，为下次判断存活状态做准备
    element.ping();
  });
  // 关停 WebSocket 服务
  // webSocketServer.close();
}, 3000);

// -- connection
const handleClientConnection = function (ws){                     // 一个 ws (WebSocket实例) 对应一个已连接的 client
  // 初始化 client 存活状态为 ture，即活着。
  ws.isAlive = true; 
  // 监听某个 client 的心跳响应事件，当收到 pong 消息时触发。以此事件检查发出去的 ping 包对应的 pong 包（心跳响应包）是否有发过来
  ws.on('pong', handleClientPong);
}

// -- close   WebSocket 服务关闭时
const handleServerClose = function (event){
  console.info("WebSocket Server closed!", event);
  // 清除 client 心跳检测的定时器
  clearInterval(intervalId);
};

// ---- heart beat  收到心跳响应 pong 包的处理 
const handleClientPong = function (event){
  // 系统通知该客户端还活着
  console.info("received heart beat of client!");
  // client 存活状态设为 true。
  this.isAlive = true;                                    // 收到心跳响应 pong 包，说明 client 还活着，isAlive 就设为 true
}</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636709011400_8619"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 2065px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 1448px; min-width: 2005px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>60</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 新建 WebSocket Server 对象，关联 Http Server</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">webSocketServer</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">WebSocketServer</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// port: 8888,                    // 青铜操作：单独监听一个端口</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-property">server</span>: <span class="cm-variable">httpServer</span>                <span class="cm-comment">// 白银操作：监听 http 服务器</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">});  </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 为 WebSocket Server 事件绑定处理函数</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// -- connection</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">webSocketServer</span>.<span class="cm-property">on</span>(<span class="cm-string">'connection'</span>, <span class="cm-variable">handleClientConnection</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// -- close</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">webSocketServer</span>.<span class="cm-property">on</span>(<span class="cm-string">'close'</span>, <span class="cm-variable">handleServerClose</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 定期对 client 进行心跳检测</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">intervalId</span> <span class="cm-operator">=</span> <span class="cm-variable">setInterval</span>(() <span class="cm-operator">=&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// console.info('webSocketServer.clients: ', webSocketServer.clients);</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable">webSocketServer</span>.<span class="cm-property">clients</span>.<span class="cm-property">forEach</span>((<span class="cm-def">element</span>, <span class="cm-def">sameElement</span>, <span class="cm-def">set</span>) <span class="cm-operator">=&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// 检查 client 存活状态</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// -- 当 client 存活为 false 时，则表示上一次发出去的心跳检测 ping 包没有收到对应的心跳响应 pong 包，那么表示该 client 没有心跳了</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-keyword">if</span> (<span class="cm-variable-2">element</span>.<span class="cm-property">isAlive</span> <span class="cm-operator">==</span> <span class="cm-atom">false</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">20</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-variable">console</span>.<span class="cm-property">info</span>(<span class="cm-string">"client connection is closed!"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">21</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-comment">// 终断与该 client 的连接     </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">22</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-variable-2">element</span>.<span class="cm-property">terminate</span>();                  <span class="cm-comment">// terminate()：Forcibly close the connection. 强制关闭连接。 close()：Initiate a closing handshake. 发起一个关闭连接的请求。   二者作用基本相同，都会触发 client 的 close 事件，只是前者暴力，后者温柔，后者得一会儿才能关闭连接。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">23</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-comment">// 返回，跳出当前 client 的后续心跳检查工作</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">24</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">      <span class="cm-keyword">return</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">25</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">26</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// -- 当存活状态为 true 时，则表示上一次发出去的心跳检测 ping 包收到了对应的心跳响应 pong 包，那么表示该 client 还有心跳</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">27</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// ---- 可以做些什么，也可以什么都不做，继续下一次检测</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">28</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">console</span>.<span class="cm-property">info</span>(<span class="cm-string">"client connection is keeping alive!"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">29</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// -- 重新发起心跳检测</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">30</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// ---- 初始化存活状态为 false</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">31</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable-2">element</span>.<span class="cm-property">isAlive</span> <span class="cm-operator">=</span> <span class="cm-atom">false</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">32</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-comment">// ---- 发出心跳检测 ping 包，为下次判断存活状态做准备</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">33</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable-2">element</span>.<span class="cm-property">ping</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">34</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  });</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">35</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 关停 WebSocket 服务</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">36</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// webSocketServer.close();</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">37</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}, <span class="cm-number">3000</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">38</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">39</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// -- connection</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">40</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">handleClientConnection</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">ws</span>){                     <span class="cm-comment">// 一个 ws (WebSocket实例) 对应一个已连接的 client</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">41</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 初始化 client 存活状态为 ture，即活着。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">42</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable-2">ws</span>.<span class="cm-property">isAlive</span> <span class="cm-operator">=</span> <span class="cm-atom">true</span>; </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">43</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 监听某个 client 的心跳响应事件，当收到 pong 消息时触发。以此事件检查发出去的 ping 包对应的 pong 包（心跳响应包）是否有发过来</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">44</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable-2">ws</span>.<span class="cm-property">on</span>(<span class="cm-string">'pong'</span>, <span class="cm-variable">handleClientPong</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">45</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">46</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">47</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// -- close   WebSocket 服务关闭时</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">48</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">handleServerClose</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">event</span>){</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">49</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable">console</span>.<span class="cm-property">info</span>(<span class="cm-string">"WebSocket Server closed!"</span>, <span class="cm-variable-2">event</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">50</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 清除 client 心跳检测的定时器</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">51</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable">clearInterval</span>(<span class="cm-variable">intervalId</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">52</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">};</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">53</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">54</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// ---- heart beat  收到心跳响应 pong 包的处理 </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">55</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">const</span> <span class="cm-def">handleClientPong</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">event</span>){</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">56</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// 系统通知该客户端还活着</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">57</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-variable">console</span>.<span class="cm-property">info</span>(<span class="cm-string">"received heart beat of client!"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">58</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-comment">// client 存活状态设为 true。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">59</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">  <span class="cm-keyword">this</span>.<span class="cm-property">isAlive</span> <span class="cm-operator">=</span> <span class="cm-atom">true</span>;                                    <span class="cm-comment">// 收到心跳响应 pong 包，说明 client 还活着，isAlive 就设为 true</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">60</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 1448px;"></div><div class="CodeMirror-gutters" style="height: 1478px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><br></div><div><br></div><div><b>心跳检测的优点和短板：</b></div><div>&nbsp; &nbsp; 优点：<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 及时检测出有问题的 WebSocket 连接，如网络中断或 Client 无响应的，避免服务器资源浪费。<br></div><div>&nbsp; &nbsp; 短板：<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 因为用到了定时器，因此需要在不用时销毁定时器。<br></div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br></div><div><br></div><div><br></div><div><b>Ref：</b></div><blockquote><div><a href="https://segmentfault.com/a/1190000038952999">《<span style="color: rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color: rgb(0, 0, 0);">websocket心跳及重连机制</span>》</a><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></div><div><a href="https://segmentfault.com/q/1010000012568371">《<span>segmentfault -&nbsp;</span><span>websocket onclose回调不检测的问题</span>》</a></div></blockquote><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1>前端效果：</h1><div><div><img src="WebSocket_实战之即时通讯_简易聊天室_files/535e3685-5203-4dff-9b23-c56531fb5da0.png"></div><div><div></div><div><br></div></div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><div><br></div><h1>疑问：</h1><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>WebSocket Server 接收到的消息<span>为什么是 Buffer 类型</span><span>而不是 String </span><span>类型呢？</span></b></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>Buffer，缓冲器/区，是 Node.js 为弥补原生 JS 无法操作二进制数据而创造的一个类。该类的对象是一个专门存放二进制数据的缓存区，这个缓存区使</div><blockquote><div>用的内存是 V8 堆内存之外的原始内存。</div><div>Buffer 概念示意图：</div></blockquote><blockquote><div><div><div><img src="WebSocket_实战之即时通讯_简易聊天室_files/160d6842-0889-4563-9058-bbb634f61682.png"></div></div></div></blockquote><blockquote><blockquote>回归主题，WebSocket Server 接收到的消息的数据类型为什么是 Buffer 而不是 String 呢？你用的是第三方插件 WebSocket-WS，这个插件作者从 v8.0 开始这么干的，原因得问作者去。既然如此，那便暂不深究了。</blockquote><blockquote><br></blockquote><blockquote><br></blockquote><blockquote><div>&nbsp; &nbsp;&nbsp;</div></blockquote></blockquote><div><div><div>&nbsp; &nbsp; <b>Ref：</b><br></div></div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <span>runoob -<span>&nbsp;</span></span>Node.js Buffer(缓冲区)<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <a href="https://www.runoob.com/nodejs/nodejs-buffer.html">https://www.runoob.com/nodejs/nodejs-buffer.html</a></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span>csdn -&nbsp;</span>Buffer类型的介绍<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <a href="https://blog.csdn.net/weixin_33704234/article/details/92069551">https://blog.csdn.net/weixin_33704234/article/details/92069551</a></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span>csdn -&nbsp;</span>对于js中网络接口websocket，二进制数组arraybuffer，视图对象dataview学习记录。<br></div></div><div><span>&nbsp; &nbsp;&nbsp;</span><span>&nbsp; &nbsp;&nbsp;</span><span><a href="https://blog.csdn.net/xzl159/article/details/73896398">https://blog.csdn.net/xzl159/article/details/73896398</a> </span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; liaoxuefeng - WebSocket<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096">https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096</a></div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;5axxw - 为什么接收到的websocket数据作为缓冲区输出？&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<a href="https://www.5axxw.com/questions/content/p7x3bn">https://www.5axxw.com/questions/content/p7x3bn</a></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 原文：</div><div><span>&nbsp; &nbsp;&nbsp;</span><span>&nbsp; &nbsp;&nbsp;</span><span>&nbsp; &nbsp;&nbsp;</span><span>&nbsp; &nbsp;&nbsp;</span><span>buzzphp - Why is received websocket data coming out as a buffer?</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="https://www.buzzphp.com/posts/why-is-received-websocket-data-coming-out-as-a-buffer">https://www.buzzphp.com/posts/why-is-received-websocket-data-coming-out-as-a-buffer</a></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;newreleases - ws&nbsp; 8.0.0&nbsp;<span>on Node.js NPM</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <a href="https://newreleases.io/project/npm/ws/release/8.0.0">https://newreleases.io/project/npm/ws/release/8.0.0</a></div><div> <br></div><div><br></div><div><br></div><div><b style="font-size:1.5rem;">Q：</b><b>如何获取 WebSocket Client 的 ID 或类似 ID 的东西？</b></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.333rem;">A：</span></b>这种东西显然只能由客户端自己生成一个传过来，<span>即便是服务端生成，那也需要客户端先提供唯一的账号，说来说去，还是得客户端先提供一个唯一的&nbsp;</span></div><blockquote><div><span>ID。在第三方插件中，至少 WebSocket-WS 不会在服务端帮你随机生成一个临时的 ID。</span></div></blockquote><div><br></div><div><span><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>既然没有 Client ID，那么如何给 Client 绑定昵称呢？</b></span></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>在服务端通过 WebSocket 对象可以跟 Client 一对一通信。<span data-wiz-span="data-wiz-span" style="background-color:rgb(127, 127, 127);color:rgb(255, 255, 255);">每连一个 Client 上来， Server 都会生成一个 WebSocket 对象来管理该 Client</span>，把该 Client&nbsp;</div><blockquote><div>作<span>为 Map 的 key，昵称存在 Map 的 value 里就能建立了。只不过，这只是临时绑定，只能存在于内存之中，无法保存到数据库中。&nbsp;</span></div></blockquote><blockquote><div><div><img src="WebSocket_实战之即时通讯_简易聊天室_files/f85c09c5-f21c-45bc-85f5-03bc9442ab8f.png" width="947" height="523"></div></div></blockquote><div><div><br></div></div><div><br></div><div><b style="font-size:1.333rem;"><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span></b><b>如果客户端发送一个普通对象，后台收到的会是什么数据？反过来，<span>如果后台发送一个普通对象，客户端收到的会是什么数据？</span></b></div><div><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">A：</span></b>如果客户端发送一个普通对象，后台收到的是一个数据为字符串“[object Object]” 的 Buffer，具体结果如下：</div></div><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636812591639_997" class="wiz-code-container"><textarea style="display:none;">// Client
webSocketClient.send(JSON.stringify({
    type: 'modifyNickname',
    message: 'newName'
})); </textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636812591639_997"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 128px; min-width: 291.734px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>5</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// Client</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">webSocketClient</span>.<span class="cm-property">send</span>(<span class="cm-variable">JSON</span>.<span class="cm-property">stringify</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">type</span>: <span class="cm-string">'modifyNickname'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">message</span>: <span class="cm-string">'newName'</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">})); </span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 128px;"></div><div class="CodeMirror-gutters" style="height: 158px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636812591600_5984" class="wiz-code-container"><textarea style="display:none;">// Server
ws.on('message', (msg) =&gt; {
    console.log('received-origin: ', msg);                      // &lt;Buffer 5b 6f 62 6a 65 63 74 20 4f 62 6a 65 63 74 5d&gt;
    console.log('received-string: %s', msg);                    // "[object Object]"    
    console.log('received-toStrng: ', msg.toString());          // "[object Object]"
    console.log('received-JSON.parse(): ', JSON.parse(msg));    // 报错 SyntaxError: Unexpected token o in JSON at position 1                          
});</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636812591600_5984"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 1226px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 176px; min-width: 1166px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>7</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// Server</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">ws</span>.<span class="cm-property">on</span>(<span class="cm-string">'message'</span>, (<span class="cm-def">msg</span>) <span class="cm-operator">=&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">'received-origin: '</span>, <span class="cm-variable-2">msg</span>);                      <span class="cm-comment">// &lt;Buffer 5b 6f 62 6a 65 63 74 20 4f 62 6a 65 63 74 5d&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">'received-string: %s'</span>, <span class="cm-variable-2">msg</span>);                    <span class="cm-comment">// "[object Object]"    </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">'received-toStrng: '</span>, <span class="cm-variable-2">msg</span>.<span class="cm-property">toString</span>());          <span class="cm-comment">// "[object Object]"</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-string">'received-JSON.parse(): '</span>, <span class="cm-variable">JSON</span>.<span class="cm-property">parse</span>(<span class="cm-variable-2">msg</span>));    <span class="cm-comment">// 报错 SyntaxError: Unexpected token o in JSON at position 1                          </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">});</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 176px;"></div><div class="CodeMirror-gutters" style="height: 206px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><div><br></div><div><span>&nbsp; &nbsp;&nbsp;</span><span>如果后台发送一个普通对象，后台会直接报错 “TypeError [ERR_INVALID_ARG_TYPE]”，无效参数类型。</span></div></div><div data-mode="JavaScript" data-theme="eclipse" id="wiz_cm_1636812591547_4096" class="wiz-code-container"><textarea style="display:none;">// Server
ws.send({
    type: 'notification',
    nickname: 'system',
    message: previousNickname + " 改名为 " + newNickname
});

// 报错：
// TypeError [ERR_INVALID_ARG_TYPE]: The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type object</textarea><wiz_code_mirror><div class="CodeMirror cm-s-eclipse" data-id="wiz_cm_1636812591547_4096"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 20px; left: 34px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="padding:0px; width:1000px; height:1em;"></textarea></div><div class="wiz-hide wiz_CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="wiz-hide wiz_CodeMirror-hscrollbar" style="display: block; right: 0px; left: 0px; height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 1252px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 30px; margin-bottom: 0px; border-right-width: 30px; min-height: 224px; min-width: 1192px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>9</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// Server</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">ws</span>.<span class="cm-property">send</span>({</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">type</span>: <span class="cm-string">'notification'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">nickname</span>: <span class="cm-string">'system'</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">    <span class="cm-property">message</span>: <span class="cm-variable">previousNickname</span> <span class="cm-operator">+</span> <span class="cm-string">" 改名为 "</span> <span class="cm-operator">+</span> <span class="cm-variable">newNickname</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">});</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right:0.1px"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// 报错：</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -30px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// TypeError [ERR_INVALID_ARG_TYPE]: The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type object</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom: 0px solid transparent; top: 224px;"></div><div class="CodeMirror-gutters" style="height: 254px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><div><br></div><div><br></div><div><br></div><div><div><span><div><div><span data-wiz-span="data-wiz-span"><b><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;">Q：</span>为什么&nbsp;WebSocket Server 上 close 事件在 Client 或者 Server 关闭后始终不会触发？</b><b>&nbsp;</b></span></div></div><div><span data-wiz-span="data-wiz-span" style="font-size:1.5rem;"><b>A：</b></span>这是<b style="color:rgb(255, 104, 32);">离线通知容易出现一个问题，</b><span data-wiz-span="data-wiz-span">这是因</span><span>为</span><span>用了错误的对象的 close 事件。close 事件要用 Client 的，而不是 Server 的。&nbsp;&nbsp;</span></div></span></div></div><blockquote><div><div><span><div><span>有关于 Client 的 WebSocket 对象（ws）和 服务端的 WebSocket 对象（ws 和 wsServer）的关系，我用下图做出了描述：</span></div></span></div></div></blockquote><div><blockquote><span><div><div><img src="WebSocket_实战之即时通讯_简易聊天室_files/7d7b6d4c-8d6b-486c-ab5e-139169de4c4a.png"></div></div><div><br></div><div>&nbsp; &nbsp; 如果对 wsServer 中的 <span data-wiz-span="data-wiz-span" style="color:rgb(51, 102, 255);">close</span> <span style="background-color:rgb(127, 127, 127);color:rgb(255, 255, 255);" data-wiz-span="data-wiz-span">方法</span><span>和<span data-wiz-span="data-wiz-span" style="background-color:rgb(127, 127, 127);color:rgb(255, 255, 255);">事件</span>有兴趣，可看下图中对官方解释的剖析：</span></div></span></blockquote><blockquote><blockquote><span><div><div><div><img src="WebSocket_实战之即时通讯_简易聊天室_files/4f4828cb-3805-4437-8682-a016faafe1ae.png"></div></div></div></span></blockquote></blockquote><blockquote><span><div><div><br></div></div></span></blockquote></div></div><blockquote><div><div><blockquote><span><div><br></div></span></blockquote></div></div><div><b>Ref：</b></div><blockquote><div><div><span><a href="https://github.com/websockets/ws">《Github - websockets/ws 官方文档：How to detect and close broken connections?》</a></span></div></div></blockquote><blockquote><div><div><div><a href="https://www.coder.work/article/1853867" style="text-decoration-skip-ink:none;">《coder - javascript - WebSocket:调用 close() 不会触发 onclose 处理程序？》</a></div></div></div></blockquote></blockquote><blockquote><blockquote><blockquote><div><div><blockquote><div><span>原文：</span><a href="https://stackoverflow.com/questions/48619631/websocket-call-close-wont-trigger-onclose-handler" style="text-decoration-skip-ink:none;">《StackOverflow - WebSocket：调用 close() 不会触发 onclose 处理程序？》</a></div></blockquote></div></div></blockquote></blockquote></blockquote><blockquote><blockquote><div><div><div><a href="https://segmentfault.com/q/1010000014556469" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">segmentfault -&nbsp;</span><span style="color:rgb(0, 0, 0);">swoole websocket 直接断网无法触发onClose事件</span>》</a></div></div></div></blockquote><blockquote><div><div><div><a href="https://www.zhihu.com/question/21094303" style="text-decoration-skip-ink:none;">《知乎 - 为什么WebSocket建立成功后关闭wifi，server不能立即响应onclose事件呢？》</a></div></div></div></blockquote><blockquote><div><div><div><a href="https://juejin.cn/post/6844903977457287181" style="text-decoration-skip-ink:none;">《<span style="color:rgb(0, 0, 0);">掘金 - WebSocket教程</span>》</a></div></div></div></blockquote><blockquote><div><div><div><div><a href="https://developers.weixin.qq.com/community/develop/doc/000a088112c0d8be7d6cf21705b000" style="text-decoration-skip-ink:none;">《微信 - websocket连接，如果断网，oncolse触发条件不同？》</a></div></div></div></div></blockquote></blockquote><div><div><blockquote></blockquote></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><h1>涉及技术：</h1><div><span>● 虚拟机 NAT 网络模式下，网络是如何工作的，如何与宿主机通信：</span><br></div><div>&nbsp; &nbsp; 详见<span>笔记《</span><a href="/views/技术总结/前端技术/为知笔记/虚拟机_基础知识（idnex）.html">虚拟机基础知识</a><span>》之《虚拟机在 NAT 网络模式下与宿主机之间的网络工作原理》</span></div><div><span>●<span>&nbsp;</span></span>Set 遍历之 forEach：</div><div>&nbsp; &nbsp; 详见<a href="https://www.cnblogs.com/wssdx/p/10738091.html">《cnblogs - js遍历集和(Array,Map,Set) (forEach, map, for, for...in, for...of)》</a><br></div><div>● 用对象做 Map 的 key</div><div><br></div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;<br></div><h1 style="font-size:1.67rem;"><span><br>优化建议：</span></h1><div>聊天室页面优化建议：</div><div>&nbsp; &nbsp; 1.消息不能自动滚动</div><div>&nbsp; &nbsp; 2.输入消息这一栏有点小&nbsp;</div><div>&nbsp; &nbsp; 3.输完消息不能自动清空&nbsp;</div><div>&nbsp; &nbsp; 4.对话框有点小</div><div><br></div><div><br></div><div><div><br></div><h1>项目发布地址：</h1><div><a href="http://www.lovewanwan.life:3000/my-chat-room/" style="text-decoration-skip-ink:none;">http://www.lovewanwan.life:3000/my-chat-room/</a></div><div><br></div></div><div><br></div></div>

  <script type="text/javascript">
    /**
    * 让 iframe 中的 <a> 打开新页面
    */
    let aDoms = document.getElementsByTagName("a")
    for ( let aDom of aDoms ) {
      let oldHref = aDom.href;
      let newHref = "javascript:window.open('" + oldHref + "')";
      // console.info("aDom", aDom);
      aDom.href = newHref;
    }
  </script>

</body></html>